[
  {
    "objectID": "student-record/student-record-ZuxiLu.html",
    "href": "student-record/student-record-ZuxiLu.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m ZuxiLu on GitHub! Here’s my contribution to the rcp project."
  },
  {
    "objectID": "student-record/mozuqi25.html",
    "href": "student-record/mozuqi25.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m M Zulkifli on GitHub!\nHere’s my contribution to the CRP project."
  },
  {
    "objectID": "student-record/TingTing.html",
    "href": "student-record/TingTing.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m TingTing on GitHub! Here’s my contribution to the rcp project."
  },
  {
    "objectID": "student-record/SiaChawla.html",
    "href": "student-record/SiaChawla.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m Sia Chawla on GitHub! Here’s my contribution to the rcp project."
  },
  {
    "objectID": "student-record/Nutchanok.html",
    "href": "student-record/Nutchanok.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "G’day"
  },
  {
    "objectID": "student-record/MikeLydeamore.html",
    "href": "student-record/MikeLydeamore.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m Michael. I’m the Chief Examiner of the unit in 2025! Hi,I’m samuel shao. I am the student."
  },
  {
    "objectID": "student-record/Caoyu Shao.html",
    "href": "student-record/Caoyu Shao.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m Michael. I’m the Chief Examiner of the unit in 2025! Hi,I’m samuel shao. I am the student."
  },
  {
    "objectID": "student-record/BhaviSinghC.html",
    "href": "student-record/BhaviSinghC.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, this is a practice for Tutorial Week 5."
  },
  {
    "objectID": "week9/workshop/index.html",
    "href": "week9/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this workshop, you will practice using git bisect to identify the commit that introduced a bug into a repository. You will also make a pull request to fix the bug once you’ve found it.\n\n\n\nBefore beginning, make sure you have: - Forked the repository git-bisect-demo into your own GitHub account. - Cloned the repository from your fork to your local machine.\n\n\n\n\n\nGo to the git-bisect-demo repository.\nIn the top-right corner, click the Fork button to create your own copy of the repository on GitHub.\nAfter forking, clone your fork to your local machine using the following command:\ngit clone https://github.com/&lt;your-username&gt;/git-bisect-demo.git\nNavigate to the cloned repository:\ncd git-bisect-demo\n\n\n\n\n\n\nThe git-bisect-demo repository contains a bug in the square() function. Your task is to identify the commit that introduced the bug using git bisect.\nBegin by starting the git bisect process:\ngit bisect start\nMark the current (bad) commit:\nSince the latest commit has the bug in it (the square() function is broken), we will mark it as bad:\ngit bisect bad\nIdentify a good commit:\nThe square() function was working correctly before the bug was introduced. To identify a “good” commit, we need to mark a commit before the bug was introduced. You can look at the GitHub history or use git log to find a commit before the bug was introduced (for example, commit 10).\ngit bisect good &lt;commit-hash&gt;\n\nReplace &lt;commit-hash&gt; with the hash of a known good commit (such as the initial commit or the last commit before the bug was introduced).\n\n\n\n\n\n\n\nNow, Git will automatically check out a commit halfway between the good and bad commits. Your job is to test whether the bug is present in this commit.\n\nOpen the script.R file and inspect the code. If the bug is present, mark the commit as bad:\ngit bisect bad\nIf the bug is not present, mark the commit as good:\ngit bisect good\n\nGit will continue to narrow down the commits by checking out commits halfway between the last good and bad marks. Repeat the process of inspecting the code and marking each commit as either good or bad until Git identifies the commit that introduced the bug.\n\n\n\n\n\n\nOnce the commit has been identified, you should make a branch from that point to fix the bug.\ngit switch -C fix-square-bug\nOpen the script.R file and modify the square() function to correct the bug:\nsquare &lt;- function(x) {\n  return(x * x)  # Fix the bug (it was previously x + x)\n}\nCommit the fix:\ngit add script.R\ngit commit -m \"Fix bug in square function\"\nPush the changes to GitHub:\n\ngit push origin fix-square-bug\n\n\n\n\n\nEnd the git bisect session:\ngit bisect reset\nPush your changes to your GitHub fork:\ngit push origin master\nGo to your GitHub repository and create a Pull Request from your fork’s master branch to the original repository (mikelydeamore/git-bisect-demo).\n\nMake sure to provide a detailed description in the pull request, explaining:\n\nThe bug that was fixed.\nThe process you used to find the bug using git bisect.\nThe fix you made.\n\n\n\n\n\n\n\n\nIf you’re not sure which commit is good or bad, use git log to help you identify the commit hashes.\nIf you make a mistake or want to change your good/bad marks, use git bisect reset to start the process over.\nDon’t forget to push your changes to your fork after fixing the bug!\n\n\n\n\n\nIn this workshop, you learned how to use git bisect to find the commit that introduced a bug in a Git repository. You also learned how to fix the bug and create a pull request with your fix. This process is very useful for debugging and narrowing down the source of issues in large codebases.\n\n\n\nIn this exercise, you’ll write a test script that automatically checks for the bug in the square function, which you can use during the git bisect process. This script will be used to help you determine the exact commit that introduced the bug.\n\n\n\nUnderstand the Bug\n\nThe bug is that the square function produces incorrect results for certain inputs, and you’ll need to test it during the git bisect process.\n\nCreate a Test Script for Bisect\n\nCreate a new file called test-bisect.R in the repository. This file will contain an R script for testing the bug. It will return 0 (success) if the bug is not present and 1 (failure) if the bug is present. git bisect uses this exit code to determine whether to continue searching in the good or bad commit range.\n\nWrite the Bisect Test Script\n\nThe script should check the functionality of the square function. For the purposes of this exercise, assume the bug is present when the result of square(2) is not equal to 4.\n\n\nsource(\"script.R\")\nresult &lt;- square(2)\n\nif (result != 4) {\n    quit(status = 1)\n} else {\n    quit(status = 0)\n}\n\n\n\n\nThis script runs an R command using Rscript, sources the script.R file, calls the square function with an input of 2, and checks if the result is 4.\nIf the result is not 4, the script exits with a status code of 1, which signals git bisect that the bug is present in the current commit (bad commit).\nIf the result is 4, the script exits with a status code of 0, signaling that the commit is “good”.\n\n\nRun git bisect\n\nNow, you can start git bisect using the following commands:\n\n\n# Start the bisect process by specifying a good commit and a bad commit\ngit bisect start\ngit bisect bad # This marks the current commit as bad (contains the bug)\ngit bisect good &lt;commit-hash&gt; # This marks an older commit as good (before the bug)\n\n# Use the bisect_test.sh script to automatically test each commit\ngit bisect run Rscript test-bisect.R\n\nInterpreting the Results\n\ngit bisect will automatically check each commit in the range between the good and bad commits by using the bisect_test.sh script. When the process finishes, git bisect will tell you the first bad commit where the bug was introduced.\nOnce the bisect process completes, run the following command to reset the repository to its original state:\n\n\ngit bisect reset\n\nCheck whether the automatic bisect has worked\n\nCheck the contents of script.R and see if you have found the bug. If not, you may need to modify test-bisect.R to better capture the case where the bug is present!"
  },
  {
    "objectID": "week9/workshop/index.html#objective",
    "href": "week9/workshop/index.html#objective",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this workshop, you will practice using git bisect to identify the commit that introduced a bug into a repository. You will also make a pull request to fix the bug once you’ve found it."
  },
  {
    "objectID": "week9/workshop/index.html#pre-requisite",
    "href": "week9/workshop/index.html#pre-requisite",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Before beginning, make sure you have: - Forked the repository git-bisect-demo into your own GitHub account. - Cloned the repository from your fork to your local machine."
  },
  {
    "objectID": "week9/workshop/index.html#step-1-fork-the-repository",
    "href": "week9/workshop/index.html#step-1-fork-the-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to the git-bisect-demo repository.\nIn the top-right corner, click the Fork button to create your own copy of the repository on GitHub.\nAfter forking, clone your fork to your local machine using the following command:\ngit clone https://github.com/&lt;your-username&gt;/git-bisect-demo.git\nNavigate to the cloned repository:\ncd git-bisect-demo"
  },
  {
    "objectID": "week9/workshop/index.html#step-2-start-the-git-bisect-workflow",
    "href": "week9/workshop/index.html#step-2-start-the-git-bisect-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "The git-bisect-demo repository contains a bug in the square() function. Your task is to identify the commit that introduced the bug using git bisect.\nBegin by starting the git bisect process:\ngit bisect start\nMark the current (bad) commit:\nSince the latest commit has the bug in it (the square() function is broken), we will mark it as bad:\ngit bisect bad\nIdentify a good commit:\nThe square() function was working correctly before the bug was introduced. To identify a “good” commit, we need to mark a commit before the bug was introduced. You can look at the GitHub history or use git log to find a commit before the bug was introduced (for example, commit 10).\ngit bisect good &lt;commit-hash&gt;\n\nReplace &lt;commit-hash&gt; with the hash of a known good commit (such as the initial commit or the last commit before the bug was introduced)."
  },
  {
    "objectID": "week9/workshop/index.html#step-3-bisecting-the-commits",
    "href": "week9/workshop/index.html#step-3-bisecting-the-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Now, Git will automatically check out a commit halfway between the good and bad commits. Your job is to test whether the bug is present in this commit.\n\nOpen the script.R file and inspect the code. If the bug is present, mark the commit as bad:\ngit bisect bad\nIf the bug is not present, mark the commit as good:\ngit bisect good\n\nGit will continue to narrow down the commits by checking out commits halfway between the last good and bad marks. Repeat the process of inspecting the code and marking each commit as either good or bad until Git identifies the commit that introduced the bug."
  },
  {
    "objectID": "week9/workshop/index.html#step-4-fix-the-bug",
    "href": "week9/workshop/index.html#step-4-fix-the-bug",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Once the commit has been identified, you should make a branch from that point to fix the bug.\ngit switch -C fix-square-bug\nOpen the script.R file and modify the square() function to correct the bug:\nsquare &lt;- function(x) {\n  return(x * x)  # Fix the bug (it was previously x + x)\n}\nCommit the fix:\ngit add script.R\ngit commit -m \"Fix bug in square function\"\nPush the changes to GitHub:\n\ngit push origin fix-square-bug"
  },
  {
    "objectID": "week9/workshop/index.html#step-5-complete-the-bisect-and-create-a-pull-request",
    "href": "week9/workshop/index.html#step-5-complete-the-bisect-and-create-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "End the git bisect session:\ngit bisect reset\nPush your changes to your GitHub fork:\ngit push origin master\nGo to your GitHub repository and create a Pull Request from your fork’s master branch to the original repository (mikelydeamore/git-bisect-demo).\n\nMake sure to provide a detailed description in the pull request, explaining:\n\nThe bug that was fixed.\nThe process you used to find the bug using git bisect.\nThe fix you made."
  },
  {
    "objectID": "week9/workshop/index.html#tips",
    "href": "week9/workshop/index.html#tips",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "If you’re not sure which commit is good or bad, use git log to help you identify the commit hashes.\nIf you make a mistake or want to change your good/bad marks, use git bisect reset to start the process over.\nDon’t forget to push your changes to your fork after fixing the bug!"
  },
  {
    "objectID": "week9/workshop/index.html#conclusion",
    "href": "week9/workshop/index.html#conclusion",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this workshop, you learned how to use git bisect to find the commit that introduced a bug in a Git repository. You also learned how to fix the bug and create a pull request with your fix. This process is very useful for debugging and narrowing down the source of issues in large codebases.\n\n\n\nIn this exercise, you’ll write a test script that automatically checks for the bug in the square function, which you can use during the git bisect process. This script will be used to help you determine the exact commit that introduced the bug.\n\n\n\nUnderstand the Bug\n\nThe bug is that the square function produces incorrect results for certain inputs, and you’ll need to test it during the git bisect process.\n\nCreate a Test Script for Bisect\n\nCreate a new file called test-bisect.R in the repository. This file will contain an R script for testing the bug. It will return 0 (success) if the bug is not present and 1 (failure) if the bug is present. git bisect uses this exit code to determine whether to continue searching in the good or bad commit range.\n\nWrite the Bisect Test Script\n\nThe script should check the functionality of the square function. For the purposes of this exercise, assume the bug is present when the result of square(2) is not equal to 4.\n\n\nsource(\"script.R\")\nresult &lt;- square(2)\n\nif (result != 4) {\n    quit(status = 1)\n} else {\n    quit(status = 0)\n}\n\n\n\n\nThis script runs an R command using Rscript, sources the script.R file, calls the square function with an input of 2, and checks if the result is 4.\nIf the result is not 4, the script exits with a status code of 1, which signals git bisect that the bug is present in the current commit (bad commit).\nIf the result is 4, the script exits with a status code of 0, signaling that the commit is “good”.\n\n\nRun git bisect\n\nNow, you can start git bisect using the following commands:\n\n\n# Start the bisect process by specifying a good commit and a bad commit\ngit bisect start\ngit bisect bad # This marks the current commit as bad (contains the bug)\ngit bisect good &lt;commit-hash&gt; # This marks an older commit as good (before the bug)\n\n# Use the bisect_test.sh script to automatically test each commit\ngit bisect run Rscript test-bisect.R\n\nInterpreting the Results\n\ngit bisect will automatically check each commit in the range between the good and bad commits by using the bisect_test.sh script. When the process finishes, git bisect will tell you the first bad commit where the bug was introduced.\nOnce the bisect process completes, run the following command to reset the repository to its original state:\n\n\ngit bisect reset\n\nCheck whether the automatic bisect has worked\n\nCheck the contents of script.R and see if you have found the bug. If not, you may need to modify test-bisect.R to better capture the case where the bug is present!"
  },
  {
    "objectID": "week8/workshop/index.html",
    "href": "week8/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Understand: - Why Git can’t handle big files normally - How to recover if you accidentally try to commit something too big - The basics of Git LFS\n\n\n\n\n\nCreate a new GitHub repository:\ngit-lfs-practice\nClone it to your computer using RStudio:\n\nFile → New Project → Version Control → Git\nPaste the repo URL\n\n\n\n\n\n\n1l. Download the zip file from the Week 8 Moodle website\n\n\n\n\n\nStage bigfile.txt\nTry to commit it.\n\n🔵 Expected Result:\nGitHub will likely reject the push (file too large &gt;100MB), or your Git client will warn you.\n✅ You’ve hit a real size limit!\n\n\n\n\n\nTry to revert the bad commit:\ngit revert HEAD\n\n🔵 Expected Result:\nGit won’t let you — because the giant file is still in the commit history.\n⚠️ Key point: git revert adds new commits; it doesn’t erase old ones.\n\n\n\n\n\nDo a soft reset to move back before the bad commit:\ngit reset --soft HEAD~1\nNow unstage the big file manually in RStudio (or):\ngit restore --staged bigfile.txt\nDelete bigfile.txt from your project folder.\nCommit the new clean state:\n\"Remove large file after reset\"\n\n\n\n\n\n\nInstall Git LFS:\nFollow instructions here → https://git-lfs.github.com/\nTrack large files safely:\ngit lfs install\ngit lfs track \"*.csv\"\nThen commit/push files as usual — Git LFS manages the storage.\n\n\n\n\n\n\n\n\nProblem\nSolution\n\n\n\n\nCommitted a huge file\ngit reset + delete manually\n\n\nNeed to work with big files safely\nUse Git LFS\n\n\n\n🎉 You survived a Git crisis — just like real developers do!"
  },
  {
    "objectID": "week8/workshop/index.html#goal",
    "href": "week8/workshop/index.html#goal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Understand: - Why Git can’t handle big files normally - How to recover if you accidentally try to commit something too big - The basics of Git LFS"
  },
  {
    "objectID": "week8/workshop/index.html#setup",
    "href": "week8/workshop/index.html#setup",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create a new GitHub repository:\ngit-lfs-practice\nClone it to your computer using RStudio:\n\nFile → New Project → Version Control → Git\nPaste the repo URL"
  },
  {
    "objectID": "week8/workshop/index.html#simulate-a-mistake-add-a-huge-file",
    "href": "week8/workshop/index.html#simulate-a-mistake-add-a-huge-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "1l. Download the zip file from the Week 8 Moodle website"
  },
  {
    "objectID": "week8/workshop/index.html#try-to-commit-the-huge-file",
    "href": "week8/workshop/index.html#try-to-commit-the-huge-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Stage bigfile.txt\nTry to commit it.\n\n🔵 Expected Result:\nGitHub will likely reject the push (file too large &gt;100MB), or your Git client will warn you.\n✅ You’ve hit a real size limit!"
  },
  {
    "objectID": "week8/workshop/index.html#try-to-fix-it-with-git-revert",
    "href": "week8/workshop/index.html#try-to-fix-it-with-git-revert",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Try to revert the bad commit:\ngit revert HEAD\n\n🔵 Expected Result:\nGit won’t let you — because the giant file is still in the commit history.\n⚠️ Key point: git revert adds new commits; it doesn’t erase old ones."
  },
  {
    "objectID": "week8/workshop/index.html#actually-fix-it-with-git-reset",
    "href": "week8/workshop/index.html#actually-fix-it-with-git-reset",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Do a soft reset to move back before the bad commit:\ngit reset --soft HEAD~1\nNow unstage the big file manually in RStudio (or):\ngit restore --staged bigfile.txt\nDelete bigfile.txt from your project folder.\nCommit the new clean state:\n\"Remove large file after reset\""
  },
  {
    "objectID": "week8/workshop/index.html#install-git-lfs",
    "href": "week8/workshop/index.html#install-git-lfs",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Install Git LFS:\nFollow instructions here → https://git-lfs.github.com/\nTrack large files safely:\ngit lfs install\ngit lfs track \"*.csv\"\nThen commit/push files as usual — Git LFS manages the storage."
  },
  {
    "objectID": "week8/workshop/index.html#summary",
    "href": "week8/workshop/index.html#summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Problem\nSolution\n\n\n\n\nCommitted a huge file\ngit reset + delete manually\n\n\nNeed to work with big files safely\nUse Git LFS\n\n\n\n🎉 You survived a Git crisis — just like real developers do!"
  },
  {
    "objectID": "week8/index.html#etc5513-title",
    "href": "week8/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nReferencing, large files, and GitHub Issues\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 9\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week8/index.html#open-frame",
    "href": "week8/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week8/index.html#recap",
    "href": "week8/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nStart learning about LaTeX\nLaTeX integration in QMD files\nUnderstand commits and SHA1 numbers\nMoving back to past commits\nReverting commits"
  },
  {
    "objectID": "week8/index.html#aim",
    "href": "week8/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nLearn how to add references and bibliography\nDealing with large files\nTags\nGitHub issues"
  },
  {
    "objectID": "week8/index.html#parts-of-a-latex-file",
    "href": "week8/index.html#parts-of-a-latex-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Parts of a LaTeX file",
    "text": "Parts of a LaTeX file\n\n\\documentclass{article} % Preamble/header: load packages, set options\n\\usepackage{amsmath}\n\\author{M. J. Lydeamore}\n\n\\begin{document} % Body starts here, and goes until corresponding 'end'\n\n\\section{Introduction}\n\n\\end{document} % \"After body\" but before end\n\nThe includes-in-* sections in Quarto go into each of these pieces of the LaTeX code."
  },
  {
    "objectID": "week8/index.html#different-ways-to-include-latex",
    "href": "week8/index.html#different-ways-to-include-latex",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different ways to include LaTeX",
    "text": "Different ways to include LaTeX\n\nManually typing out the code\nUsing an input .tex file\nCustomised template file\n\n\nMany templates are available:\nJournal articles Monash templates Question/Answer templates"
  },
  {
    "objectID": "week8/index.html#the-bibliography-file",
    "href": "week8/index.html#the-bibliography-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The bibliography file",
    "text": "The bibliography file\nFirst thing we need is a place to store information about our references.\nA standard file format is called the bibliography database file (which ends in .bib)."
  },
  {
    "objectID": "week8/index.html#the-bibliography-file-1",
    "href": "week8/index.html#the-bibliography-file-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The bibliography file",
    "text": "The bibliography file\n\nTo cite a paper in the text, we use the key from the bib file\nThese files are plain text, so you can open them in RStudio or VSCode\n\n\nTo get bib entries:\n\nGoogle Scholar\nReference manager such as Zotero or Mendeley"
  },
  {
    "objectID": "week8/index.html#the-bibliography-file-example",
    "href": "week8/index.html#the-bibliography-file-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The bibliography file: Example",
    "text": "The bibliography file: Example\n@Manual{R-base,\n  title = {R: A Language and Environment for Statistical\n           Computing}, \n  author = {{R Core Team}},\n  organization = {R Foundation for Statistical Computing},\n  address = {Vienna, Austria},\n  year = {2019},\n  url = {https://www.R-project.org},\n}\n\nTo cite this in your quarto file, use @R-base"
  },
  {
    "objectID": "week8/index.html#citing-r-packages",
    "href": "week8/index.html#citing-r-packages",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Citing R packages",
    "text": "Citing R packages\nYou can get the citations for R packages using toBibtex(citation(\"tidyverse\"))"
  },
  {
    "objectID": "week8/index.html#large-files-in-git-and-github",
    "href": "week8/index.html#large-files-in-git-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Large files in git and GitHub",
    "text": "Large files in git and GitHub\nWhat happens when you commit a big file on GitHub?\nFiles larger than 50mb won’t upload properly\n\nInstead, we deal with these using Git Large File Storage (lfs).\nPlease see info for installation here and make sure you install this extension.\n\n\nGitHub and BitBucket both have LFS support, and handle changes to these files much more sensibly."
  },
  {
    "objectID": "week8/index.html#setup-for-git-lfs",
    "href": "week8/index.html#setup-for-git-lfs",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Setup for git LFS",
    "text": "Setup for git LFS\nTo set up large file storage:\n\nNavigate to the repo\nIn the CLI, type git lfs install\n\nNow, large files can be tracked using the relevant command. For example:\ngit lfs track '*.nc'\ngit lfs track '*.csv'\ngit lfs track '*.pdf'\nNote the quotes!\n\nThis will create a .gitattributes file. Make sure to add this to your repo.\nThen, use your standard workflow of add, commit, push."
  },
  {
    "objectID": "week8/index.html#summary",
    "href": "week8/index.html#summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Summary",
    "text": "Summary\n\nNavigate to the local repo and run git lfs install\n`git lfs track “*.csv”\ngit add .gitattributes\ngit add data.csv as per normal\n\n\nIt is essential you run git lfs install before committing and pushing, otherwise you will get an error message."
  },
  {
    "objectID": "week8/index.html#what-if-i-already-have-a-large-file",
    "href": "week8/index.html#what-if-i-already-have-a-large-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What if I already have a large file?",
    "text": "What if I already have a large file?\nIf you have committed a large file, you probably got an error message you have to fix.\nRecall:\ngit reset --soft HEAD~1\nThen:\ngit lfs install\ngit add .gitattributes file.csv\ngit commit -m \"Adding data files through GIT LFS\"\ngit push origin main"
  },
  {
    "objectID": "week8/index.html#more-on-committing",
    "href": "week8/index.html#more-on-committing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More on committing",
    "text": "More on committing\nSo far, we’ve used a one-line commit (although we could do with more practice on those)\n\nWe can add more text into a commit, and many times this is sensible.\nDetailed commit structure:\nFirst line\nBlank line\nRest of the text"
  },
  {
    "objectID": "week8/index.html#git-tags",
    "href": "week8/index.html#git-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git tags",
    "text": "Git tags\ntags are custom labels or references that point to specific points in your git history\nGenerlaly used to capture a specific point in the repo history, like a release, or a report milestone.\n\n\n\n\n\n\nTip\n\n\nYou can think of a tag like a branch that doesn’t change\n\n\n\nUnlike branches, tags don’t have any further history of commits.\nGreat tutorial on tags here"
  },
  {
    "objectID": "week8/index.html#git-tags-example",
    "href": "week8/index.html#git-tags-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git tags example",
    "text": "Git tags example"
  },
  {
    "objectID": "week8/index.html#types-of-tags",
    "href": "week8/index.html#types-of-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Types of tags",
    "text": "Types of tags\nThere are two types of tags: lightweight and annotated. The difference is the metadata they come with.\nBest practice is lightweight tags for personal use, and annotated tags as marks for version releases\nAnnotated tags stores extra metadata like the tagger name, email and date\nLightweight tags are only a pointer to a commit."
  },
  {
    "objectID": "week8/index.html#creating-and-sharing-tags",
    "href": "week8/index.html#creating-and-sharing-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating and sharing tags",
    "text": "Creating and sharing tags\nTo create an annotated tag:\ngit tag -a v 1.0\nor\ngit tag -a v1.0 SHA1\nThis will create a new annotated tag with label v1.0. The command will open your text editor for further metadata."
  },
  {
    "objectID": "week8/index.html#annotated-tag-example",
    "href": "week8/index.html#annotated-tag-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Annotated tag example",
    "text": "Annotated tag example"
  },
  {
    "objectID": "week8/index.html#lightweight-tags",
    "href": "week8/index.html#lightweight-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Lightweight tags",
    "text": "Lightweight tags\ngit tag v1.0 will create a lightweight tag\n\nCan you spot the difference?"
  },
  {
    "objectID": "week8/index.html#listing-tags",
    "href": "week8/index.html#listing-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Listing tags",
    "text": "Listing tags\ngit tag\n\ngit tag -n will also show us the associated message, or you can do git show tagname"
  },
  {
    "objectID": "week8/index.html#tagging-old-commits",
    "href": "week8/index.html#tagging-old-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tagging old commits",
    "text": "Tagging old commits\nBy default, git tag creates a tag on HEAD\nIf you want to tag an old commit:\ngit log --oneline\ngit tag -a v1.2 15027957951b64cf874c3557a0f"
  },
  {
    "objectID": "week8/index.html#sharing-tags",
    "href": "week8/index.html#sharing-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Sharing tags",
    "text": "Sharing tags\nSharing tags is similar to pushing branches.\nBy default, git push does not push tags\ngit push origin tagname will push the tag."
  },
  {
    "objectID": "week8/index.html#viewing-your-tags-on-github",
    "href": "week8/index.html#viewing-your-tags-on-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Viewing your tags on GitHub",
    "text": "Viewing your tags on GitHub"
  },
  {
    "objectID": "week8/index.html#viewing-your-tags-on-github-1",
    "href": "week8/index.html#viewing-your-tags-on-github-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Viewing your tags on GitHub",
    "text": "Viewing your tags on GitHub"
  },
  {
    "objectID": "week8/index.html#checking-tags",
    "href": "week8/index.html#checking-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Checking tags",
    "text": "Checking tags\nYou can check out tags: git checkout v1.0\nThis will put you in a detached HEAD state, so commits won’t be recorded\n\nUnless??"
  },
  {
    "objectID": "week8/index.html#deleting-a-tag",
    "href": "week8/index.html#deleting-a-tag",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Deleting a tag",
    "text": "Deleting a tag\n\ngit tag: Lists tags\ngit tag -d v1: Deletes tag v1\ngit push origin --delete v1: Deletes it from the remote"
  },
  {
    "objectID": "week8/index.html#why-use-tags",
    "href": "week8/index.html#why-use-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Why use tags?",
    "text": "Why use tags?\nWe could just use a branch (that never gets merged) instead of a tag.\nFor storing points in history, this is fine (although not the intention of a branch)\nA branch is supposed to be a “variation” on the main repository, not a point-in-time record\nTags are designed to fill that void."
  },
  {
    "objectID": "week8/index.html#github-issues-1",
    "href": "week8/index.html#github-issues-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub Issues",
    "text": "GitHub Issues\nYou can create a GitHub Issue on the web:"
  },
  {
    "objectID": "week8/index.html#github-issues-2",
    "href": "week8/index.html#github-issues-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub Issues",
    "text": "GitHub Issues\nYour collaborators can see the issue:"
  },
  {
    "objectID": "week8/index.html#more-on-issues",
    "href": "week8/index.html#more-on-issues",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More on issues",
    "text": "More on issues\n\nMore info about issues here"
  },
  {
    "objectID": "week8/index.html#week-9-lesson",
    "href": "week8/index.html#week-9-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 9 Lesson",
    "text": "Week 9 Lesson\n\n\n\n\n\n\nImportant\n\n\n\nLearn how to add references and bibliography\nDealing with large files\nTags\nGitHub issues"
  },
  {
    "objectID": "week7/tutorial/index.html",
    "href": "week7/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn how to remove files from Git tracking with git rm, and prevent them from being re-added with a .gitignore file.\n\n\n\n\n\n\n\nCreate a new repository:\ngit-ignore-cleanup\n✅ Check “Add a README file”\n\n\n\n\n\n\nGo to File → New Project → Version Control → Git\nPaste the repo URL (SSH or HTTPS)\nChoose a location and click Create Project\n\n✅ You’re now working in a Git-tracked project.\n\n\n\n\n\n\nCreate a new qmd in RStudio:\n\nGo to File → New File → Quarto Document\n\nSave the file as notes.qmd\nAdd some content like:\nsummary(mtcars)\nStage and commit the file:\n\"Add analysis script\"\n\n\n\n\n\n\nDownload the data from Week 2 on Moodle, and save it into your project as data.csv\nStage and commit:\ngit add data.csv\ngit commit -m \"Add raw data\"\n\n\n\n\n\nRealise you don’t want this in version control, but you still need it for local use.\nIn the terminal:\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data.csv\"\n✅ data.csv is still on your computer, but Git will no longer track it.\n\n\n\n\nTo prevent it from being accidentally added again:\n\nOpen (or create) a .gitignore file in your repo root\nAdd:\ndata.csv\nSave and stage the .gitignore file\nCommit:\n\"Ignore data.csv\"\n\n\n\n\n\n\nRun:\n\ngit status\n✅ You should not see data.csv listed anywhere — Git is now ignoring it.\n\n\n\n\nLet’s now try squashing a few commits into one clean one.\n\n\n\n\nEdit your .qmd file and make 3 separate commits:\n\nAdd a new section or chunk → commit: \"Add section\"\nFix a typo → commit: \"Fix typo\"\nAdd a final comment → commit: \"Add footnote\"\n\n\n✅ Commit after each change using the Git pane or terminal.\n\n\n\n\nRun in the Terminal:\ngit log --oneline\nYou should see something like:\nc3d4e5f Add footnote\nb2c3d4e Fix typo\na1b2c3d Add section\n...\n\n\n\n\ngit rebase -i HEAD~3\nYou’ll see:\npick a1b2c3d Add section\npick b2c3d4e Fix typo\npick c3d4e5f Add footnote\n\n\n\n\nChange it to:\npick a1b2c3d Add section\nsquash b2c3d4e\nsquash c3d4e5f\nSave and write a new combined commit message like:\nAdd section with typo fix and footnote\nSave again to finish the rebase.\n\n\n\n\nRun:\ngit log --oneline\n✅ You should now see one clean commit where there were three.\n\n\n\n\n\n\nWhy is --amend useful when working on a single file?\nWhen is it good practice to squash commits?\nWhat would happen if you did this after pushing?\n\n\n\n\n\n\n\n\nAction\nCommand\n\n\n\n\nFix your last commit\ngit commit --amend\n\n\nCombine multiple commits\ngit rebase -i HEAD~N\n\n\nKeep your history clean\nUse these before pushing\n\n\n\n🎉 You’ve just learned to write cleaner, more professional commit histories!"
  },
  {
    "objectID": "week7/tutorial/index.html#goal",
    "href": "week7/tutorial/index.html#goal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn how to remove files from Git tracking with git rm, and prevent them from being re-added with a .gitignore file."
  },
  {
    "objectID": "week7/tutorial/index.html#create-and-clone-a-repo",
    "href": "week7/tutorial/index.html#create-and-clone-a-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create a new repository:\ngit-ignore-cleanup\n✅ Check “Add a README file”\n\n\n\n\n\n\nGo to File → New Project → Version Control → Git\nPaste the repo URL (SSH or HTTPS)\nChoose a location and click Create Project\n\n✅ You’re now working in a Git-tracked project."
  },
  {
    "objectID": "week7/tutorial/index.html#add-and-commit-a-file",
    "href": "week7/tutorial/index.html#add-and-commit-a-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create a new qmd in RStudio:\n\nGo to File → New File → Quarto Document\n\nSave the file as notes.qmd\nAdd some content like:\nsummary(mtcars)\nStage and commit the file:\n\"Add analysis script\""
  },
  {
    "objectID": "week7/tutorial/index.html#accidentally-add-a-data-file",
    "href": "week7/tutorial/index.html#accidentally-add-a-data-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Download the data from Week 2 on Moodle, and save it into your project as data.csv\nStage and commit:\ngit add data.csv\ngit commit -m \"Add raw data\""
  },
  {
    "objectID": "week7/tutorial/index.html#remove-the-file-from-git-but-keep-it-locally",
    "href": "week7/tutorial/index.html#remove-the-file-from-git-but-keep-it-locally",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Realise you don’t want this in version control, but you still need it for local use.\nIn the terminal:\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data.csv\"\n✅ data.csv is still on your computer, but Git will no longer track it."
  },
  {
    "objectID": "week7/tutorial/index.html#add-it-to-.gitignore",
    "href": "week7/tutorial/index.html#add-it-to-.gitignore",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "To prevent it from being accidentally added again:\n\nOpen (or create) a .gitignore file in your repo root\nAdd:\ndata.csv\nSave and stage the .gitignore file\nCommit:\n\"Ignore data.csv\""
  },
  {
    "objectID": "week7/tutorial/index.html#check-it-worked",
    "href": "week7/tutorial/index.html#check-it-worked",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Run:\n\ngit status\n✅ You should not see data.csv listed anywhere — Git is now ignoring it."
  },
  {
    "objectID": "week7/tutorial/index.html#squash-commits-with-interactive-rebase",
    "href": "week7/tutorial/index.html#squash-commits-with-interactive-rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Let’s now try squashing a few commits into one clean one.\n\n\n\n\nEdit your .qmd file and make 3 separate commits:\n\nAdd a new section or chunk → commit: \"Add section\"\nFix a typo → commit: \"Fix typo\"\nAdd a final comment → commit: \"Add footnote\"\n\n\n✅ Commit after each change using the Git pane or terminal.\n\n\n\n\nRun in the Terminal:\ngit log --oneline\nYou should see something like:\nc3d4e5f Add footnote\nb2c3d4e Fix typo\na1b2c3d Add section\n...\n\n\n\n\ngit rebase -i HEAD~3\nYou’ll see:\npick a1b2c3d Add section\npick b2c3d4e Fix typo\npick c3d4e5f Add footnote\n\n\n\n\nChange it to:\npick a1b2c3d Add section\nsquash b2c3d4e\nsquash c3d4e5f\nSave and write a new combined commit message like:\nAdd section with typo fix and footnote\nSave again to finish the rebase.\n\n\n\n\nRun:\ngit log --oneline\n✅ You should now see one clean commit where there were three."
  },
  {
    "objectID": "week7/tutorial/index.html#reflect",
    "href": "week7/tutorial/index.html#reflect",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Why is --amend useful when working on a single file?\nWhen is it good practice to squash commits?\nWhat would happen if you did this after pushing?"
  },
  {
    "objectID": "week7/tutorial/index.html#summary",
    "href": "week7/tutorial/index.html#summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Action\nCommand\n\n\n\n\nFix your last commit\ngit commit --amend\n\n\nCombine multiple commits\ngit rebase -i HEAD~N\n\n\nKeep your history clean\nUse these before pushing\n\n\n\n🎉 You’ve just learned to write cleaner, more professional commit histories!"
  },
  {
    "objectID": "week7/tutorial/index.html#goal-1",
    "href": "week7/tutorial/index.html#goal-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧭 Goal",
    "text": "🧭 Goal\nUnderstand the difference between git merge and git rebase by applying both to the same branches and comparing the result."
  },
  {
    "objectID": "week7/tutorial/index.html#setup-create-a-feature-branch",
    "href": "week7/tutorial/index.html#setup-create-a-feature-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "1️⃣ Setup: Create a Feature Branch",
    "text": "1️⃣ Setup: Create a Feature Branch\nIn your GitHub-connected RStudio project:\n\nCreate a file: experiment.R\nAdd one line:\nMain branch version\nSave, stage, and commit:\n\"Add base file on main\"\nCreate a new branch called feature:\n\ngit switch -c feature"
  },
  {
    "objectID": "week7/tutorial/index.html#add-work-on-the-feature-branch",
    "href": "week7/tutorial/index.html#add-work-on-the-feature-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "2️⃣ Add Work on the Feature Branch",
    "text": "2️⃣ Add Work on the Feature Branch\n\nEdit experiment.R again:\nFeature branch addition\nSave and commit:\n\"Add feature content\"\n\n✅ You now have two commits on separate branches."
  },
  {
    "objectID": "week7/tutorial/index.html#add-a-change-to-main",
    "href": "week7/tutorial/index.html#add-a-change-to-main",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "3️⃣ Add a Change to main",
    "text": "3️⃣ Add a Change to main\n\nSwitch back to main:\n\ngit switch main\n\nAdd to the file again:\nMain branch additional note\nSave and commit:\n\"Add note on main branch\""
  },
  {
    "objectID": "week7/tutorial/index.html#at-this-point",
    "href": "week7/tutorial/index.html#at-this-point",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📊 At This Point…",
    "text": "📊 At This Point…\nYour Git history looks like this:\n          A---B  (feature)\n         /\n    ---O---C  (main)\n\nO = Original commit\nA = Feature commit\nC = Main branch commit\nB = We’ll merge or rebase next"
  },
  {
    "objectID": "week7/tutorial/index.html#option-a-merge-the-feature-branch",
    "href": "week7/tutorial/index.html#option-a-merge-the-feature-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "4️⃣ Option A: Merge the Feature Branch",
    "text": "4️⃣ Option A: Merge the Feature Branch\ngit merge feature\nYou’ll get a merge commit, like this:\n          A---B  (feature)\n         /     \\\n    ---O---C-----M  (main)\n✅ History shows a clear branching path and merge point."
  },
  {
    "objectID": "week7/tutorial/index.html#option-b-try-it-again-with-rebase",
    "href": "week7/tutorial/index.html#option-b-try-it-again-with-rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "5️⃣ Option B: Try It Again with Rebase",
    "text": "5️⃣ Option B: Try It Again with Rebase\n\nThis will recreate the same setup and use rebase instead of merge.\n\n\nReset the last merge:\n\ngit reset --hard HEAD~1\n\nSwitch to the feature branch:\n\ngit switch feature\n\nRebase it onto main:\n\ngit rebase main\n\nNow go back to main and fast-forward:\n\ngit switch main\ngit merge feature"
  },
  {
    "objectID": "week7/tutorial/index.html#after-rebase",
    "href": "week7/tutorial/index.html#after-rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📊 After Rebase",
    "text": "📊 After Rebase\nYour Git history now looks like:\n    ---O---C---A'  (main, feature)\n\nA' is a new version of A, replayed on top of C\nNo merge commit needed — linear history"
  },
  {
    "objectID": "week7/tutorial/index.html#reflect-1",
    "href": "week7/tutorial/index.html#reflect-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 Reflect",
    "text": "🧠 Reflect\n\nWhat’s the key difference between merge and rebase?\n\nWhich history is easier to read?\n\nWhen is a merge preferred?\n\nWhy must you be careful rebasing pushed commits?"
  },
  {
    "objectID": "week7/tutorial/index.html#summary-1",
    "href": "week7/tutorial/index.html#summary-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✅ Summary",
    "text": "✅ Summary\n\n\n\nAction\nResult\n\n\n\n\ngit merge feature\nPreserves both branches + merge commit\n\n\ngit rebase main (on feature)\nRewrites feature history as linear\n\n\nUse merge after pushing\n✅ Safe for shared work\n\n\nUse rebase before pushing\n✅ Keeps history clean\n\n\n\n🎉 You’ve now seen both strategies in action — use the right one for the right job!"
  },
  {
    "objectID": "week7/tutorial/solution.html",
    "href": "week7/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn how to remove files from Git tracking with git rm, and prevent them from being re-added with a .gitignore file.\n\n\n\n\n\n\n\nCreate a new repository:\ngit-ignore-cleanup\n✅ Check “Add a README file”\n\n\n\n\n\n\nGo to File → New Project → Version Control → Git\nPaste the repo URL (SSH or HTTPS)\nChoose a location and click Create Project\n\n✅ You’re now working in a Git-tracked project.\n\n\n\n\n\n\nCreate a new qmd in RStudio:\n\nGo to File → New File → Quarto Document\n\nSave the file as notes.qmd\nAdd some content like:\nsummary(mtcars)\nStage and commit the file:\n\"Add analysis script\"\n\n\n\n\n\n\nDownload the data from Week 2 on Moodle, and save it into your project as data.csv\nStage and commit:\ngit add data.csv\ngit commit -m \"Add raw data\"\n\n\n\n\n\nRealise you don’t want this in version control, but you still need it for local use.\nIn the terminal:\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data.csv\"\n✅ data.csv is still on your computer, but Git will no longer track it.\n\n\n\n\nTo prevent it from being accidentally added again:\n\nOpen (or create) a .gitignore file in your repo root\nAdd:\ndata.csv\nSave and stage the .gitignore file\nCommit:\n\"Ignore data.csv\"\n\n\n\n\n\n\nRun:\n\ngit status\n✅ You should not see data.csv listed anywhere — Git is now ignoring it.\n\n\n\n\nLet’s now try squashing a few commits into one clean one.\n\n\n\n\nEdit your .qmd file and make 3 separate commits:\n\nAdd a new section or chunk → commit: \"Add section\"\nFix a typo → commit: \"Fix typo\"\nAdd a final comment → commit: \"Add footnote\"\n\n\n✅ Commit after each change using the Git pane or terminal.\n\n\n\n\nRun in the Terminal:\ngit log --oneline\nYou should see something like:\nc3d4e5f Add footnote\nb2c3d4e Fix typo\na1b2c3d Add section\n...\n\n\n\n\ngit rebase -i HEAD~3\nYou’ll see:\npick a1b2c3d Add section\npick b2c3d4e Fix typo\npick c3d4e5f Add footnote\n\n\n\n\nChange it to:\npick a1b2c3d Add section\nsquash b2c3d4e\nsquash c3d4e5f\nSave and write a new combined commit message like:\nAdd section with typo fix and footnote\nSave again to finish the rebase.\n\n\n\n\nRun:\ngit log --oneline\n✅ You should now see one clean commit where there were three.\n\n\n\n\n\n\nWhy is --amend useful when working on a single file?\nWhen is it good practice to squash commits?\nWhat would happen if you did this after pushing?\n\n\n\n\n\n\n\n\nAction\nCommand\n\n\n\n\nFix your last commit\ngit commit --amend\n\n\nCombine multiple commits\ngit rebase -i HEAD~N\n\n\nKeep your history clean\nUse these before pushing\n\n\n\n🎉 You’ve just learned to write cleaner, more professional commit histories!"
  },
  {
    "objectID": "week7/tutorial/solution.html#goal",
    "href": "week7/tutorial/solution.html#goal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn how to remove files from Git tracking with git rm, and prevent them from being re-added with a .gitignore file."
  },
  {
    "objectID": "week7/tutorial/solution.html#create-and-clone-a-repo",
    "href": "week7/tutorial/solution.html#create-and-clone-a-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create a new repository:\ngit-ignore-cleanup\n✅ Check “Add a README file”\n\n\n\n\n\n\nGo to File → New Project → Version Control → Git\nPaste the repo URL (SSH or HTTPS)\nChoose a location and click Create Project\n\n✅ You’re now working in a Git-tracked project."
  },
  {
    "objectID": "week7/tutorial/solution.html#add-and-commit-a-file",
    "href": "week7/tutorial/solution.html#add-and-commit-a-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create a new qmd in RStudio:\n\nGo to File → New File → Quarto Document\n\nSave the file as notes.qmd\nAdd some content like:\nsummary(mtcars)\nStage and commit the file:\n\"Add analysis script\""
  },
  {
    "objectID": "week7/tutorial/solution.html#accidentally-add-a-data-file",
    "href": "week7/tutorial/solution.html#accidentally-add-a-data-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Download the data from Week 2 on Moodle, and save it into your project as data.csv\nStage and commit:\ngit add data.csv\ngit commit -m \"Add raw data\""
  },
  {
    "objectID": "week7/tutorial/solution.html#remove-the-file-from-git-but-keep-it-locally",
    "href": "week7/tutorial/solution.html#remove-the-file-from-git-but-keep-it-locally",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Realise you don’t want this in version control, but you still need it for local use.\nIn the terminal:\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data.csv\"\n✅ data.csv is still on your computer, but Git will no longer track it."
  },
  {
    "objectID": "week7/tutorial/solution.html#add-it-to-.gitignore",
    "href": "week7/tutorial/solution.html#add-it-to-.gitignore",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "To prevent it from being accidentally added again:\n\nOpen (or create) a .gitignore file in your repo root\nAdd:\ndata.csv\nSave and stage the .gitignore file\nCommit:\n\"Ignore data.csv\""
  },
  {
    "objectID": "week7/tutorial/solution.html#check-it-worked",
    "href": "week7/tutorial/solution.html#check-it-worked",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Run:\n\ngit status\n✅ You should not see data.csv listed anywhere — Git is now ignoring it."
  },
  {
    "objectID": "week7/tutorial/solution.html#squash-commits-with-interactive-rebase",
    "href": "week7/tutorial/solution.html#squash-commits-with-interactive-rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Let’s now try squashing a few commits into one clean one.\n\n\n\n\nEdit your .qmd file and make 3 separate commits:\n\nAdd a new section or chunk → commit: \"Add section\"\nFix a typo → commit: \"Fix typo\"\nAdd a final comment → commit: \"Add footnote\"\n\n\n✅ Commit after each change using the Git pane or terminal.\n\n\n\n\nRun in the Terminal:\ngit log --oneline\nYou should see something like:\nc3d4e5f Add footnote\nb2c3d4e Fix typo\na1b2c3d Add section\n...\n\n\n\n\ngit rebase -i HEAD~3\nYou’ll see:\npick a1b2c3d Add section\npick b2c3d4e Fix typo\npick c3d4e5f Add footnote\n\n\n\n\nChange it to:\npick a1b2c3d Add section\nsquash b2c3d4e\nsquash c3d4e5f\nSave and write a new combined commit message like:\nAdd section with typo fix and footnote\nSave again to finish the rebase.\n\n\n\n\nRun:\ngit log --oneline\n✅ You should now see one clean commit where there were three."
  },
  {
    "objectID": "week7/tutorial/solution.html#reflect",
    "href": "week7/tutorial/solution.html#reflect",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Why is --amend useful when working on a single file?\nWhen is it good practice to squash commits?\nWhat would happen if you did this after pushing?"
  },
  {
    "objectID": "week7/tutorial/solution.html#summary",
    "href": "week7/tutorial/solution.html#summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Action\nCommand\n\n\n\n\nFix your last commit\ngit commit --amend\n\n\nCombine multiple commits\ngit rebase -i HEAD~N\n\n\nKeep your history clean\nUse these before pushing\n\n\n\n🎉 You’ve just learned to write cleaner, more professional commit histories!"
  },
  {
    "objectID": "week7/tutorial/solution.html#goal-1",
    "href": "week7/tutorial/solution.html#goal-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧭 Goal",
    "text": "🧭 Goal\nUnderstand the difference between git merge and git rebase by applying both to the same branches and comparing the result."
  },
  {
    "objectID": "week7/tutorial/solution.html#setup-create-a-feature-branch",
    "href": "week7/tutorial/solution.html#setup-create-a-feature-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "1️⃣ Setup: Create a Feature Branch",
    "text": "1️⃣ Setup: Create a Feature Branch\nIn your GitHub-connected RStudio project:\n\nCreate a file: experiment.R\nAdd one line:\nMain branch version\nSave, stage, and commit:\n\"Add base file on main\"\nCreate a new branch called feature:\n\ngit switch -c feature"
  },
  {
    "objectID": "week7/tutorial/solution.html#add-work-on-the-feature-branch",
    "href": "week7/tutorial/solution.html#add-work-on-the-feature-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "2️⃣ Add Work on the Feature Branch",
    "text": "2️⃣ Add Work on the Feature Branch\n\nEdit experiment.R again:\nFeature branch addition\nSave and commit:\n\"Add feature content\"\n\n✅ You now have two commits on separate branches."
  },
  {
    "objectID": "week7/tutorial/solution.html#add-a-change-to-main",
    "href": "week7/tutorial/solution.html#add-a-change-to-main",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "3️⃣ Add a Change to main",
    "text": "3️⃣ Add a Change to main\n\nSwitch back to main:\n\ngit switch main\n\nAdd to the file again:\nMain branch additional note\nSave and commit:\n\"Add note on main branch\""
  },
  {
    "objectID": "week7/tutorial/solution.html#at-this-point",
    "href": "week7/tutorial/solution.html#at-this-point",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📊 At This Point…",
    "text": "📊 At This Point…\nYour Git history looks like this:\n          A---B  (feature)\n         /\n    ---O---C  (main)\n\nO = Original commit\nA = Feature commit\nC = Main branch commit\nB = We’ll merge or rebase next"
  },
  {
    "objectID": "week7/tutorial/solution.html#option-a-merge-the-feature-branch",
    "href": "week7/tutorial/solution.html#option-a-merge-the-feature-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "4️⃣ Option A: Merge the Feature Branch",
    "text": "4️⃣ Option A: Merge the Feature Branch\ngit merge feature\nYou’ll get a merge commit, like this:\n          A---B  (feature)\n         /     \\\n    ---O---C-----M  (main)\n✅ History shows a clear branching path and merge point."
  },
  {
    "objectID": "week7/tutorial/solution.html#option-b-try-it-again-with-rebase",
    "href": "week7/tutorial/solution.html#option-b-try-it-again-with-rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "5️⃣ Option B: Try It Again with Rebase",
    "text": "5️⃣ Option B: Try It Again with Rebase\n\nThis will recreate the same setup and use rebase instead of merge.\n\n\nReset the last merge:\n\ngit reset --hard HEAD~1\n\nSwitch to the feature branch:\n\ngit switch feature\n\nRebase it onto main:\n\ngit rebase main\n\nNow go back to main and fast-forward:\n\ngit switch main\ngit merge feature"
  },
  {
    "objectID": "week7/tutorial/solution.html#after-rebase",
    "href": "week7/tutorial/solution.html#after-rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📊 After Rebase",
    "text": "📊 After Rebase\nYour Git history now looks like:\n    ---O---C---A'  (main, feature)\n\nA' is a new version of A, replayed on top of C\nNo merge commit needed — linear history"
  },
  {
    "objectID": "week7/tutorial/solution.html#reflect-1",
    "href": "week7/tutorial/solution.html#reflect-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 Reflect",
    "text": "🧠 Reflect\n\nWhat’s the key difference between merge and rebase?\n\nWhich history is easier to read?\n\nWhen is a merge preferred?\n\nWhy must you be careful rebasing pushed commits?"
  },
  {
    "objectID": "week7/tutorial/solution.html#summary-1",
    "href": "week7/tutorial/solution.html#summary-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✅ Summary",
    "text": "✅ Summary\n\n\n\nAction\nResult\n\n\n\n\ngit merge feature\nPreserves both branches + merge commit\n\n\ngit rebase main (on feature)\nRewrites feature history as linear\n\n\nUse merge after pushing\n✅ Safe for shared work\n\n\nUse rebase before pushing\n✅ Keeps history clean\n\n\n\n🎉 You’ve now seen both strategies in action — use the right one for the right job!"
  },
  {
    "objectID": "week7/index.html#etc5513-title",
    "href": "week7/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nUndoing, exporing and cleaning with git\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 7\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week7/index.html#open-frame",
    "href": "week7/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week7/index.html#fixing-your-commit-messages",
    "href": "week7/index.html#fixing-your-commit-messages",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Fixing your commit messages",
    "text": "Fixing your commit messages\nLast week most of us got stuck in Vi mode\nTo fix this, run the following:\nWindows\ngit config --global core.editor notepad\nMacOS\ngit config --global core.editor \"open -e -W -n\"\nThis will set either notepad or TextEdit to be your commit editor (much nicer).\nOn Mac, note you must quit (not just close the window) for the commit message to be complete."
  },
  {
    "objectID": "week7/index.html#todays-goals",
    "href": "week7/index.html#todays-goals",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 Today’s Goals",
    "text": "🧠 Today’s Goals\n\nLearn how to safely undo and explore commits\nUnderstand how to recover lost work\nGet more comfortable with the Git timeline and history\nClean up messy projects"
  },
  {
    "objectID": "week7/index.html#git-mental-model",
    "href": "week7/index.html#git-mental-model",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 Git Mental Model",
    "text": "🧠 Git Mental Model\nGit works across three layers:\n\nWorking Directory: your actual files\nIndex (Staging Area): what will be in your next commit\nHEAD (Repository): your last committed snapshot\n\nSome examples: - git add moves changes → index - git commit moves index → HEAD - git reset moves HEAD pointer (soft/mixed/hard)"
  },
  {
    "objectID": "week7/index.html#reverting-and-resetting-recap",
    "href": "week7/index.html#reverting-and-resetting-recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🔁 Reverting and Resetting – Recap",
    "text": "🔁 Reverting and Resetting – Recap\ngit revert\n\nCreates a new commit that undoes a previous one\nSafe on shared branches (e.g. main)\n\ngit revert &lt;commit-hash&gt;"
  },
  {
    "objectID": "week7/index.html#detached-head",
    "href": "week7/index.html#detached-head",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧵 Detached HEAD",
    "text": "🧵 Detached HEAD\n\nHappens when you check out a specific commit, not a branch\nUseful for exploring history\nIf you make changes in this state, they can be lost unless you make a branch"
  },
  {
    "objectID": "week7/index.html#demo-detached-head-branch",
    "href": "week7/index.html#demo-detached-head-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧪 Demo: Detached HEAD + Branch",
    "text": "🧪 Demo: Detached HEAD + Branch\n\nIn the terminal or Git pane:\n\ngit log --oneline\n\nCopy a commit hash from earlier and run:\n\ngit checkout &lt;commit-hash&gt;\nYou’re now in detached HEAD!"
  },
  {
    "objectID": "week7/index.html#git-commit---amend",
    "href": "week7/index.html#git-commit---amend",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✍️ git commit --amend",
    "text": "✍️ git commit --amend\nUse this when you:\n\nMade a typo in the last commit message\nForgot to include a file\nWant to slightly edit the last commit"
  },
  {
    "objectID": "week7/index.html#demo-amending-a-commit",
    "href": "week7/index.html#demo-amending-a-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧪 Demo: Amending a Commit",
    "text": "🧪 Demo: Amending a Commit\n\nMake a small commit\n\nRealize you forgot something\n\nStage the missing file, then run:\n\ngit commit --amend\n🎯 You can edit the message or leave it the same\n⚠️ Avoid --amend if you’ve already pushed the commit"
  },
  {
    "objectID": "week7/index.html#git-reflog",
    "href": "week7/index.html#git-reflog",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🔍 git reflog",
    "text": "🔍 git reflog\n\nShows every move of HEAD (including things Git log forgets)\nUseful to recover commits after a reset or checkout\n\ngit reflog"
  },
  {
    "objectID": "week7/index.html#git-rm-remove-files-from-the-repository",
    "href": "week7/index.html#git-rm-remove-files-from-the-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🗑️ git rm: Remove Files from the Repository",
    "text": "🗑️ git rm: Remove Files from the Repository\n\nUse git rm to delete a tracked file from both your working directory and Git’s index.\nGit will stage the deletion automatically.\n\ngit rm filename.txt\ngit commit -m \"Remove filename.txt\"\n✅ After this commit, the file will no longer exist in your working directory or the repository."
  },
  {
    "objectID": "week7/index.html#why-not-just-delete-the-file",
    "href": "week7/index.html#why-not-just-delete-the-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "❗ Why Not Just Delete the File?",
    "text": "❗ Why Not Just Delete the File?\n\nIf you delete a file in RStudio or your file browser:\n\nGit will show it as “deleted: filename.txt”\nBut you still need to git add the deletion\n\n\n# After deleting manually:\ngit status         # Shows deletion\ngit add filename.txt\ngit commit -m \"Remove file\"\n✅ git rm does both steps at once — it’s safer and cleaner"
  },
  {
    "objectID": "week7/index.html#recovering-a-deleted-file",
    "href": "week7/index.html#recovering-a-deleted-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💡 Recovering a Deleted File",
    "text": "💡 Recovering a Deleted File\nIf you haven’t committed the deletion yet:\ngit restore filename.txt\nIf you already committed the deletion:\ngit checkout HEAD~1 -- filename.txt\n✅ Or use git reflog to find the commit where the file still existed"
  },
  {
    "objectID": "week7/index.html#git-rm---cached-keep-the-file-remove-it-from-git",
    "href": "week7/index.html#git-rm---cached-keep-the-file-remove-it-from-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧾 git rm --cached: Keep the File, Remove It from Git",
    "text": "🧾 git rm --cached: Keep the File, Remove It from Git\n\nUse this when you’ve added a file to Git by mistake, but you don’t want to delete it from your computer\nGit stops tracking it — but the file stays in your working directory\n\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data.csv\"\n✅ The file will still be on disk, but not in the next commit"
  },
  {
    "objectID": "week7/index.html#common-use-case",
    "href": "week7/index.html#common-use-case",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 Common Use Case",
    "text": "🧠 Common Use Case\n\nYou committed a large data file by accident\n\n\nAdd the filename to .gitignore\nRun:\n\ngit rm --cached data.csv\ngit commit -m \"Remove data.csv from tracking\"\n\nPush your changes\n\nThe file is now ignored and won’t be re-added\n\n✅ Useful for cleaning up mistakes without losing the file"
  },
  {
    "objectID": "week7/index.html#git-clean",
    "href": "week7/index.html#git-clean",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧹 git clean",
    "text": "🧹 git clean\n\nDeletes untracked files (not in Git yet)\nHelpful when switching branches or cleaning clutter\n\ngit clean -n   # dry run\ngit clean -f   # permanently delete"
  },
  {
    "objectID": "week7/index.html#warning",
    "href": "week7/index.html#warning",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "⚠️ Warning",
    "text": "⚠️ Warning\n\ngit clean is permanent\nYou can’t undo it with reflog or reset\nAlways use -n first to preview"
  },
  {
    "objectID": "week7/index.html#activity-cleaning-up",
    "href": "week7/index.html#activity-cleaning-up",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧪 Activity: Cleaning Up",
    "text": "🧪 Activity: Cleaning Up\n\nIn RStudio, create a few new files but don’t add them to Git\nRun:\n\ngit status\ngit clean -n\n\nIf it looks right:\n\ngit clean -f\n✅ Now those untracked files are gone!"
  },
  {
    "objectID": "week7/index.html#when-to-use-what",
    "href": "week7/index.html#when-to-use-what",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 When to Use What",
    "text": "🧠 When to Use What\n\n\n\nSituation\nUse This\n\n\n\n\nUndo safely on shared branches\ngit revert\n\n\nClean up your last commit\ngit commit --amend\n\n\nRewind local commit history\ngit reset\n\n\nAccidentally reset or lost work\ngit reflog\n\n\nDelete untracked junk\ngit clean"
  },
  {
    "objectID": "week7/index.html#questions",
    "href": "week7/index.html#questions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Questions?",
    "text": "Questions?\n\nWhen would you not use reset?\nWhat does reflog help you find that log doesn’t?\nHave you ever thought you lost work but actually didn’t?"
  },
  {
    "objectID": "week7/index.html#what-is-squashing",
    "href": "week7/index.html#what-is-squashing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🍥 What Is Squashing?",
    "text": "🍥 What Is Squashing?\nSquashing means combining multiple commits into a single one.\nIt’s useful for:\n\nCleaning up messy history\nPreparing code before pushing or merging\nGrouping small fixes into one meaningful commit\n\n\nSquashing doesn’t change your code — just your history!"
  },
  {
    "objectID": "week7/index.html#how-squash-works",
    "href": "week7/index.html#how-squash-works",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 How Squash Works",
    "text": "🧠 How Squash Works\nBefore squashing:\nA -- B -- C -- D  (main)\n         ↑\n       Fix typo\nIf B, C, and D are all part of one logical change, we can squash:\nA -- [B+C+D]  (main)\n✅ One clean commit — easier to read, review, and share."
  },
  {
    "objectID": "week7/index.html#how-to-squash-commits",
    "href": "week7/index.html#how-to-squash-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🛠️ How to Squash Commits",
    "text": "🛠️ How to Squash Commits\nUse interactive rebase to squash:\ngit rebase -i HEAD~3\nYou’ll see:\npick abc123 Add feature\npick def456 Fix typo\npick ghi789 Update docs\nChange to:\npick abc123 Add feature\nsquash def456\nsquash ghi789\nThen save + edit the commit message."
  },
  {
    "objectID": "week7/index.html#when-and-when-not-to-squash",
    "href": "week7/index.html#when-and-when-not-to-squash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "⚠️ When (and When Not) to Squash",
    "text": "⚠️ When (and When Not) to Squash\n✅ Good times to squash:\n\nBefore pushing a feature branch\nTo combine tiny commits (“fix typo”, “rename var”, “oops”)\n\n❌ Avoid squashing:\n\nAfter you’ve pushed to a shared branch (rewrites history!)"
  },
  {
    "objectID": "week7/index.html#latex-template-1",
    "href": "week7/index.html#latex-template-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "LaTeX template",
    "text": "LaTeX template\n\n\\begin{document}\n% Packages to be used\n1\\usepackage{amsmath}\n\n2% Creating title\n\\title{This is an example}\n\\author{ETC5513, Monash University}\n\n1\n\nList all the packages\n\n2\n\n% = comments"
  },
  {
    "objectID": "week7/index.html#latex-template-2",
    "href": "week7/index.html#latex-template-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "LaTeX template",
    "text": "LaTeX template\n\n1\\begin{document}\n\\maketitle\n\n2\\section{Introduction}\n\n% Introduction content\n\n3\\end{document}\n\n1\n\nOpen the document\n\n2\n\nSections each get a ‘section’ header\n\n3\n\nClose the document at the end."
  },
  {
    "objectID": "week7/index.html#we-are-going-to-use-latex-via-quarto-files",
    "href": "week7/index.html#we-are-going-to-use-latex-via-quarto-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "We are going to use LaTeX via Quarto files",
    "text": "We are going to use LaTeX via Quarto files\nIn order to be able to use LaTeX within our Quarto documents, we need to install tinytex:\nquarto install tinytex\nor\nquarto install tinytex --update-path\nYou don’t need the full LaTex installation for this unit, just this package.\n\n\nMore info about tinytex here"
  },
  {
    "objectID": "week7/index.html#integrate-a-latex-template-into-a-quarto-file",
    "href": "week7/index.html#integrate-a-latex-template-into-a-quarto-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Integrate a LaTeX template into a quarto file",
    "text": "Integrate a LaTeX template into a quarto file\nThere are different ways:\n\nIf the file features are not too complicated. We can simply add some of the necessary LaTeX packages into our YAML preamble. You will be working with this example in the tutorial:\n\ntitle: \"Reproducible and Collaborative Practices\"\nsubtitle: \"Tutorial 7\"\nauthor: \"Your Name\"\ninstitute: \"Department of Econometrics and Business Statistics\"\noutput: \n pdf:\n   toc: true\n   toc_depth: 2\n   number_sections: true\n   highlight: tango\nheader-includes: \n  - \\usepackage{titling}\n  - \\pretitle{\\begin{center} \\includegraphics[width=5in,height=13in]{figs/front.jpg}\\LARGE\\\\}\n  - \\posttitle{\\end{center}}\n  - \\usepackage{fontawesome}\n  - \\usepackage[most]{tcolorbox}\n  - \\usepackage{xcolor}\n  - \\usepackage{sectsty}\n  - \\sectionfont{\\color{olive}}\n  - \\usepackage{verbatim}"
  },
  {
    "objectID": "week7/index.html#integrate-a-latex-template-into-a-quarto-file-1",
    "href": "week7/index.html#integrate-a-latex-template-into-a-quarto-file-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Integrate a LaTeX template into a quarto file",
    "text": "Integrate a LaTeX template into a quarto file\nThere are different ways:\n\nAnother possibility is to use a preamble.tex\nAnd incorporate that into our Quarto file (we will look into this in Week 8):"
  },
  {
    "objectID": "week7/index.html#reference",
    "href": "week7/index.html#reference",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reference",
    "text": "Reference\nLaTeX in 24 Hours A Practical Guide for Scientific Writing"
  },
  {
    "objectID": "week7/index.html#quarto-pdf-themes",
    "href": "week7/index.html#quarto-pdf-themes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto PDF themes",
    "text": "Quarto PDF themes\nAnother way to include styling is to use a Quarto PDF extension. For example:\n\nQuarto Monash\nQuarto Letter\nFancy Header\n\n…and more here"
  },
  {
    "objectID": "week7/index.html#quarto-pdf-themes-1",
    "href": "week7/index.html#quarto-pdf-themes-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto PDF themes",
    "text": "Quarto PDF themes\nThese themes have the advantage of having done a lot of the LateX formatting for you. Looking inside the Quarto Monash memo, we have:\n\\pretitle{%\n$if(branding)$%\n\\begin{textblock}{4}(1.9,0.85)\\includegraphics[height=1.5cm]{monash2}\\end{textblock}%\n\\begin{textblock}{4}(17.25,0.8)\\includegraphics[height=1.5cm]{MBSPortrait}\\end{textblock}%\n\\begin{textblock}{6}(13,28)\\includegraphics[height=0.7cm]{AACSB}~~~\n        \\includegraphics[height=0.7cm]{EQUIS}~~~\n        \\includegraphics[height=0.7cm]{AMBA}\n\\end{textblock}\nWhich is doing a lot of positioning of pictures for the template."
  },
  {
    "objectID": "week7/index.html#week-6-lesson",
    "href": "week7/index.html#week-6-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 6 Lesson",
    "text": "Week 6 Lesson\n\n\n\n\n\n\nRecap\n\n\n\nUndoing mistakes with amend, revert, and rm\nCleaning repos\nAn introduction to latex"
  },
  {
    "objectID": "week6/tutorial/index.html",
    "href": "week6/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this workshop, you’ll practice collaborative editing using branches, rebasing, and pull requests in a Quarto project.\nYou’ll simulate a real-world collaboration scenario: - One student makes changes to the main branch - Another student works on a feature branch - Before contributing, the second student rebases to keep history clean\n\n\n\nAssign roles:\n\nStudent A = Repository owner\n\nStudent B = Contributor\n\nYou’ll swap roles after completing the exercise.\n\n\n\n\n\nCreate a new GitHub repo named something like quarto-rebase-demo\n\n✅ Add a README file\n\nClone it locally:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a Quarto file called collab.qmd:\n\n---\ntitle: \"Rebase Demo\"\nformat: html\n---\n\n# Introduction\n\nThis is a collaborative Quarto project.\n\n# Contributions\n\n&lt;!-- Student sections will go here --&gt;\n\nCommit and push:\n\ngit add collab.qmd\ngit commit -m \"Add initial Quarto file\"\ngit push origin main\n\nShare the GitHub link with Student B.\n\n✅ Student B can now fork the project.\n\n\n\n\n\nFork Student A’s repository on GitHub\n\nClone your fork:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a new branch for your work:\n\ngit branch my-section\ngit switch my-section\n\nOpen collab.qmd and add your section under “# Contributions”:\n\n# Jamie’s Section\n\nThis is my contribution to the Quarto project.\n\nSave the file, then stage and commit:\n\ngit add collab.qmd\ngit commit -m \"Add Jamie’s section\"\n✅ Don’t push yet — Student A will now make another change.\n\n\n\n\nWhile Student B is working, Student A adds a new section to collab.qmd:\n# Instructor's Section\n\nThis section was added after Student B began work.\n\nSave the file, then commit and push:\n\ngit add collab.qmd\ngit commit -m \"Add instructor’s section\"\ngit push origin main\n✅ Now Student B’s branch is behind main.\n\n\n\n\n\nCheck your remotes:\n\ngit remote -v\nYou should only see one remote called origin\n\nAdd Student A’s repo as a remote:\n\ngit remote add upstream git@github.com:student-a-username/quarto-rebase-demo.git\ngit fetch upstream\n\nCheck your remotes and branches again:\n\ngit remote -v\ngit branch -v\n\nRebase your branch:\n\ngit merge upstream/main\n\nIf there are any conflicts, Git will pause and show them in collab.qmd. Edit the file and resolve them manually. It might look like this:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# Jamie’s Section\nThis is my contribution to the Quarto project.\n=======\n# Instructor's Section\nThis section was added after Student B began work.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; upstream/main\n\nAfter fixing the file, run:\n\ngit add collab.qmd\ngit commit -m \"Merge conflict in upstream\"\n\nOnce merging is complete, push your changes to your fork:\n\ngit push origin main\n\n\n\n\n\nGo to your fork on GitHub\n\nClick “Compare & pull request”\n\nMake sure your PR is from main → main (on Student A’s repo)\n\nClick Create pull request\n\n✅ Your caught-up contribution is now ready for review!\n\n\n\n\n\nOpen the pull request\n\nCheck the changes\n\nClick Merge pull request → Confirm merge\n\n🎉 Now the main branch has clean history and includes both contributions!\n\n\n\n\nYou now know how to:\n\nFork and clone a GitHub repository\nWork on a feature branch\nMerge changes onto the latest main\nSubmit a clean pull request\n\n✨ You’ve just used a professional Git workflow!"
  },
  {
    "objectID": "week6/tutorial/index.html#step-1-pair-up",
    "href": "week6/tutorial/index.html#step-1-pair-up",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Assign roles:\n\nStudent A = Repository owner\n\nStudent B = Contributor\n\nYou’ll swap roles after completing the exercise."
  },
  {
    "objectID": "week6/tutorial/index.html#step-2-student-a-set-up-the-repository",
    "href": "week6/tutorial/index.html#step-2-student-a-set-up-the-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create a new GitHub repo named something like quarto-rebase-demo\n\n✅ Add a README file\n\nClone it locally:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a Quarto file called collab.qmd:\n\n---\ntitle: \"Rebase Demo\"\nformat: html\n---\n\n# Introduction\n\nThis is a collaborative Quarto project.\n\n# Contributions\n\n&lt;!-- Student sections will go here --&gt;\n\nCommit and push:\n\ngit add collab.qmd\ngit commit -m \"Add initial Quarto file\"\ngit push origin main\n\nShare the GitHub link with Student B.\n\n✅ Student B can now fork the project."
  },
  {
    "objectID": "week6/tutorial/index.html#step-3-student-b-fork-branch-and-contribute",
    "href": "week6/tutorial/index.html#step-3-student-b-fork-branch-and-contribute",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Fork Student A’s repository on GitHub\n\nClone your fork:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a new branch for your work:\n\ngit branch my-section\ngit switch my-section\n\nOpen collab.qmd and add your section under “# Contributions”:\n\n# Jamie’s Section\n\nThis is my contribution to the Quarto project.\n\nSave the file, then stage and commit:\n\ngit add collab.qmd\ngit commit -m \"Add Jamie’s section\"\n✅ Don’t push yet — Student A will now make another change."
  },
  {
    "objectID": "week6/tutorial/index.html#step-4-student-a-make-another-commit-on-main",
    "href": "week6/tutorial/index.html#step-4-student-a-make-another-commit-on-main",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "While Student B is working, Student A adds a new section to collab.qmd:\n# Instructor's Section\n\nThis section was added after Student B began work.\n\nSave the file, then commit and push:\n\ngit add collab.qmd\ngit commit -m \"Add instructor’s section\"\ngit push origin main\n✅ Now Student B’s branch is behind main."
  },
  {
    "objectID": "week6/tutorial/index.html#step-5-student-b-merge-in-latest-main",
    "href": "week6/tutorial/index.html#step-5-student-b-merge-in-latest-main",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Check your remotes:\n\ngit remote -v\nYou should only see one remote called origin\n\nAdd Student A’s repo as a remote:\n\ngit remote add upstream git@github.com:student-a-username/quarto-rebase-demo.git\ngit fetch upstream\n\nCheck your remotes and branches again:\n\ngit remote -v\ngit branch -v\n\nRebase your branch:\n\ngit merge upstream/main\n\nIf there are any conflicts, Git will pause and show them in collab.qmd. Edit the file and resolve them manually. It might look like this:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# Jamie’s Section\nThis is my contribution to the Quarto project.\n=======\n# Instructor's Section\nThis section was added after Student B began work.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; upstream/main\n\nAfter fixing the file, run:\n\ngit add collab.qmd\ngit commit -m \"Merge conflict in upstream\"\n\nOnce merging is complete, push your changes to your fork:\n\ngit push origin main"
  },
  {
    "objectID": "week6/tutorial/index.html#step-6-create-a-pull-request",
    "href": "week6/tutorial/index.html#step-6-create-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to your fork on GitHub\n\nClick “Compare & pull request”\n\nMake sure your PR is from main → main (on Student A’s repo)\n\nClick Create pull request\n\n✅ Your caught-up contribution is now ready for review!"
  },
  {
    "objectID": "week6/tutorial/index.html#step-7-student-a-review-and-merge",
    "href": "week6/tutorial/index.html#step-7-student-a-review-and-merge",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Open the pull request\n\nCheck the changes\n\nClick Merge pull request → Confirm merge\n\n🎉 Now the main branch has clean history and includes both contributions!"
  },
  {
    "objectID": "week6/tutorial/index.html#summary",
    "href": "week6/tutorial/index.html#summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "You now know how to:\n\nFork and clone a GitHub repository\nWork on a feature branch\nMerge changes onto the latest main\nSubmit a clean pull request\n\n✨ You’ve just used a professional Git workflow!"
  },
  {
    "objectID": "week6/tutorial/solution.html",
    "href": "week6/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this workshop, you’ll practice collaborative editing using branches, rebasing, and pull requests in a Quarto project.\nYou’ll simulate a real-world collaboration scenario: - One student makes changes to the main branch - Another student works on a feature branch - Before contributing, the second student rebases to keep history clean\n\n\n\nAssign roles:\n\nStudent A = Repository owner\n\nStudent B = Contributor\n\nYou’ll swap roles after completing the exercise.\n\n\n\n\n\nCreate a new GitHub repo named something like quarto-rebase-demo\n\n✅ Add a README file\n\nClone it locally:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a Quarto file called collab.qmd:\n\n---\ntitle: \"Rebase Demo\"\nformat: html\n---\n\n# Introduction\n\nThis is a collaborative Quarto project.\n\n# Contributions\n\n&lt;!-- Student sections will go here --&gt;\n\nCommit and push:\n\ngit add collab.qmd\ngit commit -m \"Add initial Quarto file\"\ngit push origin main\n\nShare the GitHub link with Student B.\n\n✅ Student B can now fork the project.\n\n\n\n\n\nFork Student A’s repository on GitHub\n\nClone your fork:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a new branch for your work:\n\ngit branch my-section\ngit switch my-section\n\nOpen collab.qmd and add your section under “# Contributions”:\n\n# Jamie’s Section\n\nThis is my contribution to the Quarto project.\n\nSave the file, then stage and commit:\n\ngit add collab.qmd\ngit commit -m \"Add Jamie’s section\"\n✅ Don’t push yet — Student A will now make another change.\n\n\n\n\nWhile Student B is working, Student A adds a new section to collab.qmd:\n# Instructor's Section\n\nThis section was added after Student B began work.\n\nSave the file, then commit and push:\n\ngit add collab.qmd\ngit commit -m \"Add instructor’s section\"\ngit push origin main\n✅ Now Student B’s branch is behind main.\n\n\n\n\n\nCheck your remotes:\n\ngit remote -v\nYou should only see one remote called origin\n\nAdd Student A’s repo as a remote:\n\ngit remote add upstream git@github.com:student-a-username/quarto-rebase-demo.git\ngit fetch upstream\n\nCheck your remotes and branches again:\n\ngit remote -v\ngit branch -v\n\nRebase your branch:\n\ngit merge upstream/main\n\nIf there are any conflicts, Git will pause and show them in collab.qmd. Edit the file and resolve them manually. It might look like this:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# Jamie’s Section\nThis is my contribution to the Quarto project.\n=======\n# Instructor's Section\nThis section was added after Student B began work.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; upstream/main\n\nAfter fixing the file, run:\n\ngit add collab.qmd\ngit commit -m \"Merge conflict in upstream\"\n\nOnce merging is complete, push your changes to your fork:\n\ngit push origin main\n\n\n\n\n\nGo to your fork on GitHub\n\nClick “Compare & pull request”\n\nMake sure your PR is from main → main (on Student A’s repo)\n\nClick Create pull request\n\n✅ Your caught-up contribution is now ready for review!\n\n\n\n\n\nOpen the pull request\n\nCheck the changes\n\nClick Merge pull request → Confirm merge\n\n🎉 Now the main branch has clean history and includes both contributions!\n\n\n\n\nYou now know how to:\n\nFork and clone a GitHub repository\nWork on a feature branch\nMerge changes onto the latest main\nSubmit a clean pull request\n\n✨ You’ve just used a professional Git workflow!"
  },
  {
    "objectID": "week6/tutorial/solution.html#step-1-pair-up",
    "href": "week6/tutorial/solution.html#step-1-pair-up",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Assign roles:\n\nStudent A = Repository owner\n\nStudent B = Contributor\n\nYou’ll swap roles after completing the exercise."
  },
  {
    "objectID": "week6/tutorial/solution.html#step-2-student-a-set-up-the-repository",
    "href": "week6/tutorial/solution.html#step-2-student-a-set-up-the-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create a new GitHub repo named something like quarto-rebase-demo\n\n✅ Add a README file\n\nClone it locally:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a Quarto file called collab.qmd:\n\n---\ntitle: \"Rebase Demo\"\nformat: html\n---\n\n# Introduction\n\nThis is a collaborative Quarto project.\n\n# Contributions\n\n&lt;!-- Student sections will go here --&gt;\n\nCommit and push:\n\ngit add collab.qmd\ngit commit -m \"Add initial Quarto file\"\ngit push origin main\n\nShare the GitHub link with Student B.\n\n✅ Student B can now fork the project."
  },
  {
    "objectID": "week6/tutorial/solution.html#step-3-student-b-fork-branch-and-contribute",
    "href": "week6/tutorial/solution.html#step-3-student-b-fork-branch-and-contribute",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Fork Student A’s repository on GitHub\n\nClone your fork:\n\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n\nCreate a new branch for your work:\n\ngit branch my-section\ngit switch my-section\n\nOpen collab.qmd and add your section under “# Contributions”:\n\n# Jamie’s Section\n\nThis is my contribution to the Quarto project.\n\nSave the file, then stage and commit:\n\ngit add collab.qmd\ngit commit -m \"Add Jamie’s section\"\n✅ Don’t push yet — Student A will now make another change."
  },
  {
    "objectID": "week6/tutorial/solution.html#step-4-student-a-make-another-commit-on-main",
    "href": "week6/tutorial/solution.html#step-4-student-a-make-another-commit-on-main",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "While Student B is working, Student A adds a new section to collab.qmd:\n# Instructor's Section\n\nThis section was added after Student B began work.\n\nSave the file, then commit and push:\n\ngit add collab.qmd\ngit commit -m \"Add instructor’s section\"\ngit push origin main\n✅ Now Student B’s branch is behind main."
  },
  {
    "objectID": "week6/tutorial/solution.html#step-5-student-b-merge-in-latest-main",
    "href": "week6/tutorial/solution.html#step-5-student-b-merge-in-latest-main",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Check your remotes:\n\ngit remote -v\nYou should only see one remote called origin\n\nAdd Student A’s repo as a remote:\n\ngit remote add upstream git@github.com:student-a-username/quarto-rebase-demo.git\ngit fetch upstream\n\nCheck your remotes and branches again:\n\ngit remote -v\ngit branch -v\n\nRebase your branch:\n\ngit merge upstream/main\n\nIf there are any conflicts, Git will pause and show them in collab.qmd. Edit the file and resolve them manually. It might look like this:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# Jamie’s Section\nThis is my contribution to the Quarto project.\n=======\n# Instructor's Section\nThis section was added after Student B began work.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; upstream/main\n\nAfter fixing the file, run:\n\ngit add collab.qmd\ngit commit -m \"Merge conflict in upstream\"\n\nOnce merging is complete, push your changes to your fork:\n\ngit push origin main"
  },
  {
    "objectID": "week6/tutorial/solution.html#step-6-create-a-pull-request",
    "href": "week6/tutorial/solution.html#step-6-create-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to your fork on GitHub\n\nClick “Compare & pull request”\n\nMake sure your PR is from main → main (on Student A’s repo)\n\nClick Create pull request\n\n✅ Your caught-up contribution is now ready for review!"
  },
  {
    "objectID": "week6/tutorial/solution.html#step-7-student-a-review-and-merge",
    "href": "week6/tutorial/solution.html#step-7-student-a-review-and-merge",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Open the pull request\n\nCheck the changes\n\nClick Merge pull request → Confirm merge\n\n🎉 Now the main branch has clean history and includes both contributions!"
  },
  {
    "objectID": "week6/tutorial/solution.html#summary",
    "href": "week6/tutorial/solution.html#summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "You now know how to:\n\nFork and clone a GitHub repository\nWork on a feature branch\nMerge changes onto the latest main\nSubmit a clean pull request\n\n✨ You’ve just used a professional Git workflow!"
  },
  {
    "objectID": "week5/workshop/index.html",
    "href": "week5/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this workshop, you’ll learn:\n\nHow to cross-reference sections, figures, code chunks, and tables in Quarto.\nHow to use a .gitignore file to keep unnecessary files out of your Git repository.\n\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n\n\nQuarto lets you easily refer to other parts of your document, like code, figures, and sections — just like in academic papers.\nLet’s walk through some examples using the palmerpenguins dataset.\n\n\n\nAny heading can be cross-referenced by adding an ID to it:\n## Data Cleaning {#sec-cleaning}\nNow you can refer to it elsewhere like this:\nSee Section @sec-cleaning for details on how the data was prepared.\n\n\n\n\nTo reference a figure, give it a label and caption:\n```{r}\n#| label: fig-bill\n#| fig-cap: \"Bill length vs flipper length\"\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point()\n```\nThen reference it:\nFigure @fig-bill shows the relationship between flipper length and bill length.\n\n\n\nYou can also label tables:\n```{r}\n#| label: tbl-summary\n#| tbl-cap: \"Summary statistics of the penguins dataset\"\nknitr::kable(summary(penguins))\n```\nThen refer to it like this:\nSee Table @tbl-summary for summary statistics of the dataset.\n✅ Try It Yourself:\n\nCreate a section, figure, and code chunk using the penguins data\nGive each one a label\nAdd a sentence that references each one\n\n\n\n\n\nWhen using Git, you often don’t want to track certain files (e.g., temporary files, data, or system files). That’s where .gitignore comes in!\n\n\n\nA .gitignore file tells Git what to ignore — Git will pretend these files don’t exist.\nExample contents of .gitignore:\n.Rproj.user\n*.html\n*.csv\n.DS_Store\nThis would ignore:\n\nRStudio project files\nAll .html and .csv files\nmacOS system files\n\n\n\n\n\n\nIn your project folder, create a file called .gitignore\nAdd the files or patterns you want Git to ignore\nSave the file\nAdd a CSV file to your project folder\nCheck what Git sees:\n\ngit status\n✅ If the ignored files aren’t listed, .gitignore is working.\n\n\n\n\nIf you already added a file to Git before putting it in .gitignore, Git will still track it.\nTo stop tracking it:\ngit rm --cached filename.csv\nThen commit:\ngit commit -m \"Stop tracking filename.csv\"\n\n\n\n\n\n\nUse .gitignore to keep your Git repository clean\nAvoid committing files like datasets, HTML outputs, or IDE settings\nHelps keep collaboration and version control simple\n\n🎉 Great job — your Git repo is now cleaner and more professional!"
  },
  {
    "objectID": "week5/workshop/index.html#part-1-cross-referencing-in-quarto",
    "href": "week5/workshop/index.html#part-1-cross-referencing-in-quarto",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Quarto lets you easily refer to other parts of your document, like code, figures, and sections — just like in academic papers.\nLet’s walk through some examples using the palmerpenguins dataset.\n\n\n\nAny heading can be cross-referenced by adding an ID to it:\n## Data Cleaning {#sec-cleaning}\nNow you can refer to it elsewhere like this:\nSee Section @sec-cleaning for details on how the data was prepared.\n\n\n\n\nTo reference a figure, give it a label and caption:\n```{r}\n#| label: fig-bill\n#| fig-cap: \"Bill length vs flipper length\"\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point()\n```\nThen reference it:\nFigure @fig-bill shows the relationship between flipper length and bill length.\n\n\n\nYou can also label tables:\n```{r}\n#| label: tbl-summary\n#| tbl-cap: \"Summary statistics of the penguins dataset\"\nknitr::kable(summary(penguins))\n```\nThen refer to it like this:\nSee Table @tbl-summary for summary statistics of the dataset.\n✅ Try It Yourself:\n\nCreate a section, figure, and code chunk using the penguins data\nGive each one a label\nAdd a sentence that references each one"
  },
  {
    "objectID": "week5/workshop/index.html#part-2-ignoring-files-with-.gitignore",
    "href": "week5/workshop/index.html#part-2-ignoring-files-with-.gitignore",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "When using Git, you often don’t want to track certain files (e.g., temporary files, data, or system files). That’s where .gitignore comes in!\n\n\n\nA .gitignore file tells Git what to ignore — Git will pretend these files don’t exist.\nExample contents of .gitignore:\n.Rproj.user\n*.html\n*.csv\n.DS_Store\nThis would ignore:\n\nRStudio project files\nAll .html and .csv files\nmacOS system files\n\n\n\n\n\n\nIn your project folder, create a file called .gitignore\nAdd the files or patterns you want Git to ignore\nSave the file\nAdd a CSV file to your project folder\nCheck what Git sees:\n\ngit status\n✅ If the ignored files aren’t listed, .gitignore is working.\n\n\n\n\nIf you already added a file to Git before putting it in .gitignore, Git will still track it.\nTo stop tracking it:\ngit rm --cached filename.csv\nThen commit:\ngit commit -m \"Stop tracking filename.csv\""
  },
  {
    "objectID": "week5/workshop/index.html#summary",
    "href": "week5/workshop/index.html#summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Use .gitignore to keep your Git repository clean\nAvoid committing files like datasets, HTML outputs, or IDE settings\nHelps keep collaboration and version control simple\n\n🎉 Great job — your Git repo is now cleaner and more professional!"
  },
  {
    "objectID": "week5/workshop/index.html#goal",
    "href": "week5/workshop/index.html#goal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🛠️ Goal",
    "text": "🛠️ Goal\nLearn how to: - Save changes using git stash - Switch branches safely - Reapply your stashed work"
  },
  {
    "objectID": "week5/workshop/index.html#step-by-step-instructions",
    "href": "week5/workshop/index.html#step-by-step-instructions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧪 Step-by-Step Instructions",
    "text": "🧪 Step-by-Step Instructions\n\nMake sure you’re inside a Git-tracked project (any project will do).\nOpen a file and make some changes — but don’t commit yet.\nCheck your Git status:\n\ngit status\nYou should see the file listed as modified.\n\n\n📦 1. Stash Your Changes\nRun:\ngit stash\n✅ This saves your changes and returns your working directory to a clean state.\n\n\n\n🔄 2. Switch Branches (or Pull)\nNow try switching to another branch:\ngit checkout main\nOr do a pull:\ngit pull\n✅ Your working directory stays clean — no conflicts!\n\n\n\n♻️ 3. Reapply the Stash\nWhen you’re ready to bring back your changes:\ngit stash apply\n✅ Your edits will be restored to the files you changed.\n\n\n\n🗑️ 4. (Optional) Clear the Stash\nAfter applying, you can remove the stash:\ngit stash drop\nOr, to both apply and drop in one step:\ngit stash pop"
  },
  {
    "objectID": "week5/workshop/index.html#try-it",
    "href": "week5/workshop/index.html#try-it",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✅ Try It",
    "text": "✅ Try It\n\nModify a file\n\nRun git stash\n\nSwitch branches\n\nReturn to your branch and run git stash apply\n\nConfirm your changes are back\n\nCommit if needed!\n\n\n🎉 You’ve learned how to pause your work safely and come back to it later!"
  },
  {
    "objectID": "week5/index.html#etc5513-title",
    "href": "week5/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nDeeper git knowledge, stashing and tools\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 5\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week5/index.html#open-frame",
    "href": "week5/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week5/index.html#recap",
    "href": "week5/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nLearned more on creating reproducible reports:\n\nReferencing\nTalk about css files\n\nMore on Git:\n\nBranches\n\nSolving Git merging conflicts\nInstall VSCode as a GUI to work with Git/GitHub and as a text editor for commits."
  },
  {
    "objectID": "week5/index.html#aim",
    "href": "week5/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nMore Git/GitHub tools\nPull requests: a tool to collaborate with others via GitHub\nVSCode\n\n\n\n\nWith this you have learned the basics to create reproducible and collaborative reports."
  },
  {
    "objectID": "week5/index.html#stashing",
    "href": "week5/index.html#stashing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Stashing",
    "text": "Stashing\n“Stashing takes the”dirty” state of your working directory - that is, your modified tracked files and staged changes - and saves it on a stack of unfinished changes that you can reapply at any time (even on a different branch).” Source\ngit stash comes in handy for staged files or `git stash -u for unstaged files.\ngit stash allow us to keep changes in our local repository and to commit then later on.\ngit stash save \"Message\" allow us to add a message to the stash"
  },
  {
    "objectID": "week5/index.html#git-stash",
    "href": "week5/index.html#git-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash",
    "text": "git stash\nCreating a stash allows you to revert but save changes that you might have done in the repository, without losing them.\nThen, when you are ready to include those changes and to commit them into the remote repo we can use:\n\ngit stash apply makes your changes in the stash on the branch but keeps them in the stash.\ngit stash pop makes your changes in the stash on the branch and removes them from the stash.\n\nGenerally, pop is preferred unless you have to apply your changes more than once."
  },
  {
    "objectID": "week5/index.html#git-stash-in-practice",
    "href": "week5/index.html#git-stash-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash in practice",
    "text": "git stash in practice\n$ git status\nOn branch master\nChanges to be committed:\nnew file: style.css\nChanges not staged for commit:\nmodified: index.html\n$ git stash\nSaved working directory and index state WIP on master: \n5002d47 our new homepage\nHEAD is now at 5002d47 our new homepage"
  },
  {
    "objectID": "week5/index.html#git-status-changes-after-stashing",
    "href": "week5/index.html#git-status-changes-after-stashing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git status changes after stashing",
    "text": "git status changes after stashing\n$ git status\nOn branch master\nnothing to commit, working tree clean"
  },
  {
    "objectID": "week5/index.html#while-your-changes-are-stashed-you-can",
    "href": "week5/index.html#while-your-changes-are-stashed-you-can",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "While your changes are stashed you can …",
    "text": "While your changes are stashed you can …\n\nMake more changes into the repo, create new commits, switch branches and perform any other Git operations.\nYou can come back to your stash later on and re-apply your stash when you’re ready.\nStash is local to your repository.\n\n\n\n\n\n\n\nImportant\n\n\nstashes are not transferred to the server when you push.\n\n\n\nYou can create more than one stash: be careful with this."
  },
  {
    "objectID": "week5/index.html#git-apply-and-git-pop-stage-changes",
    "href": "week5/index.html#git-apply-and-git-pop-stage-changes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git apply and git pop: stage changes",
    "text": "git apply and git pop: stage changes\nThe git stash command takes your uncommitted changes but staged and saves them away for later use, or git stash -u if we have not staged the changes, and then reverts them from your working copy. git stash save “Message to remember what you did”\nTo bring stash in from the repo:\n\ngit stash apply\ngit stash pop"
  },
  {
    "objectID": "week5/index.html#git-stash-apply",
    "href": "week5/index.html#git-stash-apply",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash apply",
    "text": "git stash apply\ngit stash apply will take the changes saved in your stash and apply them into the working directory of your current branch. In addition, the changes are kept in the stash. This might be useful when you want to apply the same changes into different branches."
  },
  {
    "objectID": "week5/index.html#git-stash-pop",
    "href": "week5/index.html#git-stash-pop",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash pop",
    "text": "git stash pop\ngit stash pop will do the same as apply but will delete the stash after applying the changes.\n\n\n\n\n\n\nImportant\n\n\nThe stash is not a replacement for a commit. You can think of stashing as ‘keeping for later’, while a commit is for saving and keeping record."
  },
  {
    "objectID": "week5/index.html#git-stash-pop-in-practice",
    "href": "week5/index.html#git-stash-pop-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash pop in practice",
    "text": "git stash pop in practice\n$ git status\nOn branch master\nnothing to commit, working tree clean\n$ git stash pop\nOn branch master\nChanges to be committed:\nnew file: style.css\nChanges not staged for commit:\nmodified: index.html\nDropped refs/stash@{0} (32b3aa1d185dfe6d57b3c3cc3)"
  },
  {
    "objectID": "week5/index.html#git-stash-apply-in-practice",
    "href": "week5/index.html#git-stash-apply-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash apply in practice",
    "text": "git stash apply in practice\ngit stash apply\nOn branch master\nChanges to be committed:\nnew file: style.css\nChanges not staged for commit:\nmodified: index.html\n\nDo you see the difference between pop and apply?"
  },
  {
    "objectID": "week5/index.html#more-than-one-stash",
    "href": "week5/index.html#more-than-one-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More than one stash",
    "text": "More than one stash\ngit stash list will list all of your stashes\n$ git stash list\nstash@{0}: WIP on dev: 1f6f8bb Commit message A\nstash@{1}: WIP on master: 50cf63b Commit message B\n\ngit stash show stash@{1} will show you the files changed in stash@{1}\nThen you can call git stash apply/pop twice\nOr git stash apply stash@{0}\nOr git stash pop stash@{1}"
  },
  {
    "objectID": "week5/index.html#deleting-stash",
    "href": "week5/index.html#deleting-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Deleting stash",
    "text": "Deleting stash\n\ngit stash drop stash@{0} will delete stash@{0}\ngit stash clear will remove all the stashes in the stash area.\n\n\n\n\n\n\n\nImportant\n\n\nBecause stashes aren’t synchronised, once they’re gone they’re gone. So, clear with caution."
  },
  {
    "objectID": "week5/index.html#creating-a-branch-from-a-stash",
    "href": "week5/index.html#creating-a-branch-from-a-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a branch from a stash",
    "text": "Creating a branch from a stash\nIf you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work. If the apply tries to modify a file that you’ve since modified, you’ll get a merge conflict and will have to try to resolve it.\nIf you want an easier way to test the stashed changes again, you can run git stash branch branchname, which creates a new branch for you with your selected branch name, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully."
  },
  {
    "objectID": "week5/index.html#tracked-untracked-and-ignored-files",
    "href": "week5/index.html#tracked-untracked-and-ignored-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tracked, untracked and ignored files",
    "text": "Tracked, untracked and ignored files\nGit sees every file in your working copy as one of three things:\n\ntracked: a file which has been previously staged or committed\nuntracked: a file which has not been staged or committed or\nignored: a file which Git has been explicitly told to ignore.\n\nTypically in a project there might be files that we decided to not track and ignore.\nExamples include files that are built artifacts and machine generated files that can be derived from your repository source or should otherwise not be committed."
  },
  {
    "objectID": "week5/index.html#in-rstudio",
    "href": "week5/index.html#in-rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "In Rstudio",
    "text": "In Rstudio\n\nBlue-M: a file that is already under version control that has been modified.\nOrange-?: a file that is not under version control (yet…).\nGreen-A: a file that was not under version control, but which has been staged to be committed\nRed-D: a file under version control has been deleted. To make it really disappear, you have to staged its disappearance and commit.\nPurple-R: a file that was renamed. (Note that git in Rstudio seems to be figuring this out on its own.)"
  },
  {
    "objectID": "week5/index.html#gitignore",
    "href": "week5/index.html#gitignore",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": ".gitignore",
    "text": ".gitignore\nIgnored files are tracked in a special file named .gitignore that is checked in at the root of your repository.\n\nThere is no explicit git ignore command: instead Git uses a .gitignore file which must be edited and committed by hand when you have new files that you wish to ignore.\n.gitignore files contain special patterns which are comapred against filenames to determine whether or not they should be ignored."
  },
  {
    "objectID": "week5/index.html#example-of-gitignore-patterns",
    "href": "week5/index.html#example-of-gitignore-patterns",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of gitignore patterns",
    "text": "Example of gitignore patterns\n\nSource here"
  },
  {
    "objectID": "week5/index.html#gitignore-file",
    "href": "week5/index.html#gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": ".gitignore file",
    "text": ".gitignore file\n\nYou can use the characters as those in the table\nYou can also add comments inside your file using #\n\n# ignore all logs\n*.log\n# History files\n.Rhistory\n.Rapp.history\n# Session Data files\n.RData\n# User-specific files\n.Ruserdata\n# Example code in package build process\n*-Ex.R"
  },
  {
    "objectID": "week5/index.html#example-of-a-gitignore-file",
    "href": "week5/index.html#example-of-a-gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of a gitignore file",
    "text": "Example of a gitignore file\n\nSource here"
  },
  {
    "objectID": "week5/index.html#creating-a-gitignore-file",
    "href": "week5/index.html#creating-a-gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a gitignore file",
    "text": "Creating a gitignore file\n\n\nFrom the command line you can create a .gitignore file for your repository.\ntouch .gitignore\nYou can edit the file using Rstudio or VSCode.\nYou can also create a .gitignore file from GitHub.\n\nYou can edit it later using RStudio or VSCode."
  },
  {
    "objectID": "week5/index.html#creating-a-.gitignore-file",
    "href": "week5/index.html#creating-a-.gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a .gitignore file",
    "text": "Creating a .gitignore file\nIf you want to ignore a file that is already checked in, you have to untrack it before you add it to the .gitignore.\nDo to this, from your terminal/Git Bash Shell:\n$ git rm --cached FILENAME\nThe gitignore file specifies intentionally untracked files to ignore.\nEach line in a gitignore file specifies a pattern."
  },
  {
    "objectID": "week5/index.html#example-of-a-gitignore-file-1",
    "href": "week5/index.html#example-of-a-gitignore-file-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of a gitignore file",
    "text": "Example of a gitignore file\n\nSource here"
  },
  {
    "objectID": "week5/index.html#your-branch-is-ahead-of-originmaster-by-1-commits",
    "href": "week5/index.html#your-branch-is-ahead-of-originmaster-by-1-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Your branch is ahead of ‘origin/master’ by 1 commits",
    "text": "Your branch is ahead of ‘origin/master’ by 1 commits\n\nThis message means that your local repository has one commit that hasn’t been pushed yet.\nIf you push without committing, nothing gets pushed.\nIf you commit without adding, nothing gets committed.\nIf you add without committing, nothing at all happens, git merely remembers that the changes you added should be considered for the following commit.\n\n\n\n\n\n\n\nTip\n\n\ngit add and git commit are local operations.\ngit push, git pull, and git fetch are operations that interact with a remote repository."
  },
  {
    "objectID": "week5/index.html#why-do-we-fork-a-repository",
    "href": "week5/index.html#why-do-we-fork-a-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Why do we fork a repository?",
    "text": "Why do we fork a repository?\nA fork is a copy of a repository.\n\nForking a repository allows you to freely experiment with changes without affecting the original project.\nMost commonly, forks are used to either propose changes to someone else project or to use someone else project as a starting point for your own project.0\n\nMore info here"
  },
  {
    "objectID": "week5/index.html#forking-a-repo-in-github",
    "href": "week5/index.html#forking-a-repo-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Forking a repo in GitHub",
    "text": "Forking a repo in GitHub\nSearch/navigate repo from within our Github account."
  },
  {
    "objectID": "week5/index.html#forked-repo",
    "href": "week5/index.html#forked-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Forked repo",
    "text": "Forked repo"
  },
  {
    "objectID": "week5/index.html#our-repos-in-github",
    "href": "week5/index.html#our-repos-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Our repos in GitHub",
    "text": "Our repos in GitHub"
  },
  {
    "objectID": "week5/index.html#differences-between-forking-and-cloning-a-repo",
    "href": "week5/index.html#differences-between-forking-and-cloning-a-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Differences between forking and cloning a repo",
    "text": "Differences between forking and cloning a repo\n\nA fork is a copy of someone else GitHub repository, saved to your own GitHub. It allows you to experiment with changes without affecting the original project.\nA fork acts as a bridge between the original repository and your personal one.\nIt will also allow you to interact between your forked copy and the original repo.\n\n\n\nWhen you clone a GitHub repository, you are creating a local copy of that repo on your computer.\nThat allows you to work on that repo locally and sync between both your local repo and your remote repo, but you cannot interact with the original repo if it’s owned by someone else."
  },
  {
    "objectID": "week5/index.html#what-is-a-pull-request",
    "href": "week5/index.html#what-is-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is a Pull request?",
    "text": "What is a Pull request?\n\nWe use GitHub to share our code and projects with others.\nThere are situations when another person makes changes into your code and wants you to consider those changes, for example fixing a bug or adding new examples\n\nTo do this, the other person can make a pull request. This makes a request to the repositories owner to pull or merge these changes into the original repository."
  },
  {
    "objectID": "week5/index.html#pull-request-visually",
    "href": "week5/index.html#pull-request-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request visually",
    "text": "Pull request visually"
  },
  {
    "objectID": "week5/index.html#forked-repo-1",
    "href": "week5/index.html#forked-repo-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Forked repo",
    "text": "Forked repo"
  },
  {
    "objectID": "week5/index.html#modified-forked-repo-for-pull-request",
    "href": "week5/index.html#modified-forked-repo-for-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Modified forked repo for pull request",
    "text": "Modified forked repo for pull request"
  },
  {
    "objectID": "week5/index.html#create-a-pull-request-to-the-original-repo",
    "href": "week5/index.html#create-a-pull-request-to-the-original-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Create a pull request to the original repo",
    "text": "Create a pull request to the original repo"
  },
  {
    "objectID": "week5/index.html#what-happens-when-you-start-a-pull-request",
    "href": "week5/index.html#what-happens-when-you-start-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What happens when you start a pull request",
    "text": "What happens when you start a pull request"
  },
  {
    "objectID": "week5/index.html#pull-request-from-etc5513demo-to-okayama1",
    "href": "week5/index.html#pull-request-from-etc5513demo-to-okayama1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request from ETC5513demo to okayama1",
    "text": "Pull request from ETC5513demo to okayama1"
  },
  {
    "objectID": "week5/index.html#pull-request-to-okayama1-owner-of-original-repo",
    "href": "week5/index.html#pull-request-to-okayama1-owner-of-original-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request to okayama1 (owner of original repo)",
    "text": "Pull request to okayama1 (owner of original repo)"
  },
  {
    "objectID": "week5/index.html#pull-request-email-to-okayama1",
    "href": "week5/index.html#pull-request-email-to-okayama1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request email to okayama1",
    "text": "Pull request email to okayama1"
  },
  {
    "objectID": "week5/index.html#pull-request-okayama1-github-inbox",
    "href": "week5/index.html#pull-request-okayama1-github-inbox",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request okayama1 GitHub Inbox",
    "text": "Pull request okayama1 GitHub Inbox"
  },
  {
    "objectID": "week5/index.html#opening-vscode",
    "href": "week5/index.html#opening-vscode",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Opening VSCode",
    "text": "Opening VSCode"
  },
  {
    "objectID": "week5/index.html#editing-the-readme.md-file",
    "href": "week5/index.html#editing-the-readme.md-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Editing the README.md file",
    "text": "Editing the README.md file"
  },
  {
    "objectID": "week5/index.html#staged-the-changes-readme.md-file",
    "href": "week5/index.html#staged-the-changes-readme.md-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Staged the changes README.md file",
    "text": "Staged the changes README.md file"
  },
  {
    "objectID": "week5/index.html#commit-the-changes-readme.md-file",
    "href": "week5/index.html#commit-the-changes-readme.md-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commit the changes README.md file",
    "text": "Commit the changes README.md file"
  },
  {
    "objectID": "week5/index.html#visualizing-all-the-files",
    "href": "week5/index.html#visualizing-all-the-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Visualizing all the files",
    "text": "Visualizing all the files"
  },
  {
    "objectID": "week5/index.html#creating-new-branch",
    "href": "week5/index.html#creating-new-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating new branch",
    "text": "Creating new branch"
  },
  {
    "objectID": "week5/index.html#in-the-meantime-in-github",
    "href": "week5/index.html#in-the-meantime-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "In the meantime in GitHub",
    "text": "In the meantime in GitHub"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts",
    "href": "week5/index.html#resolving-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts-1",
    "href": "week5/index.html#resolving-conflicts-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts-2",
    "href": "week5/index.html#resolving-conflicts-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts-3",
    "href": "week5/index.html#resolving-conflicts-3",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#what-you-should-know-by-now",
    "href": "week5/index.html#what-you-should-know-by-now",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What you should know by now?",
    "text": "What you should know by now?\n\nCrate reproducible simple html reports.\nCreate figures and tables using R code chunks\nReference figures, tables and sections\nConnect your reproducible reports to Git and GitHub (version control)\nWork on a reproducible project using Rstudio, Git and GitHub\nCreate and merge branches\nBeing able to solve merging conflicts\nForking repos in GitHub\nInteract with others using pull requests on GitHub\nBasic operations with VSCode."
  },
  {
    "objectID": "week5/index.html#tutorial-and-next-lecture",
    "href": "week5/index.html#tutorial-and-next-lecture",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tutorial and Next Lecture",
    "text": "Tutorial and Next Lecture\nNext week we will discuss the importance of reproducible reporting and the usage of version control systems. We will do few hands on exercises so please make sure you bring your computer to the lecture.\n\nTutorial this week you will start working in pairs.\nYou will continue working in pairs in Week 6 too.\nIn Week 6, we’ll keep of practicing all the things that we have learned so far.\nThis week and next will provide great opportunities for you to practice all the tools that we have learned so far!"
  },
  {
    "objectID": "week5/index.html#week-5-lesson",
    "href": "week5/index.html#week-5-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 5 Lesson",
    "text": "Week 5 Lesson\n\n\n\n\n\n\nRecap\n\n\n\nMore Git/GitHub tools\nPull requests: a tool to collaborate with others via GitHub\nVSCode"
  },
  {
    "objectID": "week4/tutorial/index.html",
    "href": "week4/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create repositories and syncrhonize them between your local and remote repos\nCreate a Quarto report with a tabell, figures and sections that are labelled and referenced\nCreate branches in local and remote repositories\nDeal with merge conflicts"
  },
  {
    "objectID": "week4/tutorial/index.html#objectives",
    "href": "week4/tutorial/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create repositories and syncrhonize them between your local and remote repos\nCreate a Quarto report with a tabell, figures and sections that are labelled and referenced\nCreate branches in local and remote repositories\nDeal with merge conflicts"
  },
  {
    "objectID": "week4/tutorial/index.html#creating-a-new-project",
    "href": "week4/tutorial/index.html#creating-a-new-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a new project",
    "text": "Creating a new project\nLet’s practice creating a new project from scratch. We will start by making the remote repository in GitHub.\n\nGo to https://github.com and log in.\nClick the + icon in the top-right corner → choose “New repository”.\nFill out the form:\n\nRepository name: e.g., my-new-project\n(Optional) Add a short description\nChoose Public (or Private if preferred)\n✅ Check “Add a README file”\n\nClick the “Create repository” button at the bottom.\n\nYour repository is now created and ready to use!\nNow, we need to clone the repository."
  },
  {
    "objectID": "week4/tutorial/index.html#step-2-clone-the-repository-using-the-terminal",
    "href": "week4/tutorial/index.html#step-2-clone-the-repository-using-the-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💻 Step 2: Clone the Repository Using the Terminal",
    "text": "💻 Step 2: Clone the Repository Using the Terminal\n\nOn your new repository page, click the green “Code” button.\nChoose the SSH tab (⚠️ not HTTPS) and copy the URL.\nIt will look like this:\ngit@github.com:your-username/my-new-project.git\nOpen your terminal.\nNavigate to the folder where you want to store your project (e.g., Documents):\ncd ~/Documents\nUse the git clone command followed by the URL:\ngit clone git@github.com:your-username/my-new-project.git\nMove into the project folder:\ncd my-new-project\n\n````markdown ## 🌿 Step 3: Create a Branch, Make Changes, and Push\nNow that your repository is cloned, you’re ready to create a branch, make some changes, and push it to GitHub."
  },
  {
    "objectID": "week4/tutorial/solution.html",
    "href": "week4/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create repositories and syncrhonize them between your local and remote repos\nCreate a Quarto report with a tabell, figures and sections that are labelled and referenced\nCreate branches in local and remote repositories\nDeal with merge conflicts"
  },
  {
    "objectID": "week4/tutorial/solution.html#objectives",
    "href": "week4/tutorial/solution.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Create repositories and syncrhonize them between your local and remote repos\nCreate a Quarto report with a tabell, figures and sections that are labelled and referenced\nCreate branches in local and remote repositories\nDeal with merge conflicts"
  },
  {
    "objectID": "week4/tutorial/solution.html#creating-a-new-project",
    "href": "week4/tutorial/solution.html#creating-a-new-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a new project",
    "text": "Creating a new project\nLet’s practice creating a new project from scratch. We will start by making the remote repository in GitHub.\n\nGo to https://github.com and log in.\nClick the + icon in the top-right corner → choose “New repository”.\nFill out the form:\n\nRepository name: e.g., my-new-project\n(Optional) Add a short description\nChoose Public (or Private if preferred)\n✅ Check “Add a README file”\n\nClick the “Create repository” button at the bottom.\n\nYour repository is now created and ready to use!\nNow, we need to clone the repository."
  },
  {
    "objectID": "week4/tutorial/solution.html#step-2-clone-the-repository-using-the-terminal",
    "href": "week4/tutorial/solution.html#step-2-clone-the-repository-using-the-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💻 Step 2: Clone the Repository Using the Terminal",
    "text": "💻 Step 2: Clone the Repository Using the Terminal\n\nOn your new repository page, click the green “Code” button.\nChoose the SSH tab (⚠️ not HTTPS) and copy the URL.\nIt will look like this:\ngit@github.com:your-username/my-new-project.git\nOpen your terminal.\nNavigate to the folder where you want to store your project (e.g., Documents):\ncd ~/Documents\nUse the git clone command followed by the URL:\ngit clone git@github.com:your-username/my-new-project.git\nMove into the project folder:\ncd my-new-project\n\n````markdown ## 🌿 Step 3: Create a Branch, Make Changes, and Push\nNow that your repository is cloned, you’re ready to create a branch, make some changes, and push it to GitHub."
  },
  {
    "objectID": "week3/workshop/index.html",
    "href": "week3/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Get familiar with the command line interface\nSet up git on your local machine\nConfigure git"
  },
  {
    "objectID": "week3/workshop/index.html#objectives",
    "href": "week3/workshop/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Get familiar with the command line interface\nSet up git on your local machine\nConfigure git"
  },
  {
    "objectID": "week3/workshop/index.html#exercise-1-practice-with-the-terminal",
    "href": "week3/workshop/index.html#exercise-1-practice-with-the-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 1: Practice with the terminal",
    "text": "Exercise 1: Practice with the terminal\nUsing your command line terminal:\n\nCheck the directory where you currently are\n\n\nNavigate to your Desktop (using cd and ls until you arrive at your destination).\n\n\nList of files and directories you have on your desktop\n\n\nCreate a folder called ETC5513_tutorial3.\nHint: mkdir\n\n\nNavigate into ETC5513_tutorial3 and inside that folder create another folder called Tutorial3\n\n\nInside ETC5513_tutorial3 create two folders at the same time called data and figures\n\n\nUse the command touch to create two files inside Tutorial3 example.qmd example1.qmd\n\n\nDelete example1.qmd\n\n\nInside ETC5513_tutorial3 create a new file called file1.txt\n\n\nMove file1.txt from ETC5513_tutorial3 into a new folder (or directory) called Example. The folder Example and ETC5513_tutorial3 should be at the same level.\nHint: mv"
  },
  {
    "objectID": "week3/workshop/index.html#exercise-2-git-and-github-configuration",
    "href": "week3/workshop/index.html#exercise-2-git-and-github-configuration",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 2: Git and GitHub configuration",
    "text": "Exercise 2: Git and GitHub configuration\n\n1. Git configuration\nOpen your command line interface/Terminal/Git Bash Shell window and type the following:\n\n\n\n\n\n\nImportant\n\n\n\nPlease replace “Firstname lastname” with your own details and choose a name that is identifiable for credit (this information is the one that identifies you)\n\n\ngit config --global user.name \"Firstname lastname\"\nSet your Monash email address to be associated with each history commit:\ngit config --global user.email \"valid email address\"\nNow go to your Rstudio session and follow the next steps:\n\nSelect Tools from the menu and go to Global Options\nClick Git/SVN on the left panel\nClick Enable version control interface for RStudio projects at the top and continue with the steps below.\n\nNext we are going to create an SSH key as follows (we want to do this to avoid having to input our GitHub credentials each time we interact with GitHub):\n\nClick on Create SSH Key and another pop-up prompt will appear where you will be asked to provide a PassPhrase. You do not need a passphrase. It is considered more secure but be aware you will have to enter this phrase as a password every time when the key is used.\n\n\n\n\n\n\n\nClick View public key and copy the key to the clipboard (ctrl c (Windows) or command c (mac)).\n\n\n\n\n\n\n\nNavigate to GitHub and go to the top right corner where your avatar is, select your avatar and select Settings from the drop-down menu.\n\n\n\n\n\n\n\nGo to SSH and GPG keys item in the left side menu inside your GitHub account. Click the green “New SSH key” button and give your key a title and paste the key you copy from Rstudio in the step above into the Key text-box. Then click “Add SSH key”.\n\nThe process described above allows you to interact between your local Git and GitHub without having to write your GitHub logging details each time you do a git operation between your local and your remote repository.\n\n\n2. Creating a repository on GitHub\nUsing your internet browser:\n\nLog in into your GitHub account following this link\nCreate a new private repo called Tutorial3 and make sure the repo is initialized with a README.md file by ticking on the option “Initialize this repository with a README” at the bottom of the page.\nClick the name Tutorial3 to look inside your GitHub project, identify what is the HTTPS and SSH address of this project by looking at the green tab (code).\n\nSee below the solutions:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Cloning and modifying our first GitHub repo using our Terminal/Command line interface/Git Bash shell and with Rstudio\nUsing your internet browser:\n\nClone the GitHub repository that you created in the previous exercise in your computer using the command line interface/Terminal/Git Bash shell. Remember that it is very important that you first decide where you want to clone the project in your computer and you navigate to that location using the command line interface/Terminal/Git Bash shell.\n\nThe git command to clone a GitHub repo is git clone SSH-repo GitHub path (SSH-repo GitHub path refers to the path that you will fine in your GitHub project page under Code &gt; SSH and copy the address that you see, it will end in .git. Mine looks like this\ngit@github.com:ETC5513demo/Tutorial3.git\nThen proceed to clone the repository in your local machine using the command line interface/Terminal/Git Bash shell:\ngit clone  git@github.com:github.com/ETC5513demo/Tutorial3.git (replace the SSH with your own!)\n(you can obtain this from within your GitHub project –&gt; code)\n\nYou will be prompted to input your GitHub log in details (only for this time). Enter your GitHub user name and password\nOpen your Rstudio and create a New Project associated with the folder of the GitHub repository that you just cloned in step 1:\n\nProjects &gt; Create a New project &gt; From an existing directory\nFrom the bottom left pane in your Rstudio open the README.md file and add the following sentence:\n“This repository is an example about how to integrate GitHub with Rstudio”\n\nIn your command line interface/Terminal/Git Bash shell type git status and observe that the file has been marked as modified.\nAdd this file to the staging area, create a commit and push the changes to the remote repository using our command line interface/Terminal/Git Bash shell.\nHints: git add filename; git commit -m \"Commit message\"; git push origin main. Remember that you can use git status at anytime during this process to see the status of your git repository. In summary:"
  },
  {
    "objectID": "week3/tutorial/index.html",
    "href": "week3/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Get familiar with the command line interface\nSet up git on your local machine\nConfigure git\nClone your first repository\nModify your first repository with the command line interface\nLearn git flow using RStudio"
  },
  {
    "objectID": "week3/tutorial/index.html#objectives",
    "href": "week3/tutorial/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Get familiar with the command line interface\nSet up git on your local machine\nConfigure git\nClone your first repository\nModify your first repository with the command line interface\nLearn git flow using RStudio"
  },
  {
    "objectID": "week3/tutorial/index.html#exercise-1-continuing-practicing-git-commands",
    "href": "week3/tutorial/index.html#exercise-1-continuing-practicing-git-commands",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 1: Continuing practicing git commands",
    "text": "Exercise 1: Continuing practicing git commands\nIn the workshop, you created a repository caslled “Tutorial3”. You also made an RStudio Project inside this repository. Open that project in RStudio before you start.\n\nInside your README file create a new section as follows: “This is a section”. Observe in the top right pane of your Rstudio how the status for the file README.md in the staging is changed to M after you modified the file in the top right pane of your Rstudio window.\n\n\nNow we are going to do a commit using Rstudio: Select the check box next to the file README.md in the staging area within your Rstudio and click:\n\n\nCommit\nWrite a message in the commit window “This is my first commit” in the window that pops up\nCommit\nPush (you will be prompt to insert your GitHub credentials one last time. After that you will be able to commit and push without having to insert your GitHub credentials! )\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen your GitHub, go to Tutorial3 project and make sure your README.md file has been updated.\nLook at the commits history."
  },
  {
    "objectID": "week3/tutorial/index.html#exercise-2-command-line-interface-git",
    "href": "week3/tutorial/index.html#exercise-2-command-line-interface-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 2: Command line interface & git",
    "text": "Exercise 2: Command line interface & git\nHere, we will use your Terminal/command line interface/Gitbash to interact between your local repository and your remote repository\n\nContinue working in the Rstudio Project that you created in the previous exercise. Inside your Rstudio project, copy the qmd file we made in Week 2 over to this directory.\n\n\n\n\n\n\n\nTip\n\n\n\nYou can do this either in your file explorer, or for an extra challenge, using the terminal.\n\n\n\nDo the same process with the data folder from Week 2.\nNow we are going to use your Terminal/command line interface/Gitbash to commit the changes using the directly. Please type the following in your Terminal/command line interface/Gitbash:\n\n\ngit add . (or git add * to commit all the changes)\ngit commit -m \"Adding folder data\"\ngit push origin main\n\n\nGeneral workflow to interact with GitHub using the Terminal:\n\n\ngit clone (A repository is typically clone only one time from the remote repository)\ngit pull (The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content. You should do this every time you star working in your local repository)\ngit status (The git status command displays the state of the working directory and the staging area)\ngit add &lt;file_name&gt; (The git add command adds a change in the working directory to the staging area)\ngit add * (Will commit all the changes)\ngit commit -m \"Message\"(m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\ngit push origin &lt;branch_name&gt; (The git push command is used to upload local repository content to a remote repository. )"
  },
  {
    "objectID": "week3/tutorial/solution.html",
    "href": "week3/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Get familiar with the command line interface\nSet up git on your local machine\nConfigure git\nClone your first repository\nModify your first repository with the command line interface\nLearn git flow using RStudio"
  },
  {
    "objectID": "week3/tutorial/solution.html#objectives",
    "href": "week3/tutorial/solution.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Get familiar with the command line interface\nSet up git on your local machine\nConfigure git\nClone your first repository\nModify your first repository with the command line interface\nLearn git flow using RStudio"
  },
  {
    "objectID": "week3/tutorial/solution.html#exercise-1-continuing-practicing-git-commands",
    "href": "week3/tutorial/solution.html#exercise-1-continuing-practicing-git-commands",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 1: Continuing practicing git commands",
    "text": "Exercise 1: Continuing practicing git commands\nIn the workshop, you created a repository caslled “Tutorial3”. You also made an RStudio Project inside this repository. Open that project in RStudio before you start.\n\nInside your README file create a new section as follows: “This is a section”. Observe in the top right pane of your Rstudio how the status for the file README.md in the staging is changed to M after you modified the file in the top right pane of your Rstudio window.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# This is a new section\n\n\n\n\n\nNow we are going to do a commit using Rstudio: Select the check box next to the file README.md in the staging area within your Rstudio and click:\n\n\nCommit\nWrite a message in the commit window “This is my first commit” in the window that pops up\nCommit\nPush (you will be prompt to insert your GitHub credentials one last time. After that you will be able to commit and push without having to insert your GitHub credentials! )\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen your GitHub, go to Tutorial3 project and make sure your README.md file has been updated.\nLook at the commits history."
  },
  {
    "objectID": "week3/tutorial/solution.html#exercise-2-command-line-interface-git",
    "href": "week3/tutorial/solution.html#exercise-2-command-line-interface-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 2: Command line interface & git",
    "text": "Exercise 2: Command line interface & git\nHere, we will use your Terminal/command line interface/Gitbash to interact between your local repository and your remote repository\n\nContinue working in the Rstudio Project that you created in the previous exercise. Inside your Rstudio project, copy the qmd file we made in Week 2 over to this directory.\n\n\n\n\n\n\n\nTip\n\n\n\nYou can do this either in your file explorer, or for an extra challenge, using the terminal.\n\n\n\nDo the same process with the data folder from Week 2.\nNow we are going to use your Terminal/command line interface/Gitbash to commit the changes using the directly. Please type the following in your Terminal/command line interface/Gitbash:\n\n\ngit add . (or git add * to commit all the changes)\ngit commit -m \"Adding folder data\"\ngit push origin main\n\n\nGeneral workflow to interact with GitHub using the Terminal:\n\n\ngit clone (A repository is typically clone only one time from the remote repository)\ngit pull (The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content. You should do this every time you star working in your local repository)\ngit status (The git status command displays the state of the working directory and the staging area)\ngit add &lt;file_name&gt; (The git add command adds a change in the working directory to the staging area)\ngit add * (Will commit all the changes)\ngit commit -m \"Message\"(m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\ngit push origin &lt;branch_name&gt; (The git push command is used to upload local repository content to a remote repository. )"
  },
  {
    "objectID": "week2/workshop/index.html",
    "href": "week2/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Preparation\n\n\n\n\n\n\nTo complete this tutorial, you’ll need the pre-built RStudio project. Go to Moodle, under Week 2, download the Tutorial 2 RStudio Project zip.\nSave this file on your computer and unzip it. You can open the .Rproj file and that should launch RStudio.\nTo render into a PDF, you will need to install the tinytex package. There are two methods to do this:\nEither install.packages(\"tinytex\") or at your command line type quarto install tinytex. Your tutors can help with this if you get stuck."
  },
  {
    "objectID": "week2/workshop/index.html#exercise-1-rstudio-projects",
    "href": "week2/workshop/index.html#exercise-1-rstudio-projects",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 1: RStudio Projects",
    "text": "Exercise 1: RStudio Projects\n\nCreate a new RStudio project. You can call it whatever you like, but something that will help you remember later will be advantageous.\nInside the project, create a folder called data.\nPlace the avian influenza data from Moodle into this folder.\nCreate a new Quarto documengt\nWrite your name as an author in the YAML\nChange the HTML theme to cerulean.\nSet the document to render as HTML and PDF."
  },
  {
    "objectID": "week2/workshop/index.html#exercise-2-yaml-and-r-chunk-options",
    "href": "week2/workshop/index.html#exercise-2-yaml-and-r-chunk-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 2: YAML and R Chunk Options",
    "text": "Exercise 2: YAML and R Chunk Options\n\nCreate a new R chunk that loads the following libraries: rmarkdown, knitr, tidyverse, readr, kableExtra, ggplot2\nChange the R chunk option from to message: false and warning: false. What happens when you render the file?\nCreate a new section called Introduction and type using markdown the following:\n“In this tutorial we are looking at the Avian Influenza cases detected globally since 1997.”\nHint: Think about the # character.\nIn the R chunk you made in Question 1, add the chunk option echo: false. What does this do?\nUsing markdown, link the words “US CDC” to the website https://www.cdc.gov/bird-flu/php/avian-flu-summary/chart-epi-curve-ah5n1.html"
  },
  {
    "objectID": "week2/tutorial/index.html",
    "href": "week2/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible RStudio Project\nWorking on a HTML report and example different YAML themes\nPractice Markdown syntax\nPractice R\nPractice R chunk options\nGain experience on data wrangling using the tidyverse suite of packages\nProducing exploratory data analysis figures using the package ggplot2\nLearn how to add figure captions\nCreate HTML tables and learn how to add captions"
  },
  {
    "objectID": "week2/tutorial/index.html#objectives",
    "href": "week2/tutorial/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible RStudio Project\nWorking on a HTML report and example different YAML themes\nPractice Markdown syntax\nPractice R\nPractice R chunk options\nGain experience on data wrangling using the tidyverse suite of packages\nProducing exploratory data analysis figures using the package ggplot2\nLearn how to add figure captions\nCreate HTML tables and learn how to add captions"
  },
  {
    "objectID": "week2/tutorial/index.html#exercise-1-hands-on-practice-with-covid-19-data",
    "href": "week2/tutorial/index.html#exercise-1-hands-on-practice-with-covid-19-data",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 1: Hands on practice with COVID-19 Data",
    "text": "Exercise 1: Hands on practice with COVID-19 Data\n\nThe data for the tutorial is inside a folder called data, which is bundled with the RStudio Project you made in this week’s workshop. Find that file in the lower right pane where all your files are listed.\nCreate a new section heading in your qmd document to read the data with the title “Reading Avian Influenza Data”\nHint: Use #\nInside this new section, create an R Code Chunk with options echo: true, warning: false, message: false called “Reading data” and insert the following code:\n\n\ndat &lt;- read_csv(\"data/avian_influenza_numbers.csv\")\n\nInsert a new R Chunk and find out what information you can get from the command head(dat)\nModify the head command to display 10 rows.\nCreate another two R chunks and use in each of them the R functions glimpse() and str(). What information can you get from those commands? Hint: For more information on R functions, type in the R console ?glimpse().\nUsing an R inline command, write the dimension of the dataset in a sentence.\nHint: Have a look at ncol and nrow.\nAdd a new subsection heading (###) with “Why is it important to know the dimension of your dataset?” and write a brief sentence with the explanation\nAdd a new subsection heading (###) with “What are the variable names in the dataset?” and display the names of the dataset variables using R.\nHint: ?names() in the R consolee\nSelect two variables and use a markdown list to briefly explain what each of the variables are measuring."
  },
  {
    "objectID": "week2/tutorial/index.html#exercise-4-data-wrangling",
    "href": "week2/tutorial/index.html#exercise-4-data-wrangling",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 4: Data Wrangling",
    "text": "Exercise 4: Data Wrangling\n\nUsing the R package dplyr (which is loaded with tidyverse), and using the pipe (|&gt;), create a new dataset called data_cleaned that only contains the following variables:\n\nMonth\nAustralia\nEgypt\nUnited States\n\n\n\nInspect data_cleaned and describe using a markdown list the type of variables in this new dataset. Write the names of the variables in bold. Do you think the variable attributes are correct?\n\n\nConvert the variable date into a date vector using lubridate::mdy. What do you notice?\n\n\nRemove cases for which the data is aggregated or doesn’t have a valid month.\n\n\nWhat is the dimension of this new data set? Compare it with the dimension of cleaned_data. How many cases have we lost?\n\n\nProvide a table summary of the three countries using the kable() function from the kableExtra package. Give it the caption “Summary of number of cases of Avian Influenza”.\n\n\nVisualize the case counts using a histogram and give an explanation about the information that a histogram convey. In addition change the x label in the plot to Age and remove the y axis label.\nHint: As a first step, do this for just one country. To do multiple countries at once, you will need to pivot_longer your dataset.\n\n\nExtension: Change this plot to a time series plot, with one bar per month. As an extra challenge, split this out into three separate plots - one per country.\n\n\n\n\n\n\n\nImportant\n\n\n\nAt the end of this tutorial, you should have a full QMD file that renders, including your code and the outputs from it. This means you can read it from top to bottom and remember what you did."
  },
  {
    "objectID": "week2/tutorial/solution.html",
    "href": "week2/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible RStudio Project\nWorking on a HTML report and example different YAML themes\nPractice Markdown syntax\nPractice R\nPractice R chunk options\nGain experience on data wrangling using the tidyverse suite of packages\nProducing exploratory data analysis figures using the package ggplot2\nLearn how to add figure captions\nCreate HTML tables and learn how to add captions"
  },
  {
    "objectID": "week2/tutorial/solution.html#objectives",
    "href": "week2/tutorial/solution.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible RStudio Project\nWorking on a HTML report and example different YAML themes\nPractice Markdown syntax\nPractice R\nPractice R chunk options\nGain experience on data wrangling using the tidyverse suite of packages\nProducing exploratory data analysis figures using the package ggplot2\nLearn how to add figure captions\nCreate HTML tables and learn how to add captions"
  },
  {
    "objectID": "week2/tutorial/solution.html#exercise-1-hands-on-practice-with-covid-19-data",
    "href": "week2/tutorial/solution.html#exercise-1-hands-on-practice-with-covid-19-data",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 1: Hands on practice with COVID-19 Data",
    "text": "Exercise 1: Hands on practice with COVID-19 Data\n\nThe data for the tutorial is inside a folder called data, which is bundled with the RStudio Project you made in this week’s workshop. Find that file in the lower right pane where all your files are listed.\nCreate a new section heading in your qmd document to read the data with the title “Reading Avian Influenza Data”\nHint: Use #\nInside this new section, create an R Code Chunk with options echo: true, warning: false, message: false called “Reading data” and insert the following code:\n\n\ndat &lt;- read_csv(\"data/avian_influenza_numbers.csv\")\n\nInsert a new R Chunk and find out what information you can get from the command head(dat)\nModify the head command to display 10 rows.\nCreate another two R chunks and use in each of them the R functions glimpse() and str(). What information can you get from those commands? Hint: For more information on R functions, type in the R console ?glimpse().\nUsing an R inline command, write the dimension of the dataset in a sentence.\nHint: Have a look at ncol and nrow.\nAdd a new subsection heading (###) with “Why is it important to know the dimension of your dataset?” and write a brief sentence with the explanation\nAdd a new subsection heading (###) with “What are the variable names in the dataset?” and display the names of the dataset variables using R.\nHint: ?names() in the R consolee\nSelect two variables and use a markdown list to briefly explain what each of the variables are measuring.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nThe R chunk should look like this:\n\n# Reading data\n\n```{r loading_data}\n#| echo: true\n#| warning: false\n#| message: false\n\ndat &lt;- read_csv(\"data/avian_influenza_numbers.csv\")\n```\n\nhead(dat) will print the top five rows of the dataset.\nhead(dat, n=10)\nglimpse prints the columns as rows, and the data across the screen. It shows the first view values and the type (class) of each column. str is similar but shows you detailed information about the dataframe object (as opposd to just the data).\n\n\n\nRows: 370\nColumns: 26\n$ Range            &lt;chr&gt; \"1997-1999\", \"1997-1999\", \"1997-1999\", \"1997-1999\", \"…\n$ Month            &lt;chr&gt; \"1/1/1997\", \"2/1/1997\", \"3/1/1997\", \"4/1/1997\", \"5/1/…\n$ Vietnam          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Turkey           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Thailand         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Iraq             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Indonesia        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Egypt            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Djibouti         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ China            &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 13, 0, 0, 0, 0, 0, 0…\n$ Cambodia         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Nigeria          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Azerbaijan       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Pakistan         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Myanmar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Laos             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Bangladesh       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Canada           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ India            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Nepal            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ `United Kingdom` &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Spain            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ `United States`  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Ecuador          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Chile            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Australia        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\n\nspc_tbl_ [370 × 26] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Range         : chr [1:370] \"1997-1999\" \"1997-1999\" \"1997-1999\" \"1997-1999\" ...\n $ Month         : chr [1:370] \"1/1/1997\" \"2/1/1997\" \"3/1/1997\" \"4/1/1997\" ...\n $ Vietnam       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Turkey        : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Thailand      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Iraq          : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Indonesia     : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Egypt         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Djibouti      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ China         : num [1:370] 0 0 0 0 1 0 0 0 0 0 ...\n $ Cambodia      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Nigeria       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Azerbaijan    : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Pakistan      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Myanmar       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Laos          : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Bangladesh    : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Canada        : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ India         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Nepal         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ United Kingdom: num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Spain         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ United States : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Ecuador       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Chile         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Australia     : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Range = col_character(),\n  ..   Month = col_character(),\n  ..   Vietnam = col_double(),\n  ..   Turkey = col_double(),\n  ..   Thailand = col_double(),\n  ..   Iraq = col_double(),\n  ..   Indonesia = col_double(),\n  ..   Egypt = col_double(),\n  ..   Djibouti = col_double(),\n  ..   China = col_double(),\n  ..   Cambodia = col_double(),\n  ..   Nigeria = col_double(),\n  ..   Azerbaijan = col_double(),\n  ..   Pakistan = col_double(),\n  ..   Myanmar = col_double(),\n  ..   Laos = col_double(),\n  ..   Bangladesh = col_double(),\n  ..   Canada = col_double(),\n  ..   India = col_double(),\n  ..   Nepal = col_double(),\n  ..   `United Kingdom` = col_double(),\n  ..   Spain = col_double(),\n  ..   `United States` = col_double(),\n  ..   Ecuador = col_double(),\n  ..   Chile = col_double(),\n  ..   Australia = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nand for good measure\n\n\n# A tibble: 10 × 26\n   Range     Month  Vietnam Turkey Thailand  Iraq Indonesia Egypt Djibouti China\n   &lt;chr&gt;     &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 1997-1999 1/1/1…       0      0        0     0         0     0        0     0\n 2 1997-1999 2/1/1…       0      0        0     0         0     0        0     0\n 3 1997-1999 3/1/1…       0      0        0     0         0     0        0     0\n 4 1997-1999 4/1/1…       0      0        0     0         0     0        0     0\n 5 1997-1999 5/1/1…       0      0        0     0         0     0        0     1\n 6 1997-1999 6/1/1…       0      0        0     0         0     0        0     0\n 7 1997-1999 7/1/1…       0      0        0     0         0     0        0     0\n 8 1997-1999 8/1/1…       0      0        0     0         0     0        0     0\n 9 1997-1999 9/1/1…       0      0        0     0         0     0        0     0\n10 1997-1999 10/1/…       0      0        0     0         0     0        0     0\n# ℹ 16 more variables: Cambodia &lt;dbl&gt;, Nigeria &lt;dbl&gt;, Azerbaijan &lt;dbl&gt;,\n#   Pakistan &lt;dbl&gt;, Myanmar &lt;dbl&gt;, Laos &lt;dbl&gt;, Bangladesh &lt;dbl&gt;, Canada &lt;dbl&gt;,\n#   India &lt;dbl&gt;, Nepal &lt;dbl&gt;, `United Kingdom` &lt;dbl&gt;, Spain &lt;dbl&gt;,\n#   `United States` &lt;dbl&gt;, Ecuador &lt;dbl&gt;, Chile &lt;dbl&gt;, Australia &lt;dbl&gt;\n\n\n\nCode example:\n\n\nThe dataset has `r nrow(dat)` rows and `r ncol(dat)` variables.\nOutput: The dataset has 370 rows and 26 variables.\n\nExample markdown:\n\n### Why is it important to know the dimension of your dataset?\nIt is important because it will help you to better understand the \nstructure of your data set. It will provide a clear information\nabout how many variables and how many individual cases  are \nin your data.\n\n### What are the variable names in the dataset?\n```{r}\nnames(dat)\n```\nOutput:\n\nRange: Contains a range of years. Class character.\nMonth: Month of the data, format is m/d/y. Class character.\nRemaining columns: Country of case. Class double.\n\n\nWhy is it important to know the dimension of your dataset?\nIt is important because it will help you to better understand the structure of your data set. It will provide a clear information about how many variables and how many individual cases are in your data.\n\n\nWhat are the variable names in the dataset?\n\n\n [1] \"Range\"          \"Month\"          \"Vietnam\"        \"Turkey\"        \n [5] \"Thailand\"       \"Iraq\"           \"Indonesia\"      \"Egypt\"         \n [9] \"Djibouti\"       \"China\"          \"Cambodia\"       \"Nigeria\"       \n[13] \"Azerbaijan\"     \"Pakistan\"       \"Myanmar\"        \"Laos\"          \n[17] \"Bangladesh\"     \"Canada\"         \"India\"          \"Nepal\"         \n[21] \"United Kingdom\" \"Spain\"          \"United States\"  \"Ecuador\"       \n[25] \"Chile\"          \"Australia\""
  },
  {
    "objectID": "week2/tutorial/solution.html#exercise-4-data-wrangling",
    "href": "week2/tutorial/solution.html#exercise-4-data-wrangling",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 4: Data Wrangling",
    "text": "Exercise 4: Data Wrangling\n\nUsing the R package dplyr (which is loaded with tidyverse), and using the pipe (|&gt;), create a new dataset called data_cleaned that only contains the following variables:\n\nMonth\nAustralia\nEgypt\nUnited States\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata_cleaned &lt;- dat |&gt;\n    select(Month, Australia, Egypt, `United States`)\n\n\n\n\n\nInspect data_cleaned and describe using a markdown list the type of variables in this new dataset. Write the names of the variables in bold. Do you think the variable attributes are correct?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n* `Month` is a character (`&lt;chr&gt;`)\n* `Australia`, `Egypt` and `United States` are character (`&lt;chr&gt;`)\nWe would expect Month to be a date\n\n\n\n\n\nConvert the variable date into a date vector using lubridate::mdy. What do you notice?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nLet’s put it in a new object\n\ndata_monthly &lt;- data_cleaned |&gt;\n    mutate(monthdate = lubridate::mdy(Month))\n\nThere are some missing values. If we filter by these,\n\ndata_monthly |&gt; filter(is.na(monthdate))\n\n# A tibble: 32 × 5\n   Month Australia Egypt `United States` monthdate\n   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt; &lt;date&gt;   \n 1 &lt;NA&gt;         NA    NA              NA NA       \n 2 &lt;NA&gt;         NA    NA              NA NA       \n 3 &lt;NA&gt;         NA    NA              NA NA       \n 4 1997          0     0               0 NA       \n 5 1998          0     0               0 NA       \n 6 1999          0     0               0 NA       \n 7 2000          0     0               0 NA       \n 8 2001          0     0               0 NA       \n 9 2002          0     0               0 NA       \n10 2003          0     0               0 NA       \n# ℹ 22 more rows\n\n\nWe see it seems to be aggregated data that is NA, so we can safely ignore them.\n\ndata_monthly &lt;- data_monthly |&gt; filter(!is.na(monthdate))\n\n\n\n\n\n\nRemove cases for which the data is aggregated or doesn’t have a valid month.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ndata_monthly &lt;- data_monthly |&gt; filter(!is.na(monthdate))\n\n\n\n\n\n\nWhat is the dimension of this new data set? Compare it with the dimension of cleaned_data. How many cases have we lost?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ndim(data_monthly)\n\n[1] 338   5\n\ndim(data_cleaned)\n\n[1] 370   4\n\n\nWe have lost 32 cases for which we did not have information about age or gender.\n\n\n\n\n\nProvide a table summary of the three countries using the kable() function from the kableExtra package. Give it the caption “Summary of number of cases of Avian Influenza”.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlibrary(knitr)\ndata_monthly |&gt;\n    select(Egypt, Australia, `United States`) |&gt;\n    summary() |&gt;\n    kable(caption = \"COVID-19 Age Summary\")\n\n\nCOVID-19 Age Summary\n\n\n\nEgypt\nAustralia\nUnited States\n\n\n\n\n\nMin. : 0.000\nMin. :0.000000\nMin. : 0.0000\n\n\n\n1st Qu.: 0.000\n1st Qu.:0.000000\n1st Qu.: 0.0000\n\n\n\nMedian : 0.000\nMedian :0.000000\nMedian : 0.0000\n\n\n\nMean : 1.062\nMean :0.002959\nMean : 0.2101\n\n\n\n3rd Qu.: 0.000\n3rd Qu.:0.000000\n3rd Qu.: 0.0000\n\n\n\nMax. :50.000\nMax. :1.000000\nMax. :30.0000\n\n\n\n\n\n\n\n\n\n\nVisualize the case counts using a histogram and give an explanation about the information that a histogram convey. In addition change the x label in the plot to Age and remove the y axis label.\nHint: As a first step, do this for just one country. To do multiple countries at once, you will need to pivot_longer your dataset.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlibrary(ggplot2)\ndata_monthly |&gt;\n    ggplot(aes(x=Egypt)) +\n    geom_histogram(binwidth = 5) +\n    labs(x=\"Case counts in Egypt\", y=\"\")\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(tidyr)\ndata_monthly |&gt;\n    # Drop the old month column\n    select(!Month) |&gt;\n    # Pivot everything except monthdate\n    pivot_longer(!monthdate) |&gt;\n    ggplot(aes(x=value, fill = name)) +\n    geom_histogram(binwidth = 5, position = \"dodge\") +\n    labs(x=\"Case counts of Avian Influenza\", y=\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtension: Change this plot to a time series plot, with one bar per month. As an extra challenge, split this out into three separate plots - one per country.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ndata_monthly |&gt;\n    # Drop the old month column\n    select(!Month) |&gt;\n    # Pivot everything except monthdate\n    pivot_longer(!monthdate) |&gt;\n    ggplot(aes(x=monthdate, y = value, fill = name)) +\n    geom_col() +\n    facet_wrap(~name, scales=\"free\") +\n    labs(x=\"Case counts of Avian Influenza\", y=\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAt the end of this tutorial, you should have a full QMD file that renders, including your code and the outputs from it. This means you can read it from top to bottom and remember what you did."
  },
  {
    "objectID": "week11/week11.html",
    "href": "week11/week11.html",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "It used to work I’m sure!\n\n\n\nMy code ran 6 months ago (I’m sure it did) and now it is not working.\nMy figures in ggplot look funny now\n\n\nGenerally, this is because a version of a package has updated.\n\n\n\n\n\n\n\n\n\n\n\n\nThe primary solution for dependency management (which is far from perfect) is renv\n\n\n\n\n\nThe idea is to create a project-specific library to ensure a project has a record of which version of R packages are used.\n\n\n\n\nGives each R project it’s own local library\nProvides an easy way to get R sessions to use a local library\nProvides tools for managing the R packages installed in these local libraries\n\n\n\n\n\n\n\n\n\nWhen we load a library, what exactly is going on?\n\nR searches in a collection of places for the dplyr package, and loads it.\nThese places are called library paths.\n\n\nYou can change the library path, and you can view them using .libPaths()\n\n\n\n\nYour default library path is probably something like:\n/Library/Frameworks/R.framework/Versions/4.0/Resources/library\nIf you want to find a package, you can use find.package(\"dplyr\")\n\nrenv sets up a project-specific library path to keep your packages from interacting with eaach other.\n\n\n\n\nVia the R console:\n\nrenv::init() to initialise the project\nWork as usual, installing packages, writing code\nrenv::snapshot() to save the state of the local library to a lockfile\nrenv::restore() to reverty our packages to the state encoded in the lockfile\n\nThe lockfile contains all the information about which package version is being used, and makes your environment reproducible.\n\n\n\nIn collaborative projects, you may want to ensure everyone is working with the same environment\nIt helps protect against changes between different versions of packages.\n\nBy sharing the lockfile, your collaborators will be using the same version of packages that you are using, without breaking their own installs."
  },
  {
    "objectID": "week11/week11.html#think-about-the-following-issue",
    "href": "week11/week11.html#think-about-the-following-issue",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "My code ran 6 months ago (I’m sure it did) and now it is not working.\nMy figures in ggplot look funny now\n\n\nGenerally, this is because a version of a package has updated."
  },
  {
    "objectID": "week11/week11.html#lightweight-dependency-management",
    "href": "week11/week11.html#lightweight-dependency-management",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "The primary solution for dependency management (which is far from perfect) is renv\n\n\n\n\n\nThe idea is to create a project-specific library to ensure a project has a record of which version of R packages are used."
  },
  {
    "objectID": "week11/week11.html#how-does-renv-work",
    "href": "week11/week11.html#how-does-renv-work",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "Gives each R project it’s own local library\nProvides an easy way to get R sessions to use a local library\nProvides tools for managing the R packages installed in these local libraries"
  },
  {
    "objectID": "week11/week11.html#so-what-is-a-library-path-anyway",
    "href": "week11/week11.html#so-what-is-a-library-path-anyway",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "When we load a library, what exactly is going on?\n\nR searches in a collection of places for the dplyr package, and loads it.\nThese places are called library paths.\n\n\nYou can change the library path, and you can view them using .libPaths()"
  },
  {
    "objectID": "week11/week11.html#library-paths-example",
    "href": "week11/week11.html#library-paths-example",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "Your default library path is probably something like:\n/Library/Frameworks/R.framework/Versions/4.0/Resources/library\nIf you want to find a package, you can use find.package(\"dplyr\")\n\nrenv sets up a project-specific library path to keep your packages from interacting with eaach other."
  },
  {
    "objectID": "week11/week11.html#renv-workflow",
    "href": "week11/week11.html#renv-workflow",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "Via the R console:\n\nrenv::init() to initialise the project\nWork as usual, installing packages, writing code\nrenv::snapshot() to save the state of the local library to a lockfile\nrenv::restore() to reverty our packages to the state encoded in the lockfile\n\nThe lockfile contains all the information about which package version is being used, and makes your environment reproducible."
  },
  {
    "objectID": "week11/week11.html#but-why",
    "href": "week11/week11.html#but-why",
    "title": "Making sure your code is transportable",
    "section": "",
    "text": "In collaborative projects, you may want to ensure everyone is working with the same environment\nIt helps protect against changes between different versions of packages.\n\nBy sharing the lockfile, your collaborators will be using the same version of packages that you are using, without breaking their own installs."
  },
  {
    "objectID": "week11/week11.html#managing-the-lockfile",
    "href": "week11/week11.html#managing-the-lockfile",
    "title": "Making sure your code is transportable",
    "section": "Managing the lockfile",
    "text": "Managing the lockfile\n“If you’re using a version control system with your project, then as you call renv::snapshot() and later commit new lockfiles to your repository, you may find it necessary later to recover older versions of your lockfiles. renv provides the functions renv::history() to list previous revisions of your lockfile, and renv::revert() to recover these older lockfiles.”\nCurrently, only Git repositories are supported by renv::history() and renv::revert().\nSource here"
  },
  {
    "objectID": "week11/week11.html#managing-the-lockfile-1",
    "href": "week11/week11.html#managing-the-lockfile-1",
    "title": "Making sure your code is transportable",
    "section": "Managing the lockfile",
    "text": "Managing the lockfile\nEach project contains only a single renv.lock\nThere are some helper functions:\n\nrenv::history(): find prior commtis in which the lockfile has changed\nrenv::revert(commit = SHA1): Revert the lockfile to a state at a previous commit\n\n\n\n\n\n\n\nImportant\n\n\n\nMake sure to commit the lockfile often, and call renv::snapshot() when you’re updating packages! This is the only way the changes can be recorded and shared."
  },
  {
    "objectID": "week11/week11.html#workflow-for-collaboration",
    "href": "week11/week11.html#workflow-for-collaboration",
    "title": "Making sure your code is transportable",
    "section": "Workflow for collaboration",
    "text": "Workflow for collaboration\n\nSelect a version control system (i.e. git and GitHub)\nInitialise the project: renv::init()\nPeriodically, and after adding new packages, use renv::snapshot()\nStage, commit and share renv.lock with others via version control."
  },
  {
    "objectID": "week11/week11.html#workflow-for-collaboration-1",
    "href": "week11/week11.html#workflow-for-collaboration-1",
    "title": "Making sure your code is transportable",
    "section": "Workflow for collaboration",
    "text": "Workflow for collaboration\nOnce collaborators clone the repository, they also run renv::init().\nThis will automatically install the packages declared in the lockfile.\nBy doing this, they can work in your project using exactly the same R packages that you used when the lockfile was generated."
  },
  {
    "objectID": "week11/index.html#etc5513-title",
    "href": "week11/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nKeeping environments separate and reproducible\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 11\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week11/index.html#open-frame",
    "href": "week11/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week11/index.html#recap",
    "href": "week11/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nLearn how to add references and bibliography\nDealing with large files\nTags\nGitHub issues"
  },
  {
    "objectID": "week11/index.html#aim",
    "href": "week11/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nCreate a git project from an existing local folder\nLicensing a repository\nLightweight dependency management\nAdvanced collaborative practices\nTemplates for slides"
  },
  {
    "objectID": "week11/index.html#reproducibility-using-docker-1",
    "href": "week11/index.html#reproducibility-using-docker-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility using Docker",
    "text": "Reproducibility using Docker\nDocker is a program that allows to manipulate (launch and stop) multiple operating systems (called containers) on your machine (your machine will be called the host).\nSource here.\nDocker is designed to enclose environments inside an image / a container"
  },
  {
    "objectID": "week11/index.html#reproducibility-using-docker-2",
    "href": "week11/index.html#reproducibility-using-docker-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility using Docker",
    "text": "Reproducibility using Docker"
  },
  {
    "objectID": "week11/index.html#reproducibility-using-docker-3",
    "href": "week11/index.html#reproducibility-using-docker-3",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility using Docker",
    "text": "Reproducibility using Docker"
  },
  {
    "objectID": "week11/index.html#etc5513-unit-objectives",
    "href": "week11/index.html#etc5513-unit-objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513 Unit Objectives",
    "text": "ETC5513 Unit Objectives\n\nDevelop skills to create reproducible documents.\nUnderstand the operation of version control systems.\nAdvance use of version control.\nUtilize version control to integrate data analysis efforts of team members.\nEffectively work with a group to construct a collaborative data science project."
  },
  {
    "objectID": "week11/index.html#reproducibility-and-replicability",
    "href": "week11/index.html#reproducibility-and-replicability",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility and Replicability",
    "text": "Reproducibility and Replicability\nDefinitions by the USA National Academies of Science, Engineering and Medicine:\n\n\n\n\n\n\nTip\n\n\nReproducibility (“computational reproducibility”) means obtaining consistent computational results using the same input data, computational steps, methods, code, and conditions of analysis.\n\n\n\nReplicability means obtaining consistent results across studies aimed at answering the same scientific question, each of which has obtained its own data"
  },
  {
    "objectID": "week11/index.html#reproducible-research",
    "href": "week11/index.html#reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducible research",
    "text": "Reproducible research\n\nWorking to make your research reproducible does require extra upfront effort.\nMaking a project reproducible from the start encourages you to use better work habits.\nIt should push you to bring your data and source code up to a higher level of quality than you might if you “thought ‘no one was looking’” [Donoho, 2010, 386].\nReproducible research needs to be stored so that other researchers can actually access the data and source code.\nChanges are easier to implement \\(\\rightarrow\\) specially when using dynamic reproducible documents.\nReproducible research has higher impact."
  },
  {
    "objectID": "week11/index.html#tools-for-reproducible-research",
    "href": "week11/index.html#tools-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tools for reproducible research",
    "text": "Tools for reproducible research\n\nR programming language\n\nR enables researchers to read data, create data visualizations and run statistical analyses.\nR has thousands of libraries\nR has a very active development community that is constantly expanding.\n\nR libraries/packages facilitate reproducibility:\n\nKnitr and Rmarkdown:\n\nAllow us to connect R-based analyses to presentation, papers and reports documents created with markup languages such as LaTeX and Markdown"
  },
  {
    "objectID": "week11/index.html#rstudio",
    "href": "week11/index.html#rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio",
    "text": "Rstudio\n\nRStudio is an integrated developer environment (IDE):\n\nR by itself has the capabilities necessary to gather and analyze data, and with a little help from knitr/Rmarkdown and markup languages, present results in a way that is highly reproducible.\n\n\nRStudio allows you to do all of these things more easily. - It also is a happy medium between R’s text-based interface and a pure GUI. - It is not the only IDE! - It is closely integrated with the version control programs Git and SVN."
  },
  {
    "objectID": "week11/index.html#version-control",
    "href": "week11/index.html#version-control",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Version control",
    "text": "Version control\n\n\n\n\n\n\nTip\n\n\nVersion Control is a system that records changes to a file or set of files over time so that you can recall specific versions later."
  },
  {
    "objectID": "week11/index.html#git",
    "href": "week11/index.html#git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git",
    "text": "Git\n“Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows”\nhttps://en.wikipedia.org/wiki/Git"
  },
  {
    "objectID": "week11/index.html#git-and-github",
    "href": "week11/index.html#git-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git and GitHub",
    "text": "Git and GitHub\n\nSource here"
  },
  {
    "objectID": "week11/index.html#tools",
    "href": "week11/index.html#tools",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tools",
    "text": "Tools\n\nR\nRstudio\nGit\nGitHub\nVS code"
  },
  {
    "objectID": "week11/index.html#workflow-for-reproducible-research",
    "href": "week11/index.html#workflow-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Workflow for reproducible research",
    "text": "Workflow for reproducible research\n\nReproducible Research with R and Rstudio by Christopher Gandrud"
  },
  {
    "objectID": "week11/index.html#what-is-markdown",
    "href": "week11/index.html#what-is-markdown",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is Markdown?",
    "text": "What is Markdown?\n\n\n\n\n\n\nTip\n\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plain text text documents.\n\n\n\nIt was created by John Gruber in 2004. Read more here\n\nMarkdown is a “text” formatting syntax\nCan be easily render to more complex formats such as: pdf, html, pdf, docx"
  },
  {
    "objectID": "week11/index.html#markdown-example",
    "href": "week11/index.html#markdown-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Markdown example",
    "text": "Markdown example\n# Header 1\n## Header 2\n\n- Unordered list 1 \n1. Ordered list 1\n\n _This is italic._\n \n *This too.*\n \n **This is bold**"
  },
  {
    "objectID": "week11/index.html#quarto-and-knitr",
    "href": "week11/index.html#quarto-and-knitr",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto and knitr",
    "text": "Quarto and knitr\n\nQuarto is a package within R that allows us to create documents using Markdown\nKnitr is an R package that allows us to render Rmarkdown code into html, pdf, docx"
  },
  {
    "objectID": "week11/index.html#quarto-file-structure",
    "href": "week11/index.html#quarto-file-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto file structure",
    "text": "Quarto file structure\nThree main components:\n\nYAML\nText\nR Code Chunks\n\nMore info about Quarto"
  },
  {
    "objectID": "week11/index.html#quarto-anatomy",
    "href": "week11/index.html#quarto-anatomy",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto anatomy",
    "text": "Quarto anatomy\n\nMetadata: It is written in markdown at the top of the file between ‘—’ in YAML\n\n---\ntitle: \"ETC5513\"\nauthor: \"Michael Lydeamore\"\nformat: html\n---"
  },
  {
    "objectID": "week11/index.html#quarto-anatomy-1",
    "href": "week11/index.html#quarto-anatomy-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto anatomy",
    "text": "Quarto anatomy\n\nText is written in markdown\n\n# This is a section header\n## This is a subsection header\nIn this section it is **important**"
  },
  {
    "objectID": "week11/index.html#r-code-chunks",
    "href": "week11/index.html#r-code-chunks",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R code chunks",
    "text": "R code chunks\nYou can quickly insert R chunks into your file with\n\nthe keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I)\nthe Add Chunk command in the editor toolbar\nor by typing the chunk delimiters"
  },
  {
    "objectID": "week11/index.html#chunk-options",
    "href": "week11/index.html#chunk-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Chunk options",
    "text": "Chunk options\nChunk output can be customized with options, marked by the “hashpipe”: #|\n\ninclude: false prevents code and results from appearing in the finished file. Quarto still runs the code in the chunk, and the results can be used by other chunks.\necho: false prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures."
  },
  {
    "objectID": "week11/index.html#more-r-code-chunk-options",
    "href": "week11/index.html#more-r-code-chunk-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More R code chunk options",
    "text": "More R code chunk options\n\neval: false prevents evaluating the code and include its results\nmessage: false prevents messages that are generated by code from appearing in the finished file.\nwarning: false prevents warnings that are generated by code from appearing in the finished.\nfig-cap: ... adds a caption to graphical results."
  },
  {
    "objectID": "week11/index.html#r-code-chunks-1",
    "href": "week11/index.html#r-code-chunks-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R code chunks",
    "text": "R code chunks"
  },
  {
    "objectID": "week11/index.html#global-options",
    "href": "week11/index.html#global-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Global options",
    "text": "Global options\nTo set global options that apply to every chunk in your file, call\nknitr::opts_chunk$set()\nin an R code chunk.\nKnitr will treat each option that you pass to knitr::opts_chunk$set() as a global default that can be overwritten in individual R code chunk headers.\nMore info here"
  },
  {
    "objectID": "week11/index.html#caching",
    "href": "week11/index.html#caching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Caching",
    "text": "Caching\n\nIf document rendering becomes time consuming due to long computations you can use knitr caching to improve performance.\nKnitr chunk and package options (here) describes how caching works\nThe cache examples (here) provide additional details.\n\ncache: true is an option within the chunks or you can set it as a global option.\n\n\n\n\n\n\nCaution\n\n\nCaching might prevent you from updating some results. Because of that, it is essential that you use it only when you are sure your R code chunks are working fine. Setting cache = TRUE as a global option might be dangerous so be very careful."
  },
  {
    "objectID": "week11/index.html#quarto-workflow",
    "href": "week11/index.html#quarto-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto workflow",
    "text": "Quarto workflow"
  },
  {
    "objectID": "week11/index.html#thanks-to-knitr-and-pandoc",
    "href": "week11/index.html#thanks-to-knitr-and-pandoc",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Thanks to knitr and pandoc",
    "text": "Thanks to knitr and pandoc\n\n\n\n\n\n\n\n\nknitr executes the code and coverts the .qmd to .md\npandoc renders the .md file to the output format you want"
  },
  {
    "objectID": "week11/index.html#learning-more-about-creating-quarto-documents",
    "href": "week11/index.html#learning-more-about-creating-quarto-documents",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Learning more about creating Quarto documents",
    "text": "Learning more about creating Quarto documents\nWhen we have figures or plots in our reports it is a great idea to set up some global options at the beginning of our document:\nKeeping our R figures inside a folder\n---\ntitle: \"My Report\"\nauthor: \"Michael Lydeamore\"\nformat:\n  html:\n    keep_md: true\n---"
  },
  {
    "objectID": "week11/index.html#inserting-figures",
    "href": "week11/index.html#inserting-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Inserting figures",
    "text": "Inserting figures\nUsing markdown syntax:\n\n![Caption](path-to-image-here)\n\nUsing Knitr syntax\n\nknitr::include_graphics(\"images/fig2.png\")"
  },
  {
    "objectID": "week11/index.html#displaying-figures",
    "href": "week11/index.html#displaying-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Displaying figures",
    "text": "Displaying figures\nOptions inside your R code chunks\n\nfig-align: alignment of the figures in the report with options default, center, left, or right\nfig-cap: captions\nfig-height & fig-width: size of the figure in inches\nout-height & out-width: size of your plot in the final file. Useful to resize your figures by say 50%"
  },
  {
    "objectID": "week11/index.html#computer-paths-absolute-and-relative-paths",
    "href": "week11/index.html#computer-paths-absolute-and-relative-paths",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Computer paths: Absolute and Relative Paths",
    "text": "Computer paths: Absolute and Relative Paths\nAn absolute or full path begins with a drive letter followed by a colon, such as D: or /users.\n\nWindows: C:\\documents\\charlie\nMac/linux: /Users/documents/courses/ETC5513\n\n\nA relative path refers to a location that is relative to a current directory:\n\nETC5513/exercise.Rmd\n\n(no matter where the folder sits things can actually run)\nIt is essential to understand where your directories and files are within your computer. Having clarity about that and the projects file architecture gives you total control about its organization"
  },
  {
    "objectID": "week11/index.html#r-rstudio-projects",
    "href": "week11/index.html#r-rstudio-projects",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R/ Rstudio projects",
    "text": "R/ Rstudio projects\n\nEach project has a unique working directory\nClean file system: all files related to a single project should be in the same folder\n\ndata: typically is a folder\ncode\nfigures: typically is a folder\nnotes\n\nFile path discipline: all paths should be relative to the project’s folder\nRefer to the computer location where files and folders are.\nRemember, absolute paths are not reproducible"
  },
  {
    "objectID": "week11/index.html#rstudio-projects",
    "href": "week11/index.html#rstudio-projects",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio projects",
    "text": "Rstudio projects\nRStudio Projects are associated with R working directories.\nYou can create an RStudio project:\n\nIn a brand new directory\nIn an existing directory where you already have R code and data\nFrom a version control repository\n\nRead more on Rstudio projects here\nInside Rstudio how do we create a new project?\nFile &gt; New project &gt; (Few options)"
  },
  {
    "objectID": "week11/index.html#rstudio-projects-advantages",
    "href": "week11/index.html#rstudio-projects-advantages",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio projects advantages",
    "text": "RStudio projects advantages\nWhen a new project is created RStudio:\n\nCreates a project file (with an .Rproj extension) within the project directory.\nThis file can also be used as a shortcut for opening the project directly from the filesystem.\nCreates a hidden directory (named .Rproj.user) where project-specific temporary files (e.g. auto-saved source documents, window-state, etc.) are stored.\nLoads the project into RStudio and display its name in the Projects toolbar"
  },
  {
    "objectID": "week11/index.html#different-version-control-systems",
    "href": "week11/index.html#different-version-control-systems",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different Version control Systems",
    "text": "Different Version control Systems\n\n\n\n\n\n\n\n\n\nThese systems fully mirror the repository, including its full history in various servers/locations\nIf any server malfunction, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.\nEvery clone is really a full backup of all the data."
  },
  {
    "objectID": "week11/index.html#distributed-version-control-git",
    "href": "week11/index.html#distributed-version-control-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Distributed Version Control: Git",
    "text": "Distributed Version Control: Git\nWe use a distributed version control called Git"
  },
  {
    "objectID": "week11/index.html#git-overview-in-a-nutshell",
    "href": "week11/index.html#git-overview-in-a-nutshell",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git overview in a nutshell",
    "text": "Git overview in a nutshell\nLet’s think of the connections between the different versions of an R project as a tree (Git tree).\n\n\n\nBeginning of the project is at the bottom of the tree\nWhite circles represent each version of the project\nWe have what we call main (default branch)\nWe have branches that appeared and then merged with main with the main"
  },
  {
    "objectID": "week11/index.html#git-tree-and-snapshots-database",
    "href": "week11/index.html#git-tree-and-snapshots-database",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git tree and Snapshots (Database)",
    "text": "Git tree and Snapshots (Database)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIllustration source: Begining Git and GitHub"
  },
  {
    "objectID": "week11/index.html#our-friend-the-command-line-interface",
    "href": "week11/index.html#our-friend-the-command-line-interface",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Our friend: The Command Line Interface",
    "text": "Our friend: The Command Line Interface\nAlso known as the Shell, command line interface (cli) or terminal is an interface for typing commands to interact directly with a computer’s operating system."
  },
  {
    "objectID": "week11/index.html#git-and-command-line",
    "href": "week11/index.html#git-and-command-line",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git and Command Line",
    "text": "Git and Command Line\nLearn how to use the shell/command line interface!\nWhy??\n\nWe will use the command line interface to interact with Git and with GitHub\nThe shell or command line interface is an interface where the user types commands.\nThis interface allows us to control our computer using commands entered via our keyboard.\nThat means that instead of using a graphical user interface (GUI) + our mouse to open and close programs, create folders and moving files we are going to type commands."
  },
  {
    "objectID": "week11/index.html#components-of-a-git-repository-visually",
    "href": "week11/index.html#components-of-a-git-repository-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Components of a Git repository: Visually",
    "text": "Components of a Git repository: Visually"
  },
  {
    "objectID": "week11/index.html#three-git-states",
    "href": "week11/index.html#three-git-states",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Three Git States",
    "text": "Three Git States\nGit has three main states that your files can reside in: modified, staged, and committed:\n\nModified: you have changed the file but have not committed it to your database yet.\nStaged: you have marked a modified file in its current version to go into your next commit snapshot.\nCommitted: the data is safely stored in your local database.\n\nThis leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory."
  },
  {
    "objectID": "week11/index.html#git-recap",
    "href": "week11/index.html#git-recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git recap",
    "text": "Git recap\n\nTracking all the changes to a project\nAllows you to go back and forth between versions\nCheck files history\nTag specific versions for quick referencing\nReview changes made by collaborators in the project\nCreate project branches that allow you to work on the project withoutinterfering with the main project\nMerging branches to main project\n\nTo interact between our projects and Git, we are going to use the shell/command line interface"
  },
  {
    "objectID": "week11/index.html#github-is-our-remote-repository",
    "href": "week11/index.html#github-is-our-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub is our remote repository",
    "text": "GitHub is our remote repository\n\n\nGitHub is an interface and cloud hosting service built on top of the Git version control system.\nGit does the version control and GitHub stores the data remotely.\nGitHub makes your projects accessible on a fully feature project website\n\nMore info about GitHub here"
  },
  {
    "objectID": "week11/index.html#git-repo-and-remote-repository",
    "href": "week11/index.html#git-repo-and-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git repo and remote repository",
    "text": "Git repo and remote repository"
  },
  {
    "objectID": "week11/index.html#github-workflow-visual-example",
    "href": "week11/index.html#github-workflow-visual-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub Workflow: Visual example",
    "text": "GitHub Workflow: Visual example"
  },
  {
    "objectID": "week11/index.html#from-clone-to-push-into-the-remote-main-branch",
    "href": "week11/index.html#from-clone-to-push-into-the-remote-main-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "From clone to push into the remote main branch",
    "text": "From clone to push into the remote main branch\n\ngit clone: is a Git command line utility which is used to target an existing repository and create a clone, or copy of the target repository.\ngit add: command adds a change in the working directory to the staging area.\ngit commit -m: The git commit command captures a snapshot of the project’s currently staged changes. (m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\ngit push origin main: The git push command is used to upload local repository content to a remote repository, in this case to the main branch."
  },
  {
    "objectID": "week11/index.html#git-recap-1",
    "href": "week11/index.html#git-recap-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git recap",
    "text": "Git recap\n\nTracking all the changes to a project\nAllows you to go back and forth between versions\nCheck files history\nTag specific versions for quick referencing\nReview changes made by collaborators in the project\nCreate project branches that allow you to work on the project without interfering with the main project\nMerging branches to main project\n\nTo interact between our projects and Git, we are going to use the shell/command line interface"
  },
  {
    "objectID": "week11/index.html#github-is-our-remote-repository-1",
    "href": "week11/index.html#github-is-our-remote-repository-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub is our remote repository",
    "text": "GitHub is our remote repository"
  },
  {
    "objectID": "week11/index.html#creating-a-repo-on-github",
    "href": "week11/index.html#creating-a-repo-on-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a repo on GitHub",
    "text": "Creating a repo on GitHub\n\n\n\nLogin into GitHub\nClick the ‘+’ icon on the top right on the menu bar and select ‘New Repository’."
  },
  {
    "objectID": "week11/index.html#tracked-and-untracked-files",
    "href": "week11/index.html#tracked-and-untracked-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tracked and untracked files",
    "text": "Tracked and untracked files\n\nIn a git repository tracked files are those which are part of the git repository\nHowever, we can also have untracked files for which their history is not tracked\nTracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about.\nUntracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area.\n\nMore info here"
  },
  {
    "objectID": "week11/index.html#general-workflow-via-terminal",
    "href": "week11/index.html#general-workflow-via-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "General Workflow (via Terminal)",
    "text": "General Workflow (via Terminal)\nOnce you have cloned the repo, each time you work on the project (via the terminal/command line):\n\ngit pull: used to fetch and download content from a remote repository and immediately update the local repository to match that content.\ngit status: displays the state of the working directory and the staging area\ngit add file_name: adds changes in the working directory to the staging area)\ngit commit -m \"Message\": used to create a snapshot of the staged changes along a timeline of a Git project history\ngit push origin branch name: used to upload the local repository content to a remote repository in GitHub"
  },
  {
    "objectID": "week11/index.html#cheat-sheet-on-how-to-use-the-terminal-for-git",
    "href": "week11/index.html#cheat-sheet-on-how-to-use-the-terminal-for-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Cheat sheet on how to use the terminal for Git",
    "text": "Cheat sheet on how to use the terminal for Git\nExcellent summary about the commands that will be using can be found here"
  },
  {
    "objectID": "week11/index.html#rstudio-and-github",
    "href": "week11/index.html#rstudio-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio and GitHub",
    "text": "Rstudio and GitHub\nThe status/staging panel in Rstudio:"
  },
  {
    "objectID": "week11/index.html#rstudio-and-github-1",
    "href": "week11/index.html#rstudio-and-github-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio and GitHub",
    "text": "Rstudio and GitHub\nRStudio keeps git constantly scanning the project directory to find any files that have changed or which are new.\nBy clicking a file’s little “check-box” you can stage it."
  },
  {
    "objectID": "week11/index.html#rstudio-and-github-2",
    "href": "week11/index.html#rstudio-and-github-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio and GitHub",
    "text": "Rstudio and GitHub\nUnderstanding the symbols in the Rstudio Git pane:\n\nBlue-M: a file that is already under version control that has been modified.\nOrange-?: a file that is not under version control (yet…)\nGreen-A: a file that was not under version control, but which has been staged to be committed.\nRed-D: a file under version control has been deleted. To make it really disappear, you have to stage its disappearance and commit.\nPurple-R: a file that was renamed. (Note that git in Rstudio seems to be figuring this out on its own.)"
  },
  {
    "objectID": "week11/index.html#branches",
    "href": "week11/index.html#branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Branches",
    "text": "Branches"
  },
  {
    "objectID": "week11/index.html#create-branches-using-the-terminalshellcli",
    "href": "week11/index.html#create-branches-using-the-terminalshellcli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Create branches using the Terminal/Shell/CLI",
    "text": "Create branches using the Terminal/Shell/CLI\nUsing git branch and git checkout:\n\ngit branch show us the branches we have in our repo and marked our current branch with *\ngit branch newbranch_name creates a new branch but does not move the HEAD of the repo there.\ngit checkout newbranch_name moves the HEAD to newbranch_name"
  },
  {
    "objectID": "week11/index.html#creating-branches",
    "href": "week11/index.html#creating-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating branches",
    "text": "Creating branches\nUsing the checkout command:\n\ngit checkout -b newbranch_namne: creates a new branch and moves the repo HEAD to this branch\nYou can confirm it by using git branch to see in which branch you are currently in\nChecking out a branch updates the files in the working directory to match the version stored in that branch\nIt tells Git to record all new commits on that branch."
  },
  {
    "objectID": "week11/index.html#merging-branches-successfully",
    "href": "week11/index.html#merging-branches-successfully",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches successfully",
    "text": "Merging branches successfully\nSuppose we have two branches: main and new_development\n\nFor merging: go to main branch git checkout main\ngit merge new_development -m \"Merging new_development into main\"\n\nRemember that if you have VSCode installed and you do git merge new_development then the VSCode editor will open so that you can type your message.\nIf those steps are successful your new_development branch will be fully integrated within the main branch."
  },
  {
    "objectID": "week11/index.html#change-branch-name",
    "href": "week11/index.html#change-branch-name",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Change branch name",
    "text": "Change branch name\nBefore you push the new branch to the remote repo:\ngit branch -m original_name new_name\nIf you want to renamed a branch that has already been pushed to the remote repo:\n\nRename the branch locally git branch -m old_name_branch new_name\ngit push origin -u newname\nDelete the old_name_branch: git push origin --delete old_name_branch"
  },
  {
    "objectID": "week11/index.html#stash-changes-apply-and-pop",
    "href": "week11/index.html#stash-changes-apply-and-pop",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Stash changes: Apply and pop",
    "text": "Stash changes: Apply and pop\nThe git stash command takes your uncommitted changes and saves them in the git repo away for later use.\nBringing stash into the repo\n\ngit stash\ngit stash apply\ngit stash pop\ngit stash list to see the list of the stashes"
  },
  {
    "objectID": "week11/index.html#apply",
    "href": "week11/index.html#apply",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Apply",
    "text": "Apply\ngit stash apply will take the changes saved in your stash and apply them into the working directory of your current branch. In addition, the changes are kept in the stash.\nThis might be useful when you want to apply the same changes into different branches."
  },
  {
    "objectID": "week11/index.html#pop",
    "href": "week11/index.html#pop",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pop",
    "text": "Pop\ngit stash pop will do the same as apply but will delete the stash after applying the changes. git stash pop will apply the changes into your working copy.\n\n\n\n\n\n\nTip\n\n\nStash is not a substitute for committing changes"
  },
  {
    "objectID": "week11/index.html#gitignore",
    "href": "week11/index.html#gitignore",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "gitignore",
    "text": "gitignore\n\nIgnored files are tracked in a special file named .gitignore that is checked in at the root of your repository.\nThere is no explicit git ignore command: instead Git uses a .gitignore file which must be edited and committed by hand when you have new files that you wish to ignore.\n.gitignore files contain patterns that are matched against file names in your repository to determine whether or not they shouldbe ignored."
  },
  {
    "objectID": "week11/index.html#example-of-gitignore-patterns",
    "href": "week11/index.html#example-of-gitignore-patterns",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of gitignore patterns",
    "text": "Example of gitignore patterns\n\nSource here"
  },
  {
    "objectID": "week11/index.html#example-of-a-gitignore-file",
    "href": "week11/index.html#example-of-a-gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of a gitignore file",
    "text": "Example of a gitignore file\n\nSource here"
  },
  {
    "objectID": "week11/index.html#rebase-in-practice",
    "href": "week11/index.html#rebase-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebase in practice",
    "text": "Rebase in practice\nAssume the following history exists and the current branch is “Feature”\n          A---B---C Feature\n         /\n    D---E---F---G main\nFrom this point, the result of either of the following commands:\ngit checkout Feature\ngit rebase main\ngit rebase main Feature\n                  A'--B'--C' Feature\n                  /\n    D---E---F---G main"
  },
  {
    "objectID": "week11/index.html#git-rebase-and-merge",
    "href": "week11/index.html#git-rebase-and-merge",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git rebase and merge",
    "text": "Git rebase and merge\nMerging is a non-destructive operation. The existing branches are not changed in any way. This avoids all of the potential problems of rebasing.\nRebasing moves the entire Feature branch to begin on the tip of the main branch, incorporating all of the new commits into main.\nRebasing re-writes the project history by creating brand new commits for each commit in the original branch. Produces cleaner project history.\nHowever, it creates problems with safety and traceability\nGolden rule for rebase: Never use it on public branches (main in collaborative projects)."
  },
  {
    "objectID": "week11/index.html#why-do-we-fork-a-repository",
    "href": "week11/index.html#why-do-we-fork-a-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Why do we fork a repository?",
    "text": "Why do we fork a repository?\nA fork is a copy of a repository\nForking a repository allows you to freely experiment with changes without affecting the original project.\nMost commonly, forks are used to either propose changes to someone else project or to use someone else project as a starting point for your own project.\nMore info here"
  },
  {
    "objectID": "week11/index.html#differences-between-forking-and-cloning-a-repo",
    "href": "week11/index.html#differences-between-forking-and-cloning-a-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Differences between forking and cloning a repo",
    "text": "Differences between forking and cloning a repo\n\nA fork is a copy of someone elses GitHub repository saved to your own GitHub account. It allows you to experiment with changes without affecting the original project.\nA fork acts as a between the original repository and your personal one.\nIt will also allow you to interact between your forked copy and the original repo\nWhen you clone a GitHub repository, you are creating a local copy of that repo on your computer\nThat allows you to work on that repo locally and sync between both your local repo and your remote repo"
  },
  {
    "objectID": "week11/index.html#what-is-a-pull-request",
    "href": "week11/index.html#what-is-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is a Pull request?",
    "text": "What is a Pull request?\n\nWe use GitHub to share our code and projects with others.\nThere are situations when another person make changes into your code and wants you to consider those changes.\nExamples: Fixing a problem/bug or add new functionality into the repo.\nWe achieve this by sending a request to the repo’s owner to pull/merge these changes into the owner’s original GitHub repo\n\nThat request is called a pull request"
  },
  {
    "objectID": "week11/index.html#pull-request-visually",
    "href": "week11/index.html#pull-request-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request visually",
    "text": "Pull request visually"
  },
  {
    "objectID": "week11/index.html#forked-repo",
    "href": "week11/index.html#forked-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Forked repo",
    "text": "Forked repo"
  },
  {
    "objectID": "week11/index.html#latex",
    "href": "week11/index.html#latex",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Latex",
    "text": "Latex\n\nLatex more info"
  },
  {
    "objectID": "week11/index.html#latex-template",
    "href": "week11/index.html#latex-template",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Latex template",
    "text": "Latex template"
  },
  {
    "objectID": "week11/index.html#integrate-a-latex-template-into-a-quarto-file",
    "href": "week11/index.html#integrate-a-latex-template-into-a-quarto-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Integrate a latex template into a Quarto file",
    "text": "Integrate a latex template into a Quarto file\nThere are different ways:\n\nIf the file features are not too complicated. We can simply add some of the necessary packages into our YAML preamble."
  },
  {
    "objectID": "week11/index.html#integrate-a-latex-template-into-an-rmd-file",
    "href": "week11/index.html#integrate-a-latex-template-into-an-rmd-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Integrate a latex template into an Rmd file",
    "text": "Integrate a latex template into an Rmd file\n\nWe can use preamble.tex:"
  },
  {
    "objectID": "week11/index.html#reference",
    "href": "week11/index.html#reference",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reference",
    "text": "Reference\nLaTeX in 24 Hours A Practical Guide for Scientific Writing"
  },
  {
    "objectID": "week11/index.html#commits-hash-values-and-sha-numbers",
    "href": "week11/index.html#commits-hash-values-and-sha-numbers",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commits, hash values and SHA numbers",
    "text": "Commits, hash values and SHA numbers\n\ngit log: allow us go back into our project history to see who contributed what, find out past issues or problems and revert problematic changes.\n\ncommit 8cfaee1e447d8e83d745b51ffcd310465afb76b1\nAuthor: Patricia Menendez &lt;patricia.menendez@monash.edu&gt;\nDate:   Sat Apr 4 15:49:54 2020 +1000\n   \n    Uploading Week4 slides"
  },
  {
    "objectID": "week11/index.html#commits-and-sha-numbers",
    "href": "week11/index.html#commits-and-sha-numbers",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commits and SHA numbers",
    "text": "Commits and SHA numbers\ngit log --oneline: condenses each commit to a single line\n3a5bc86 W3 cli updates\n4d1b022 W3 shell update\nWe can also use git log --pretty=oneline"
  },
  {
    "objectID": "week11/index.html#detached-head",
    "href": "week11/index.html#detached-head",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Detached HEAD",
    "text": "Detached HEAD\nDetached HEAD state gives you the power to check out any commit and explore the older state of a repository without having to create a local branch.\nAny commits made in a detached HEAD state will be lost when you check out any branch.\nSolution: Create a branch to keep commits"
  },
  {
    "objectID": "week11/index.html#pull-commit-from-the-log-into-our-environment",
    "href": "week11/index.html#pull-commit-from-the-log-into-our-environment",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull commit from the log into our environment",
    "text": "Pull commit from the log into our environment\ngit checkout 8cfaee1e447d8e8\nYou are in 'detached HEAD' state. You can look around, make experimental\n   changes and commit them, and you can discard any commits you make in this\n   state without impacting any branches by performing another checkout.\ngit checkout -b new_branch_name"
  },
  {
    "objectID": "week11/index.html#stage-and-unstage-files",
    "href": "week11/index.html#stage-and-unstage-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Stage and unstage files",
    "text": "Stage and unstage files\ngit reset filename git reset"
  },
  {
    "objectID": "week11/index.html#editamend-previous-commit",
    "href": "week11/index.html#editamend-previous-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Edit/Amend previous commit",
    "text": "Edit/Amend previous commit\nIf you have not pushed the commit: - git commit --amend: will open your VS code editor so you can amend the commit - git push origin main"
  },
  {
    "objectID": "week11/index.html#git-reset---soft",
    "href": "week11/index.html#git-reset---soft",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git reset --soft",
    "text": "git reset --soft\nImagine that you have added two files in your latest commit and you want to make a modification in one of the files.\n\nIn this case we can use git reset --soft HEAD~1 to undo our last commit and include additional modifications into the file.\nIn this case, when we undo the commit the file is still in the repo with changes to be committed but the commit has been removed.\nWe have undone the last commit by preserving the changes done to the files in the index (staging area).\nThen we can fix the file and commit the changes again."
  },
  {
    "objectID": "week11/index.html#git-reset---hard",
    "href": "week11/index.html#git-reset---hard",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git reset --hard",
    "text": "git reset --hard\n\nIf we want to undo the last commit and discard all changes in the working directory and index (staging area), we can execute the git reset command with the –-hard option.\nAs before we specify the commit before HEAD (HEAD~1).\n\n\n\n\n\n\n\nCaution\n\n\nWhen we use git reset --hard all the changes will be removed from the working directory and from the index (staging area)."
  },
  {
    "objectID": "week11/index.html#git-reset---mixed",
    "href": "week11/index.html#git-reset---mixed",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git reset --mixed",
    "text": "git reset --mixed\n\nIf we want to undo the last Git commit, keep changes in the working directory but NOT in the index (staging area), we can use the git reset --mixed option.\nFor the last commit we will need to write git reset --mixed HEAD~1\nThe git reset --mixed option is combination of soft and hard reset."
  },
  {
    "objectID": "week11/index.html#undoing",
    "href": "week11/index.html#undoing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Undoing",
    "text": "Undoing\nThe git revert command can be considered an ‘undo’ type command, however, it is not a traditional undo operation. Instead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.\nYou can think of it as a “rollback”: it points your local environment back to a previous commit. Your “local environment,” refers to your local repository, staging area, and working directory"
  },
  {
    "objectID": "week11/index.html#removing-files",
    "href": "week11/index.html#removing-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Removing files",
    "text": "Removing files\n\nIf the files are untracked you can just remove them: via the terminal or using your OS\nIf the files are tracked:\n\nRemoving files and directories/folders:\ngit rm file.txt\ngit rm -r Data\ngit commit -m \"Delete file.txt\"\ngit status"
  },
  {
    "objectID": "week11/index.html#more-on-commits",
    "href": "week11/index.html#more-on-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More on commits",
    "text": "More on commits\n\nOne line commit (we need to main that a little bit more!)\nWe can add more text into any commit and many times we should be doing that\nWe can do that using VSCode\n\nCommit structure:\nFirst line Blank Line Rest of the text"
  },
  {
    "objectID": "week11/index.html#commits-structure-example",
    "href": "week11/index.html#commits-structure-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commits structure example",
    "text": "Commits structure example"
  },
  {
    "objectID": "week11/index.html#large-files-in-git-and-github",
    "href": "week11/index.html#large-files-in-git-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Large files in Git and GitHub",
    "text": "Large files in Git and GitHub\n\nFiles larger than 100 MB need to be dealt with care in GitHub\nSolution: Git LFS\n\nGit Large File Storage lets you store them on a remote server such as GitHub.\nMore info here\n\n\n\n\n\n\nTip\n\n\nGit Large File Storage (LFS) replaces large files such as audio samples, videos, data sets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise."
  },
  {
    "objectID": "week11/index.html#git-lfs-in-practice-summary",
    "href": "week11/index.html#git-lfs-in-practice-summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git LFS in practice summary",
    "text": "Git LFS in practice summary\n\ngit lfs install: You only need to run this once per repo.\ngit lfs track \"*.csv\": In each Git repository where you want to use Git LFS, select the file types you would like Git LFS to manage\ngit add .gitattributes: make sure “.gitattributes” is tracked\n\nThen, continue as usual:\n\ngit add file.csv\ngit commit -m \"Add data file\"\ngit push origin main"
  },
  {
    "objectID": "week11/index.html#git-lfs-in-practice-summary-1",
    "href": "week11/index.html#git-lfs-in-practice-summary-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git LFS in practice summary",
    "text": "Git LFS in practice summary\nIf for some reason you have staged/committed a large file before you run the work flow above you can use:\n\ngit reset --soft HEAD~1"
  },
  {
    "objectID": "week11/index.html#git-tags",
    "href": "week11/index.html#git-tags",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git tags",
    "text": "Git tags\nTags are references that point to specific points in Git history\nExample: Specific report release, package release\n\nA tag is like a branch that doesn’t change.\nUnlike branches, tags (after being created) have no further history of commits\n\nGreat tutorial on tags here"
  },
  {
    "objectID": "week11/index.html#git-tags-example",
    "href": "week11/index.html#git-tags-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git tags example",
    "text": "Git tags example"
  },
  {
    "objectID": "week11/index.html#revisiting-git-fetch",
    "href": "week11/index.html#revisiting-git-fetch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Revisiting git fetch",
    "text": "Revisiting git fetch\n\ngit pull is a combination of both commands git fetch and git merge\nIf you are working on your own, git pull would be ok in most cases.\nHowever, if you are collaborating with other people who might be simultaneously working in the repo, using git pull might not be a good idea!\n\nIn that case, it is much better to use git fetch first to see what is happening in the remote repository and to synchronize your repo by merging the changes."
  },
  {
    "objectID": "week11/index.html#how-does-fetch-work",
    "href": "week11/index.html#how-does-fetch-work",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How does fetch work?",
    "text": "How does fetch work?\n\ngit fetch downloaded the new B commit however our local working directory is not updated and the head of our main branch is still pointing to commit A!"
  },
  {
    "objectID": "week11/index.html#how-do-we-merge-those-branches",
    "href": "week11/index.html#how-do-we-merge-those-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How do we merge those branches?",
    "text": "How do we merge those branches?\nWe need to combined main branch with the remote tracking origin/main branch. How?\n\nBy merging!\n\nFirst we need to move into the main branch and then merge origin/main.\ngit checkout main\ngit merge origin/main\n\nIf the branches have not diverged, we can merge without conflict via a fast merge.\nIf the branches have diverged, we will need to resolve conflicts."
  },
  {
    "objectID": "week11/index.html#very-useful-commands-for-fetching",
    "href": "week11/index.html#very-useful-commands-for-fetching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Very useful commands for fetching",
    "text": "Very useful commands for fetching\n\ngit remote: lets you create, view, and delete connections to remote repositories)\ngit branch -vv allows you to check the status of your local and remote branches in relation to each other.\ngit fetch origin fetch the changes from remote origin\ngit branch -a: all the branches available in the local repository + all the branches fetched from the remote.\n\nThe branches fetched from the remote origin would be preceded by remotes/origin/"
  },
  {
    "objectID": "week11/index.html#licensing-a-repository",
    "href": "week11/index.html#licensing-a-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Licensing a repository",
    "text": "Licensing a repository\nPublic repos in GitHub make your work publicly available and therefore it is important to establish how your work should be acknowledged if someone else wants to use it.\n“Public repositories on GitHub are often used to share open source software. For your repository to truly be open source, you’ll need to license it so that others are free to use, change, and distribute the software.””\nMore info here"
  },
  {
    "objectID": "week11/index.html#choose-an-open-source-license",
    "href": "week11/index.html#choose-an-open-source-license",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Choose an open source license",
    "text": "Choose an open source license\n\nSource here"
  },
  {
    "objectID": "week11/index.html#no-license",
    "href": "week11/index.html#no-license",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "No license",
    "text": "No license\n\nSource here"
  },
  {
    "objectID": "week11/index.html#light-weight-dependency-management",
    "href": "week11/index.html#light-weight-dependency-management",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Light weight dependency management",
    "text": "Light weight dependency management\n\nThe idea is to create project-local library to ensure that projects gets its own unique library of R packages!"
  },
  {
    "objectID": "week11/index.html#how-does-the-renv-r-package-work",
    "href": "week11/index.html#how-does-the-renv-r-package-work",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How does the renv R package work?",
    "text": "How does the renv R package work?\n\nGives each R projects its own project-local library.\nProvides and easy way to connect R sessions to use a specific project-local library\nProvides tools for managing the R packages installed in these project-local libraries"
  },
  {
    "objectID": "week11/index.html#workflow-summary-for-light-weight-dependency-management-using-renv-package",
    "href": "week11/index.html#workflow-summary-for-light-weight-dependency-management-using-renv-package",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Workflow summary for light weight dependency management using renv package",
    "text": "Workflow summary for light weight dependency management using renv package\nIn the R console:\n\nrenv::init() to initialize a project with a project-local library\nrenv::snapshot() to save the project-local library’s sate\nrenv::restore() to restore the project-local library’s state"
  },
  {
    "objectID": "week11/index.html#tools-for-r-and-beyond",
    "href": "week11/index.html#tools-for-r-and-beyond",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tools for R and beyond",
    "text": "Tools for R and beyond\nYou have learned version control: This works for any programming language!"
  },
  {
    "objectID": "week1/workshop/index.html",
    "href": "week1/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Getting to know your colleagues\nGetting setup with R, RStudio and GitHub"
  },
  {
    "objectID": "week1/workshop/index.html#objectives",
    "href": "week1/workshop/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Getting to know your colleagues\nGetting setup with R, RStudio and GitHub"
  },
  {
    "objectID": "week1/workshop/index.html#install-r-on-your-computer",
    "href": "week1/workshop/index.html#install-r-on-your-computer",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Install R on your computer",
    "text": "Install R on your computer\nR is maintained by an international team of developers and is available via The Comprehensive R Archive Network (CRAN) webpage. Please select the appropriate download option depending on your operating system: Windows, Mac, or Linux.\n\n\n\n\n\n\nR\n\n\n\nInstall R here\n\n\nYou can find some further information about how to install R here."
  },
  {
    "objectID": "week1/workshop/index.html#install-rstudio-on-your-computer",
    "href": "week1/workshop/index.html#install-rstudio-on-your-computer",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Install RStudio on your computer",
    "text": "Install RStudio on your computer\nRStudio is an integrated development environment for R, a programming language for statistical computing and graphics. It is available in two formats: RStudio Desktop is a regular desktop application while RStudio Server runs on a remote server and allows accessing RStudio using a web browser. (Source: Wikipedia)\n\n\n\n\n\n\nRStudio\n\n\n\nInstall RStudio here"
  },
  {
    "objectID": "week1/workshop/index.html#get-yourself-a-free-github-student-developer-pack",
    "href": "week1/workshop/index.html#get-yourself-a-free-github-student-developer-pack",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Get yourself a free GitHub Student Developer pack",
    "text": "Get yourself a free GitHub Student Developer pack\nSign up for a free GitHub Student Developer Pack. You will have to use your Monash email account (which you can add to your existing GitHub account if you like) and make sure you remember your login details!\nTo sign up, click here."
  },
  {
    "objectID": "week1/workshop/index.html#getting-to-know-more-about-r",
    "href": "week1/workshop/index.html#getting-to-know-more-about-r",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Getting to know more about R",
    "text": "Getting to know more about R\nHave a read about R here."
  },
  {
    "objectID": "week1/workshop/index.html#get-a-chatgpt-account",
    "href": "week1/workshop/index.html#get-a-chatgpt-account",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Get a ChatGPT account",
    "text": "Get a ChatGPT account\nSign up for a free ChatGPT account here. You can use your Monash email address if you like.\nAsk ChatGPT to give you an example of R code, then copy the code into RStudio and execute it. Compare with your colleagues at your table. Is it the same? Is it different? Is it correct?"
  },
  {
    "objectID": "week1/workshop/index.html#r-in-practice",
    "href": "week1/workshop/index.html#r-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R in practice",
    "text": "R in practice\nThere are plenty of resources to start getting to know how R works. Here are a couple:\n\nStartR\nPosit (R) Primers"
  },
  {
    "objectID": "week1/index.html#etc5513-title",
    "href": "week1/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nIntroduction to collaborative and reproducible practices\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 1\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week1/index.html#aim",
    "href": "week1/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Aim\n\n\n\nUnderstand the aims and structure of the unit\nExplain the need for reproducible and collaborative practices\nIntroduce the main tools that we will be using during lectures and tutorials\nGet to know your classmates"
  },
  {
    "objectID": "week1/index.html#etc5513-teaching-team",
    "href": "week1/index.html#etc5513-teaching-team",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "👩🏻‍🏫 ETC5513 Teaching Team",
    "text": "👩🏻‍🏫 ETC5513 Teaching Team\n\n\n\nDr. Michael Lydeamore\nLecturer & Chief Examiner\n\n\n\nNaveen Kaushik\nTutor\n\n\n\n\n\n\n\n\n\nContacting the teaching team\n\n\n\nFor private matters, contact michael.lydeamore@monash.edu using your Monash student email and citing the unit name.\nFor non-private matters, you should post this in the Ed discussion board."
  },
  {
    "objectID": "week1/index.html#etc5513-teaching-team-1",
    "href": "week1/index.html#etc5513-teaching-team-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "👩🏻‍🏫 ETC5513 Teaching Team",
    "text": "👩🏻‍🏫 ETC5513 Teaching Team\nMost material in this course was developed by\n\n\nDr. Patricia Menendez\n\n\nPatricia is a strong believer and trailblazer in reproducible research."
  },
  {
    "objectID": "week1/index.html#etc5513-learning-objectives",
    "href": "week1/index.html#etc5513-learning-objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🎯 ETC5513 Learning Objectives",
    "text": "🎯 ETC5513 Learning Objectives\n\n\n\n\n\n\nLearning objectives\n\n\n\nDevelop skills to create reproducible data analyses, reports and presentations.\nUnderstand the operation of version control systems.\nAdvance use of Git and GitHub.\nUtilize version control to integrate data analysis efforts of team members.\nEffectively work with a group to construct collaborative data science projects.\n\n\n\n\nAll that combined with the learning of statistical concepts!\n\n\n\n\n\n\n\nTip\n\n\nPlease participate during the lectures and tutorials. The success of the unit depends not only on the teaching team but also you as part of this unit’s team."
  },
  {
    "objectID": "week1/index.html#etc5513-program",
    "href": "week1/index.html#etc5513-program",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513 Program",
    "text": "ETC5513 Program\n\nCourse introduction to collaborative and reproducible practices\nReproducible reports using R markdown\nIntroduction to version control systems: Git and GitHub\nReproducible reporting using R markdown, Git and GitHub\nDeeper git knowledge, stashing and tools\nReproducible reporting and version control systems\nWorkflows for reproducible data analysis\nReproducible reporting for specialized and broad audiences\nAdvanced collaborative practices\nEven more advanced collaborative practices\nSummary and Recap"
  },
  {
    "objectID": "week1/index.html#etc5513-unit-structure",
    "href": "week1/index.html#etc5513-unit-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🏛️ ETC5513 unit structure",
    "text": "🏛️ ETC5513 unit structure\n\n\nStart with individual projects\n\n\n\n\n\nWill continue with a class group project\n\n\n\n\n\nFinally, you will work on yuour own projects"
  },
  {
    "objectID": "week1/index.html#unit-structure-and-resources",
    "href": "week1/index.html#unit-structure-and-resources",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Unit structure and resources",
    "text": "Unit structure and resources\n\n2 hour lectures are interactive sessions:\n\nduring the lecture we demonstrate, discuss and complete tasks in small groups\n\n1 hour workshop to implement and upskill before the tutorial\n1 hour tutorial → only go to the one you are assigned to!\n\nThe lectures will be a combination of presentations with interactive exercises."
  },
  {
    "objectID": "week1/index.html#unit-structure-and-resources-1",
    "href": "week1/index.html#unit-structure-and-resources-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Unit structure and resources",
    "text": "Unit structure and resources\nEach lecture will commence with a open frame (5 minutes), where you can talk about your learning, share comments, issues and resources with the rest of the class.\nThat time can also be used for questions (as can any other time in the lecture).\n\nThe tutorials will be entirely based on computer practicals and you will be working individually as well as in groups."
  },
  {
    "objectID": "week1/index.html#lecture-structure",
    "href": "week1/index.html#lecture-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Lecture structure",
    "text": "Lecture structure\n\nOpen Frame\nRecap from previous lecture\nSummary of today’s lecture content\nLecture delivery"
  },
  {
    "objectID": "week1/index.html#lecture-tips",
    "href": "week1/index.html#lecture-tips",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Lecture tips",
    "text": "Lecture tips\n\nCome prepared to be an active learner\nEngage yourself in the lecture\nShare responsibility for learning\nBring your computer"
  },
  {
    "objectID": "week1/index.html#tutorials",
    "href": "week1/index.html#tutorials",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tutorials",
    "text": "Tutorials\nGo over the material before the tutorial\nGoal is to practice the ideas covered in lectures by working through activies and exercises individually and in groups.\n\n\n\n\n\n\nTip\n\n\n\nYou will get instructions with the tasks that need to be completed during the tutorial\nYour tutors will be there to guide and help you through the activities\nTutorials also rpovide a great opportunity for you to discuss and work with your peers"
  },
  {
    "objectID": "week1/index.html#materials",
    "href": "week1/index.html#materials",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🪵 Materials",
    "text": "🪵 Materials\n\n\n\n\n\n\nUnit website\n\n\n\n rcp.numbat.space\n\n\n\n\n\nLecture slides and tutorial materials are available on the unit website\nLecture videos and assessments will be available on Moodle\n\n\n\n\n\n\n\nNote\n\n\nMaterials are designed to develop your hard and soft skills."
  },
  {
    "objectID": "week1/index.html#consultation-hours",
    "href": "week1/index.html#consultation-hours",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✋ Consultation hours",
    "text": "✋ Consultation hours\n\nMichael: Thursdays 1.00-2.00pm In Person (Building 6 Room 354) and on Zoom\nNaveen Kaushik: Tuesdays 4.00-5.30pm on Zoom\n\nPlease see Moodle for Zoom details"
  },
  {
    "objectID": "week1/index.html#course-assessments",
    "href": "week1/index.html#course-assessments",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💯 Course assessments",
    "text": "💯 Course assessments\n\n3 Assignments:\n\nA1: Released week 3, due week 5: 20%\nA2: Released week 7, due week 9: 30%\nA3: Released week 10, due week 12: 40%\n\nOral interview: Based on W1-W7 content: Week 12: 10%"
  },
  {
    "objectID": "week1/index.html#etc5513-code-of-conduct",
    "href": "week1/index.html#etc5513-code-of-conduct",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513 Code of Conduct",
    "text": "ETC5513 Code of Conduct\n\nPlease feel free to ask questions and share ideas with the class.\nAll questions, suggestions or comments are welcomed and must be respected by the group.\nRemember, while working in teams, clarity, organisation and communication are extremely important\nPlease let me know about suggestions, problems and/or complaints at any time."
  },
  {
    "objectID": "week1/index.html#interactions-with-the-teaching-team",
    "href": "week1/index.html#interactions-with-the-teaching-team",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Interactions with the teaching team",
    "text": "Interactions with the teaching team\n✅ Consultation hours: We are here to help you!\n✅ Ed discussion forum\nGet used to using the forum - helping your peers is a fantastic way to learn."
  },
  {
    "objectID": "week1/index.html#the-classic-analysis-pipeline",
    "href": "week1/index.html#the-classic-analysis-pipeline",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The classic analysis pipeline",
    "text": "The classic analysis pipeline\n\n\nYou carry out your analysis in R, Python or MATLAB (with some code), or perhaps you use Excel\nYou paste you results into your Word document or Google Doc.\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\nWhat is the problem with this approach?"
  },
  {
    "objectID": "week1/index.html#how-about",
    "href": "week1/index.html#how-about",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How about…?",
    "text": "How about…?\nIf one parameter or one number changes in your data?\n\nGAME OVER\n\n\nWe start all over again 😭😭😭\n\n\nMaybe we copy and paste into a new script\n\n\nAfter a week, a month, a year… it gets very hard to remember all the steps!"
  },
  {
    "objectID": "week1/index.html#reproducible-research-and-replicability",
    "href": "week1/index.html#reproducible-research-and-replicability",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducible research and replicability",
    "text": "Reproducible research and replicability\nDefinitions by the USA National Academies of Science, Engineering and Medicine:\n\nReproducibility (“computational reproducibility”) means obtaining consistent computational results using the same input data, computational steps, methods, code, and conditions of analysis.\nReplicability means obtaining consistent results across studies aimed at answering the same scientific question, each of which has obtained its own data\n\nReference here: Report on reproducibility and replicability"
  },
  {
    "objectID": "week1/index.html#combining-text-and-data-analysis-in-the-same-document",
    "href": "week1/index.html#combining-text-and-data-analysis-in-the-same-document",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Combining text and data analysis in the same document",
    "text": "Combining text and data analysis in the same document\n\n\n\n\n\n\nLiterate programming\n\n\nLiterate programming is an approach to writing reports using software that weaves together the source code and text at the time of creation.\n\n\n\nDonald Knuth coined the term literate programming in the 1970s to refer to a source file that could be both run by a computer and “woven” with a formatted presentation document\n\n\nKnuth, 1992, https://www-cs-faculty.stanford.edu/~knuth/lp.html"
  },
  {
    "objectID": "week1/index.html#reproducibility",
    "href": "week1/index.html#reproducibility",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nReproducibility is a way of thinking and approaching projects\n\n\n\n\n\n\nRequires planning\nNeeds extra upfront effort\nDemands us to be organised\nChallenges us to think more broadly\n\n\n\n\nPhoto by Diego PH on Unsplash"
  },
  {
    "objectID": "week1/index.html#reproducible-research",
    "href": "week1/index.html#reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducible research",
    "text": "Reproducible research\n\nWorking to make your research reproducible does require extra upfront effort.\nMaking a project reproducible from the start encourages you to use better work habits.\nIt should push you to bring your data and source code up to a higher level of quality than you might if you “thought ‘no one was looking’” [Donoho, 2010, 386].\nReproducible research needs to be stored so that other researchers can actually access the data and source code.\nChanges are easier to implement especially when using dynamic reproducible documents.\nReproducible research has higher impact."
  },
  {
    "objectID": "week1/index.html#reproducibility-complexity",
    "href": "week1/index.html#reproducibility-complexity",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility complexity",
    "text": "Reproducibility complexity\nComplexity varies\nSome projects require a single tool (be that R, Python, MATLAB or many others) and may only involve one person.\nOthers might involve different teams and require many different tools"
  },
  {
    "objectID": "week1/index.html#project-example",
    "href": "week1/index.html#project-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Project example",
    "text": "Project example\n\n\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "week1/index.html#complex-workflow-example",
    "href": "week1/index.html#complex-workflow-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Complex workflow example",
    "text": "Complex workflow example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.ereefs.org.au/about/"
  },
  {
    "objectID": "week1/index.html#reproducibility-how",
    "href": "week1/index.html#reproducibility-how",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility: How?",
    "text": "Reproducibility: How?\nUsing tools for reproducible research and reporting\n\n\n\n\n\n\n\nPhoto by Todd Quackenbush on Unsplash"
  },
  {
    "objectID": "week1/index.html#dynamic-documents",
    "href": "week1/index.html#dynamic-documents",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Dynamic documents",
    "text": "Dynamic documents\n\n\n\n\n\n\nDefinition: Dynamic Documents\n\n\nA dynamic document includes code used for data analysis and report text\n\n\n\nThese two things produce your report/paper/presentation\n\nAll in a sequential and dynamic way!"
  },
  {
    "objectID": "week1/index.html#tools-for-reproducible-research",
    "href": "week1/index.html#tools-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tools for reproducible research",
    "text": "Tools for reproducible research\nR Programming Language\n\nR enables researchers to read data, create data visualizations and run statistical analyses.\nR has thousands of libraries\nR has a very active development community that is constantly expanding.\n\nR Libraries & Packages facilitate reproducibility\n\nknitr and quarto allow us to connected R-based analyses to a presentation, papers, and report documents created with markup languages such as LaTeX and Markdown.\n\n\nR by itself has the capabilities to gather and analyse data, and with a little help from knitr and quarto, with some markup languages, present results in a way that is highly reproducible."
  },
  {
    "objectID": "week1/index.html#rstudio",
    "href": "week1/index.html#rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio",
    "text": "RStudio\nIs an integrated developer environment (IDE)\n\nWe don’t need RStudio, but it lets us do things more easily.\n\nA happy medium between R’s text-based interface and a pure GUI\nIt is closely integrated with git (version control)\n\n\nIt has a cloud counterpart called RStudio Cloud\n\n\nOther IDEs exist, mainly VSCode which is rapidly gaining popularity"
  },
  {
    "objectID": "week1/index.html#important-distinction",
    "href": "week1/index.html#important-distinction",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Important distinction",
    "text": "Important distinction\nR is the programming language"
  },
  {
    "objectID": "week1/index.html#important-distinction-1",
    "href": "week1/index.html#important-distinction-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Important distinction",
    "text": "Important distinction\nRStudio is the integrated development environment"
  },
  {
    "objectID": "week1/index.html#rstudio-cloud",
    "href": "week1/index.html#rstudio-cloud",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Cloud",
    "text": "RStudio Cloud\nIt’s RStudio, in the cloud.\n\n\nWhy?"
  },
  {
    "objectID": "week1/index.html#rstudio-cloud-1",
    "href": "week1/index.html#rstudio-cloud-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Cloud",
    "text": "RStudio Cloud\n\nAllows the users to run reproducible reports without the need of installing any additional software or configurations in their own computer. It basically looks exactly like Rstudio but it runs in the cloud and can be loaded using any browser.\n\nRstudio Cloud allows us to work in the same environment regardless the computer operating system that each of you have in your computers.\nRstudio will provide the means for us to first focus on learning R and Rstudio without having to worry about installing them locally in each computer (we’ll do that later once you are more familiar with the language and the Rstudio environment)."
  },
  {
    "objectID": "week1/index.html#version-control",
    "href": "week1/index.html#version-control",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Version Control",
    "text": "Version Control\n\n\n\n\n\n\nDefinition: Version Control\n\n\nA system that records changes to a file or a set of files over time, so that you can recall specific versions later.\n\n\n\n\n\n\n\n\n\n\nPhoto by Marco Lermer on Unsplash"
  },
  {
    "objectID": "week1/index.html#git",
    "href": "week1/index.html#git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git",
    "text": "git\n\n\n\n\n\n\nDefinition: git\n\n\nGit is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows\n\n\n\n\n\n\n\n\n\n\nhttps://en.wikipedia.org/wiki/Git"
  },
  {
    "objectID": "week1/index.html#github-bitbucket-and-others",
    "href": "week1/index.html#github-bitbucket-and-others",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub, BitBucket, and others",
    "text": "GitHub, BitBucket, and others\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoth are cloud-based hosting services to manage git repositories\nAre code hosting platforms for version control and collaboration\n\n\nIt lets you and others work together on projects from anywhere"
  },
  {
    "objectID": "week1/index.html#git-and-github",
    "href": "week1/index.html#git-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git and GitHub",
    "text": "git and GitHub\n\n\n\n\n\n\n\nSource: https://blog.devmountain.com/git-vs-github-whats-the-difference/"
  },
  {
    "objectID": "week1/index.html#recomendations-summary",
    "href": "week1/index.html#recomendations-summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recomendations summary",
    "text": "Recomendations summary\n\n\nPlan in advance\nConsider adequate file systems for the project\nCreate accessible, connected workflows\nDocument, document, document\nConsider using a code environment container\nAdd a license for sharing your work"
  },
  {
    "objectID": "week1/index.html#etc5513-ingredients",
    "href": "week1/index.html#etc5513-ingredients",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513 Ingredients",
    "text": "ETC5513 Ingredients\n\n\n\n\n\n\n\nPhoto by Caitlin Mclean on Unsplash"
  },
  {
    "objectID": "week1/index.html#main-tools",
    "href": "week1/index.html#main-tools",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Main tools",
    "text": "Main tools\n\nR\nRStudio\nCommand Line Interface\ngit\nGitHub\nVSCode\n\n\nDuring this semester these tools will be essential for us to build reproducible and collaborative research practices."
  },
  {
    "objectID": "week1/index.html#tutorial",
    "href": "week1/index.html#tutorial",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tutorial",
    "text": "Tutorial\nThis week the tutorial will focus on providing an introduction to different resources.\n\nThese slides are on Moodle and the course website\nYou will also find the tutorial for this week\nFamiliarise yourself with all the resources in the tutorial and get to know your colleagues (this is quite important!)\nOverview of RStudio and an introduction to R"
  },
  {
    "objectID": "week1/index.html#week-1-lesson",
    "href": "week1/index.html#week-1-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 1 Lesson",
    "text": "Week 1 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nWhat are reproducible practices?\nWhat tools are available to us for reproducibility?\nWhen should we consider reproducible practices?\n\n\n\n\n\n\n\n\n\n\nResources\n\n\n\nLearning R: https://startr.numbat.space\ngit manual"
  },
  {
    "objectID": "assignments/assignment-3.html",
    "href": "assignments/assignment-3.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible Rstudio project\nProduce a pdf report using the template discussed in Week 7 or Week 8.\nPractice markdown syntax\nPractice R coding\nUse R chunk options to customize your report template\nCreate tables, add table captions and refer to them in the report text as described in Week 4\nCreate simple figures to visualize the data, add figure captions and refer to the figures in the report text as you learned in Week 4\nDemonstrate that you are able to work in groups to clone a GitHub repository locally and synchronize the changes between your local and remote repositories while using individual branches.\nShow that you can create and merge branches as well as resolve conflicts.\nShow that you can create meaningful Git commits so that the changes and the history of the project can be recorded and tracked.\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual and group assignment.\nThe printed final PDF report cannot exceed 16 pages for teams of four or 20 pages for teams of five (not including appendix pages). Additionally, you cannot use a dataset that has been previously used for other assignments or in other units this year or previous years.\nYou cannot use a dataset that has been used for another assignment."
  },
  {
    "objectID": "assignments/assignment-3.html#objectives",
    "href": "assignments/assignment-3.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible Rstudio project\nProduce a pdf report using the template discussed in Week 7 or Week 8.\nPractice markdown syntax\nPractice R coding\nUse R chunk options to customize your report template\nCreate tables, add table captions and refer to them in the report text as described in Week 4\nCreate simple figures to visualize the data, add figure captions and refer to the figures in the report text as you learned in Week 4\nDemonstrate that you are able to work in groups to clone a GitHub repository locally and synchronize the changes between your local and remote repositories while using individual branches.\nShow that you can create and merge branches as well as resolve conflicts.\nShow that you can create meaningful Git commits so that the changes and the history of the project can be recorded and tracked.\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual and group assignment.\nThe printed final PDF report cannot exceed 16 pages for teams of four or 20 pages for teams of five (not including appendix pages). Additionally, you cannot use a dataset that has been previously used for other assignments or in other units this year or previous years.\nYou cannot use a dataset that has been used for another assignment."
  },
  {
    "objectID": "assignments/assignment-3.html#part-a",
    "href": "assignments/assignment-3.html#part-a",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Part A",
    "text": "Part A\nAs a group, you need to agree on a topic with several subtopics for each individual in the team and select a dataset or several datasets for the assignment.\nYou should create branches for each subtopic. Each of you can work on more than one subtopic if you like.\n\nTitle and authors (1 mark)\nTable of contents: Defining using adequate YAML syntax (1 mark)\nExecutive summary: Maximum of 4 sentences (3 marks)\nIntroduction: Maximum 10 sentences (5 marks)\nThe body of the report should contain the following sections:\n\nMethodology: Maximum 300 words (5 marks).\n\nShould include a figure and a table and those must be referenced in the text and have adequate captions (5 marks).\n\nResults: Maximum 200 words (3 marks). Should include either a figure or a table.\nDiscussion, conclusion and recommendations\nReference section: Include at least 1 reference. (1 mark)"
  },
  {
    "objectID": "assignments/assignment-3.html#part-b",
    "href": "assignments/assignment-3.html#part-b",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Part B",
    "text": "Part B\nAs a team, you need to:\n\nMerge the branches: Start by merging all the branches into the main branch. You will need to get organized and do this one by one so that you can resolve the conflicts that will appear.\nResolve conflicts: Since you will be working on the same sections, conflicts may arise when the same lines of code are modified in different branches. To resolve conflicts, edit the affected files and choose which version to keep. Once you have resolved the conflicts, commit the changes.\nMake sure that the report knits into a pdf without errors each time you do a merge. If errors arise please solve them.\nReview and Revise: Carefully review the final report to ensure that it meets all the requirements of a cohesive report and is free of errors. Make any necessary revisions and edits before submitting the report. For this, you will all probably need to work on the main branch. Please ensure that any changes made are in terms of the requirements and in a coordinated fashion to avoid any problems.\n\nThe final business hospital must look professional, coherent and connected.\nStudents who do not participate in Part B will receive a grade of 0 for the assignment.\nTeams will not be penalised if individual students do not contribute to to the work on their respective branches."
  },
  {
    "objectID": "assignments/assignment-3.html#marking-rubric",
    "href": "assignments/assignment-3.html#marking-rubric",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Marking Rubric",
    "text": "Marking Rubric\nIn addition to the points for each section as described above, you will be graded on your:\n\nReport template (5 points). The default Quarto template will be granted 1 point. More sophisticated templates will add more points into this component, up to 5. Remember, styling that takes away from the report is not beneficial.\nIssues with spelling and grammar (up to -5pts)\nR code style (5 points)\nReport quality: Sections in the report are connected and aligned with the research question in a coherent way (6 points).\nMessages in commits are clear and informative (5 points)\nWork on individual branches of the git repository (10 points)\nWork on the main branch of the git repository (10 points)\nGit tree structure (5 points)\n\nMaximum grade: 70 points."
  },
  {
    "objectID": "assignments/assignment-3.html#the-usage-of-ai",
    "href": "assignments/assignment-3.html#the-usage-of-ai",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The usage of AI",
    "text": "The usage of AI\nYou may use Generative AI (such as ChatGPT) to correct your English or to help with your R code (for example to find bugs or ask for enhancements to your existing code). However, if you use ChatGPT you must declare it by adding a section in your Quarto report called Appendix, and display screenshots of your ChatGPT queries and interactions related to this assignment.\nYou cannot use ChatGPT to generate content for this assignment from scratch, including code.\nMonash University supports the responsible and ethical use of generative AI. For more info please refer to Monash Policy and practise guidance around acceptable and responsible use of AI technologies.\n\n\n\n\n\n\nTip\n\n\n\nRemember you can be better than ChatGPT. If you just use ChatGPT to create content for you, where is your value and why are your skills special?"
  },
  {
    "objectID": "assignments/assignment-3.html#assignment-submission",
    "href": "assignments/assignment-3.html#assignment-submission",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Assignment Submission",
    "text": "Assignment Submission\nThe report must be rendered to PDF. Code outputs do not need to be visible - you are creating a clean business report, so only include them in they are adding to your narrative.\n\n\n\n\n\n\nImportant\n\n\n\nThe printed final PDF report cannot exceed 16 pages for teams of four or 20 pages for teams of five (not including appendix pages)\n\n\nYou do not need to upload anything to Moodle. All marking will occur directly from your GitHub repositories."
  },
  {
    "objectID": "assignments/assignment-3.html#plagiarism",
    "href": "assignments/assignment-3.html#plagiarism",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Plagiarism",
    "text": "Plagiarism\nMonash University is committed to honesty and academic integrity. There are serious consequences for plagiarism and collusion. If plagiarism and/or collusion is detected further actions will be taken according to Monash University policy and procedures. More info here:\nhttps://www.monash.edu/students/admin/policies/academic-integrity\nYou cannot re-use assignments that have been submitted or used in other units."
  },
  {
    "objectID": "assignments/assignment-3.html#marking-rubric-1",
    "href": "assignments/assignment-3.html#marking-rubric-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Marking Rubric",
    "text": "Marking Rubric\n\nPresentation is reproducible (5 points)\nStyling is sensible and does not detract from the presentation (2 points)\nPresentation tells a clear story (5 points)\nPresentation follows the required format (3)\n\nMaximum grade: 15 points."
  },
  {
    "objectID": "assignments/assignment-3.html#assignment-submission-1",
    "href": "assignments/assignment-3.html#assignment-submission-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Assignment Submission",
    "text": "Assignment Submission\nThe presentations will take place in your tutorials in Week 12.\nMarking for Parts A & B will take place directly on GitHub classroom."
  },
  {
    "objectID": "assignments/assignment-3.html#plagiarism-1",
    "href": "assignments/assignment-3.html#plagiarism-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Plagiarism",
    "text": "Plagiarism\nMonash University is committed to honesty and academic integrity. There are serious consequences for plagiarism and collusion. If plagiarism and/or collusion is detected further actions will be taken according to Monash University policy and procedures. More info here:\nhttps://www.monash.edu/students/admin/policies/academic-integrity\nYou cannot re-use assignments that have been submitted or used in other units."
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible Rstudio project\nProduce a html report using an qmd file and explore YAML themes to define your prefer template\nPractice markdown syntax\nPractice R coding\nExplore R chunk options to customize your report template\nCreate html tables, add table captions and refer to them in the report text as described in Week 4\nCreate simple figures to visualize the data, add figure captions and refer to the figures in the report text as you learned in Week 4\nDemonstrate that you are able to clone a GitHub repository locally and synchronize the changes between your local and remote repositories.\nShow that you can create meaningful Git commits so that the changes and the history of the project can be recorded and tracked.\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment.\nThe final PDF report can not have more than 5 pages (not including the appendix).\nYou cannot use a dataset that has been used for another assignment."
  },
  {
    "objectID": "assignments/assignment-1.html#objectives",
    "href": "assignments/assignment-1.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible Rstudio project\nProduce a html report using an qmd file and explore YAML themes to define your prefer template\nPractice markdown syntax\nPractice R coding\nExplore R chunk options to customize your report template\nCreate html tables, add table captions and refer to them in the report text as described in Week 4\nCreate simple figures to visualize the data, add figure captions and refer to the figures in the report text as you learned in Week 4\nDemonstrate that you are able to clone a GitHub repository locally and synchronize the changes between your local and remote repositories.\nShow that you can create meaningful Git commits so that the changes and the history of the project can be recorded and tracked.\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment.\nThe final PDF report can not have more than 5 pages (not including the appendix).\nYou cannot use a dataset that has been used for another assignment."
  },
  {
    "objectID": "assignments/assignment-1.html#part-a-setting-up-version-control",
    "href": "assignments/assignment-1.html#part-a-setting-up-version-control",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Part A: Setting up version control",
    "text": "Part A: Setting up version control\nIn this assignment, you need to create an RStudio project that will be able to produce a reproducible HTML report. For the report, please select a data set that interest you. One possible data source is Our World in Data; you may also like to look over the TidyTuesday datasets.\nThe size of the data set is not relevant, however your data must contain at least 3 numerical variables and a character or factor variable and its size must not be more than 50MB. Your reproducible report should be created using a Quarto file in Rstudio and needs to be knitted into a HTML file. The report must knit into HTML without any errors.\nYou will be working with a GitHub repository for this assignment. We will use GitHub Classroom, where I have set up some of the structure for you. Please join the classroom here. Make sure to choose your Monash username from the list so we can find your assignment.\n\nRepository setup (6 points)\nClone the repository created by GitHub classroom onto your computer as we have done in lectures and tutorials (1 point).\nOnce you have cloned the repository to your computer, make sure to add all the files in the upcoming section, and use relevant, clear commit messages (5 points).\n\n\n\n\n\n\nCaution\n\n\n\nThe GitHub repo will appear in the GitHub classroom space. Do not work in or create a different repository for this assignment.\n\n\nYou can delete the example files out of Data/ and Images/."
  },
  {
    "objectID": "assignments/assignment-1.html#part-b-creating-a-reproducible-report",
    "href": "assignments/assignment-1.html#part-b-creating-a-reproducible-report",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Part B: Creating a reproducible report",
    "text": "Part B: Creating a reproducible report\nThere is a pre-made RStudio project in the git repository. Open that with RStudio and we will work inside that project.\n\nR code chunk for loading libraries (3 points)\nCreate a new Quarto file using RStudio. This file is where we will create the report for the rest of this assignment, so make sure to give it a sensible name (1 point).\nLoad all the libraries you will use in the report in an R chunk located at the beginning of your Quarto file. Make sure you set the options so that you do not display any R code, messages, or warnings in the rendered HTML document (for this chunk) (1 point).\nChange the YAML options for this Quarto file to render both a HTML and a PDF report.\n\n\nIntroduction section (5 points)\nUsing markdown, write a 4 sentence maximum motivation of what you are going to research and why. Make sure it is relevant to your dataset.\n\n\nResearch Question section (5 points)\nUsing markdown, discuss in 3 sentences maximum, the specific question that you are going to investigate or answer in this report using your selected data.\n\n\nDataset Introduction section (5 points)\nIn this section, briefly describe your data (i.e. what the data is measuring or recording) in five sentences maximum using markdown. You must provide a link to the location of the data inserted in the text using markdown.\nCreate a table using the kable() function from the knitr R package to report the variable names. Add a table caption that briefly describes the table in no more than 2 sentences. Include a cross-reference to the table in your text.\n\n\nDataset Description subsection (5 points)\nCreate a subsection that will report details about your data. You must include the size of the dataset such as the number of observations, variables and variable types. You must include the following:\n\nA sentence that includes inline R code describing the number of variables and observations in your dataset.\nA screenshot of your inline R code, saved as a png file. Upload this file inside the Image folder.\nInclude that picture in your subsection. You can either use an R code chunk (with knitr::include_graphics) or markdown image syntax (![]()).\nUsing the function head(), display the first two rows of data to show the types of variables that are in the dataset (i.e. numeric, character/factor etc)."
  },
  {
    "objectID": "assignments/assignment-1.html#results-section-5-points",
    "href": "assignments/assignment-1.html#results-section-5-points",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Results section (5 points)",
    "text": "Results section (5 points)\nUsing visualisations of the data, discuss the answer to your research questions. You must:\n\nCreate 2 figures maximum of your data that will help you answer your research question. Each figure must have a caption using the options inside the R code chunk. Create the figures using the ggplot2 package.\nUsing markdown, add a list with two bullet points describing what you see in each of the figures using italic font and how that can help you answer your research question. Make sure you cross-reference the figures in the text."
  },
  {
    "objectID": "assignments/assignment-1.html#marking-rubric",
    "href": "assignments/assignment-1.html#marking-rubric",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Marking Rubric",
    "text": "Marking Rubric\nIn addition to the points as described above, you will be graded on your:\n\nReport template (5 points). The default Quarto template will be granted 1 point. More sophisticated templates will add more points into this component, up to 5. Remember, styling that takes away from the report is not beneficial.\nIssues with spelling and grammar (up to -5 points).\nR code style (i.e. spacing, variable names) (5 points)\nReport quality: Sections in the report are connected and aligned with the research question in a coherent way (6 points).\n\nMaximum grade: 50 points."
  },
  {
    "objectID": "assignments/assignment-1.html#the-usage-of-ai",
    "href": "assignments/assignment-1.html#the-usage-of-ai",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The usage of AI",
    "text": "The usage of AI\nYou may use Generative AI (such as ChatGPT) to correct your English or to help with your R code (for example to find bugs or ask for enhancements to your existing code). However, if you use ChatGPT you must declare it by adding a section in your Quarto report called Appendix, and display screenshots of your ChatGPT queries and interactions related to this assignment.\nYou cannot use ChatGPT to generate content for this assignment from scratch, including code.\nMonash University supports the responsible and ethical use of generative AI. For more info please refer to Monash Policy and practice guidance around acceptable and responsible use of AI technologies."
  },
  {
    "objectID": "assignments/assignment-1.html#assignment-submission",
    "href": "assignments/assignment-1.html#assignment-submission",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Assignment Submission",
    "text": "Assignment Submission\nThe report must be rendered to HTML and PDF. The PDF cannot have a length of more than 5 pages (excluding the appendix).\nYou do not need to upload anything to Moodle. All marking will occur directly from your GitHub repositories."
  },
  {
    "objectID": "assignments/assignment-1.html#plagiarism",
    "href": "assignments/assignment-1.html#plagiarism",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Plagiarism",
    "text": "Plagiarism\nMonash University is committed to honesty and academic integrity. There are serious consequences for plagiarism and collusion. If plagiarism and/or collusion is detected further actions will be taken according to Monash University policy and procedures. More info here:\nhttps://www.monash.edu/students/admin/policies/academic-integrity\nYou cannot re-use assignments that have been submitted or used in other units."
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Work on a reproducible workbook\nPractice markdown syntax\nDemonstrate that you have a strong knowledge of git commands and usage\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment."
  },
  {
    "objectID": "assignments/assignment-2.html#objectives",
    "href": "assignments/assignment-2.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Work on a reproducible workbook\nPractice markdown syntax\nDemonstrate that you have a strong knowledge of git commands and usage\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment."
  },
  {
    "objectID": "assignments/assignment-2.html#the-guide",
    "href": "assignments/assignment-2.html#the-guide",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The guide",
    "text": "The guide\nCreate a written guide which demonstrates your knowledge on git, GitHub, and the command line interface.\nThe guide should demonstrate your ability to use these tools efficiently for version control and collaboration. Make sure you explain what you are doing in each step and why.\nPlease make sure you include all of the steps described below.\nYou only need to use commands we have learned in class.\n\nCreate a new RStudio Project. In this folder, create a simple qmd file called example.qmd that can be knitted into a HTML file. Show the result of the knitted file.\nFrom the command line interface, initialise this folder as a git repository and push it to the GitHub classroom repository.\nCreate a new branch called testbranch. Modify the file example.qmd and add the changes to both the local and remote repositories. Add another commit in this branch where you create a folder called data, and add the data from Assignment 1 to that folder.\nAmend the previous commit to include the data folder. Push this amended commit to the remote.\nSwitch back to the main branch and modify example.qmd in a different way such that it will conflict with testbranch. Commit and push these changes.\nMerge the changes in testbranch onto main. Show the conflict and fixing the merge conflict. Push the changes to GitHub, showing the status and changes in GitHub.\nTag this commit v1.0 on main using an annotated tag.\nDelete branch testbranch locally and on the remote.\nShow the commit log in condensed form in the terminal.\nOn main, create a new section in example.qmd that includes an easy to make plot. Commit the changes, and demonstrate using the command line interface how to undo the commit without losing your local changes."
  },
  {
    "objectID": "assignments/assignment-2.html#marking-rubric",
    "href": "assignments/assignment-2.html#marking-rubric",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Marking Rubric",
    "text": "Marking Rubric\n\nEach of the instructions will be assessed as to whether they are successfully completed or not (1 mark each, total 10 points)\nClear commit messages used in the guide where appropriate (1 point)\nGuide has good flow and is clear (2 points)\nIssues with language and grammar: Maximum deduction of 3 points"
  },
  {
    "objectID": "assignments/assignment-oral.html",
    "href": "assignments/assignment-oral.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Demonstrate an understanding of git workflows\nCommunicate technical ideas clearly and effectively\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment."
  },
  {
    "objectID": "assignments/assignment-oral.html#objectives",
    "href": "assignments/assignment-oral.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Demonstrate an understanding of git workflows\nCommunicate technical ideas clearly and effectively\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment."
  },
  {
    "objectID": "assignments/assignment-oral.html#instructions",
    "href": "assignments/assignment-oral.html#instructions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Instructions",
    "text": "Instructions\nCreate a 10 minute maximum video that answers the following questions:\n\n\nWhat happens when two people edit the same file?\nHow does git handle that, and what do you need to do?\nHow does git help you recover from mistakes?\nExplain how you would undo a bad commit, and how that might differ depending on the situation.\n\nThroughout the video, you should share/record your screen and have you camera visible. You are welcome to use the screen for demonstrating the concepts you are explaining.\n\nYour goal is not just to show what to do, but to explain why you’re doing it. For example:\n\n“We revert this commit instead of resetting because the commit has already been pushed and we don’t want to rewrite public history.”\n\n\n\n\n\n\n\n\nImportant\n\n\n\nYou cannot speed up your recording — it must be delivered in real time to ensure you’re within the time limit."
  },
  {
    "objectID": "assignments/assignment-oral.html#submission",
    "href": "assignments/assignment-oral.html#submission",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Submission",
    "text": "Submission\nPlease upload the completed video file directly to Moodle.\n\nTips\n\nYou may pre-prepare materials (e.g., set up Git repositories or branches in advance).\nSpeak as if you’re explaining these concepts to a colleague who’s familiar with Git but not very experienced.\nAim for clarity and detail, not just correctness.\nVisuals and terminal demos are recommended, but are not required — clarity of explanation matters most."
  },
  {
    "objectID": "assignments/assignment-oral.html#marking-rubric",
    "href": "assignments/assignment-oral.html#marking-rubric",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Marking rubric",
    "text": "Marking rubric\n\nTechnical content of each question: 5 points each (total 10 points)\nExplaining “why”: 3 points\nOveral clarity and communication: 2 points\n\n1 mark is deducted for every 30 seconds over the 10 minute time limit (maximum 3 mark deduction). A 10 minute 12 second video thus has a maximum of 14 marks.\nTotal: 15 marks"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "This unit develops teamwork skills, through instruction on reproducibility and version control to conduct collaborative data analysis. These skills are practised in a team setting with a data analysis project."
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Learning outcomes",
    "text": "Learning outcomes\n\nDevelop skills to create reproducible data analyses\nUnderstand the operation of version control systems\nUtilise version control to integrate data analysis efforts of team members\nEffectively work with a group to construct a collaborative data story"
  },
  {
    "objectID": "index.html#teachers",
    "href": "index.html#teachers",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Teachers",
    "text": "Teachers\n\nMichael Lydeamore. Chief Examiner. Email: michael.lydeamore@monash.edu\nNaveen Kaushik. Email: naveen.kaushik@monash.edu"
  },
  {
    "objectID": "index.html#weekly-schedule",
    "href": "index.html#weekly-schedule",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Weekly schedule",
    "text": "Weekly schedule\n\n2 hour workshop, Mondays 5pm-7pm each week\n1 hour workshop, Mondays 7pm-8pm each week\n1 hour tutorial, one of:\n\nThursday 4pm-5pm\nFriday 3pm-4pm\nFriday 4pm-5pm"
  },
  {
    "objectID": "index.html#consultation",
    "href": "index.html#consultation",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Consultation",
    "text": "Consultation\n\nMichael Lydeamore: Thursday 1pm-2pm hybrid\nNaveen Kaushik: Tuesday 4pm-5.30pm online\n\n\n\n\nDate\nTopic\nWorkshop\nTutorial\n\n\n\n\n03 Mar\nIntroduction to collaborative and reproducible practices\nWorkshop 1\nTutorial 1\n\n\n10 Mar\nReproducible reports using Quarto\nWorkshop 2\nTutorial 2\n\n\n17 Mar\nIntroduction to version control systems: git and GitHub\nWorkshop 3\nTutorial 3\n\n\n24 Mar\nReproducible reporting using Quarto, git and GitHub\nWorkshop 4\nTutorial 4\n\n\n31 Mar\nDeeper git knowledge, stashing and tools\nWorkshop 5\nTutorial 5\n\n\n07 Apr\nReproducible reporting and version control systems\nWorkshop 6\nTutorial 6\n\n\n14 Apr\nWorkflows for reproducible data analysis\nWorkshop 7\nTutorial 7\n\n\n21 Apr\nMid-semester break\n\n\n\n\n28 Apr\nReproducible reporting for specialised and broad audiences\nWorkshop 8\nTutorial 8\n\n\n05 May\nAdvanced collaborative practices\nWorkshop 9\nTutorial 9\n\n\n12 May\nDocker - the extreme end of reproducibility\nWorkshop 10\nTutorial 10\n\n\n19 May\nReproducible workflows in consultancy\nWorkshop 11\nTutorial 11\n\n\n26 May\nCourse recap\nWorkshop 12\nTutorial 12"
  },
  {
    "objectID": "index.html#assignments",
    "href": "index.html#assignments",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Assignments",
    "text": "Assignments\n\nAssignment 1\nAssignment 2\nAssignment 3\nOral Assessment\n\nRefer to Moodle for due dates and submission information."
  },
  {
    "objectID": "week1/tutorial/index.html",
    "href": "week1/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Getting to know your colleagues\nGetting setup with R, RStudio and GitHub\nWhat is R and why do we need it?\nGetting some practice in R\nLearn about R and RStudio Resources"
  },
  {
    "objectID": "week1/tutorial/index.html#objectives",
    "href": "week1/tutorial/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Getting to know your colleagues\nGetting setup with R, RStudio and GitHub\nWhat is R and why do we need it?\nGetting some practice in R\nLearn about R and RStudio Resources"
  },
  {
    "objectID": "week1/tutorial/index.html#r-in-practice",
    "href": "week1/tutorial/index.html#r-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R in practice",
    "text": "R in practice\nThere are plenty of resources to start getting to know how R works. Here are a couple:\n\nStartR\nPosit (R) Primers\n\nFor this tutorial, please work through Modules 3 and 4, and also Quarto Basics. Don’t worry if you don’t make it all the way through them in class"
  },
  {
    "objectID": "week1/tutorial/index.html#familiarize-yourself-with-useful-resources-for-r-programming",
    "href": "week1/tutorial/index.html#familiarize-yourself-with-useful-resources-for-r-programming",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Familiarize yourself with useful resources for R programming",
    "text": "Familiarize yourself with useful resources for R programming\nThere are lots of wonderful R, Rstudio and Data science using R resources that will help you during the semester. Below there is a list to get you started:\n\nHands-On Programming with R\nR for Data Science\n\nA more comprehensive list of books that are freely available can be fond on the following webpage: Book list"
  },
  {
    "objectID": "week10/tutorial/solution.html",
    "href": "week10/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn to use git lfs to deal with large files\nCreate licenses in our repostiroies\nUse renv to create a local library"
  },
  {
    "objectID": "week10/tutorial/solution.html#objectives",
    "href": "week10/tutorial/solution.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn to use git lfs to deal with large files\nCreate licenses in our repostiroies\nUse renv to create a local library"
  },
  {
    "objectID": "week10/tutorial/solution.html#setting-up-licensed-repositories",
    "href": "week10/tutorial/solution.html#setting-up-licensed-repositories",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Setting up licensed repositories",
    "text": "Setting up licensed repositories\nFor this week’s tutorial, you’ll need a brand new repository to work in. It can be public or private.\n\nCreate a new repository with your choice of name. Ensure that it has a license, a .gitignore file and a README file.\nYou should select these from the repo creation menu, not by committing them yourself later.\nClone the repository to your local machine\nChange the license file to a different one. Remember you can find licenses on choosealicense.com. Stage, commit and push your changes.\nRevert the commit you just made.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit revert HEAD~0\nYou don’t need the HEAD~0 to revert the most recent commit.\n\n\n\n\n\nReset the last two commits. You should end up with your original license file back on the repo.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit reset HEAD~2\n\n\n\n\n\nCommit, stage and push your changes (if there are any). What do you notice?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nAny evidence of the license change has been removed from the repository. This is known as a destructive operation.\n\n\n\n\n\nEdit the README.md file to include your name. Stage and commit (but don’t push).\nAmend the most recent commit to also include the course code and the tutorial number. Include an expanded commit message for the amended commit.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit commit --amend should open your text editor.\nTo include an expanded commit message, leave a blank line between the summary and expanded text.\n\n\n\n\n\nPush your changes. Can you see the expanded commit message on GitHub?"
  },
  {
    "objectID": "week10/tutorial/solution.html#lightweight-dependency-management-using-renv",
    "href": "week10/tutorial/solution.html#lightweight-dependency-management-using-renv",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Lightweight dependency management using renv",
    "text": "Lightweight dependency management using renv\nInside your repo from the previous section:\n\nCreate a qmd file that has a libraries code chunk, and load the dplyr and ggplot2 libraries.\nStage the changes, commit and push.\nWhat are the library paths for this project?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n.libPaths()\n\"/Library/Frameworks/R.framework/Versions/4.0/Resources/library\"\n\n\n\n\n\nInstall the renv package\nInitialise renv in your R seession\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrenv::init()\n\n\n\n\n\nWhat new files or folders have been made in your repo with this command?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThere is a new folder called renv, a new file called .Rprofile and a new filed called renv.lock.\n\n\n\n\n\nUsing the terminal, use cd and ls to find the new files.\nIn the terminal, check the status of your repo.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a snapshot of your repostiory using renv::snapshot()\nCheck the status of your repo, stage, commit and push the changes into the remote repository.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit status\ngit add .\ngit commit -m \"Adding renv files for dependency management\"\ngit push origin main\n\n\n\n\nExtension: Try adding a development package from GitHub, such as the naniar package. Follow the renv workflow. Does the package get recorded? Can you see it in the lockfile? How is it recorded differently from packages on CRAN?"
  },
  {
    "objectID": "week10/tutorial/index.html",
    "href": "week10/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn to use git lfs to deal with large files\nCreate licenses in our repostiroies\nUse renv to create a local library"
  },
  {
    "objectID": "week10/tutorial/index.html#objectives",
    "href": "week10/tutorial/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn to use git lfs to deal with large files\nCreate licenses in our repostiroies\nUse renv to create a local library"
  },
  {
    "objectID": "week10/tutorial/index.html#setting-up-licensed-repositories",
    "href": "week10/tutorial/index.html#setting-up-licensed-repositories",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Setting up licensed repositories",
    "text": "Setting up licensed repositories\nFor this week’s tutorial, you’ll need a brand new repository to work in. It can be public or private.\n\nCreate a new repository with your choice of name. Ensure that it has a license, a .gitignore file and a README file.\nYou should select these from the repo creation menu, not by committing them yourself later.\nClone the repository to your local machine\nChange the license file to a different one. Remember you can find licenses on choosealicense.com. Stage, commit and push your changes.\nRevert the commit you just made.\n\n\nReset the last two commits. You should end up with your original license file back on the repo.\n\n\nCommit, stage and push your changes (if there are any). What do you notice?\n\n\nEdit the README.md file to include your name. Stage and commit (but don’t push).\nAmend the most recent commit to also include the course code and the tutorial number. Include an expanded commit message for the amended commit.\n\n\nPush your changes. Can you see the expanded commit message on GitHub?"
  },
  {
    "objectID": "week10/tutorial/index.html#lightweight-dependency-management-using-renv",
    "href": "week10/tutorial/index.html#lightweight-dependency-management-using-renv",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Lightweight dependency management using renv",
    "text": "Lightweight dependency management using renv\nInside your repo from the previous section:\n\nCreate a qmd file that has a libraries code chunk, and load the dplyr and ggplot2 libraries.\nStage the changes, commit and push.\nWhat are the library paths for this project?\n\n\nInstall the renv package\nInitialise renv in your R seession\n\n\nWhat new files or folders have been made in your repo with this command?\n\n\nUsing the terminal, use cd and ls to find the new files.\nIn the terminal, check the status of your repo.\n\n\nCreate a snapshot of your repostiory using renv::snapshot()\nCheck the status of your repo, stage, commit and push the changes into the remote repository.\n\nExtension: Try adding a development package from GitHub, such as the naniar package. Follow the renv workflow. Does the package get recorded? Can you see it in the lockfile? How is it recorded differently from packages on CRAN?"
  },
  {
    "objectID": "week11/tutorial/solution.html",
    "href": "week11/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Recap moving through git repositories\nPractice undoing and resetting commits"
  },
  {
    "objectID": "week11/tutorial/solution.html#objectives",
    "href": "week11/tutorial/solution.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Recap moving through git repositories\nPractice undoing and resetting commits"
  },
  {
    "objectID": "week11/tutorial/solution.html#moving-back-in-time-finding-our-way-in-a-git-repo",
    "href": "week11/tutorial/solution.html#moving-back-in-time-finding-our-way-in-a-git-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Moving back in time: finding our way in a Git repo",
    "text": "Moving back in time: finding our way in a Git repo\n\nHow can we explore old commits?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit log --oneline\n\n\n\n\n\nHow are the commits identified?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThey are identified with a unique SHA or SHA1 number.\n\n\n\n\n\nFork the following repo: https://github.com/github/explore. Clone the repo locally.\nUsing your terminal look at the commits. How can you go up and down over the commits? How can you get out of the list?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nYou can move up and down by pressing u or d. To exit, press q.\n\n\n\n\n\nList the commits that have been done in the repo since 14 May 2024 only.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit log --since=14-05-2024\n\n\n\n\n\nOpen the local project in RStudio and have a look at the tree history and the commit messages. Specially have a look at longer commits that contain not only one line but also some more text.\nWhere is the repo HEAD?\nUsing the command line interface or terminal move the HEAD of the repository to two commits back from the most recent\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit checkout e208fa8\n\n\n\n\n\nWhat is the first line of the commit message of this commit?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nMerge pull request 4339 from isasharafdin/todo\n\n\n\n\n\nWhich files have been modified in that commit?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nJust topics/todo/index.md\n\n\n\n\n\nWhat is the difference between this commit and the previous commit?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nFirst, git log e208fa8 to find the SHA of the previous commits. Then, git diff ff120c2 HEAD\n\n\n\n\n\nMove the HEAD of the repository back to where was originally located (last commit of the main (or master) branch)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit checkout main\n\n\n\n\n\nFind the commit with message “add in lite” what was change in the modified file?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit log --grep=\"add in lite\"\n\n\n\n\n\nMove back to the latest commit in the main (or master) branch of the repo so that you can keep making commits without being in a detached HEAD.\nUsing your terminal add a new file “myexample.txt” in the repo, stage, commit and push the file to your remote repo\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s add another file same as above now called “myexample2.txt”. Stage the file and then unstage the file.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit status\ngit add .\nTo unstage, git reset.\n\n\n\n\n\nStage “myexample2.txt”, commit and push it to the remote repository.\nYou realized that you made a mistake and you want to undo 17. You don’t want to remove the commit from the history. How can you do that?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit revert SHA\n\n\n\n\n\nRun a git log –oneline and have a look at the commit that you did before the last commit.\nPick the commit that you did before the last commit and do git reset SHA. What happens? Why is this not best practice?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngit status\ngit log\ngit reset SHA\nYou will see that the last commit has disappeared from the repo history. This is not considered best practice as it modifies the public record of the repository history."
  },
  {
    "objectID": "week11/tutorial/index.html",
    "href": "week11/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Recap moving through git repositories\nPractice undoing and resetting commits"
  },
  {
    "objectID": "week11/tutorial/index.html#objectives",
    "href": "week11/tutorial/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Recap moving through git repositories\nPractice undoing and resetting commits"
  },
  {
    "objectID": "week11/tutorial/index.html#moving-back-in-time-finding-our-way-in-a-git-repo",
    "href": "week11/tutorial/index.html#moving-back-in-time-finding-our-way-in-a-git-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Moving back in time: finding our way in a Git repo",
    "text": "Moving back in time: finding our way in a Git repo\n\nHow can we explore old commits?\n\n\nHow are the commits identified?\n\n\nFork the following repo: https://github.com/github/explore. Clone the repo locally.\nUsing your terminal look at the commits. How can you go up and down over the commits? How can you get out of the list?\n\n\nList the commits that have been done in the repo since 14 May 2024 only.\n\n\nOpen the local project in RStudio and have a look at the tree history and the commit messages. Specially have a look at longer commits that contain not only one line but also some more text.\nWhere is the repo HEAD?\nUsing the command line interface or terminal move the HEAD of the repository to two commits back from the most recent\n\n\nWhat is the first line of the commit message of this commit?\n\n\nWhich files have been modified in that commit?\n\n\nWhat is the difference between this commit and the previous commit?\n\n\nMove the HEAD of the repository back to where was originally located (last commit of the main (or master) branch)\n\n\nFind the commit with message “add in lite” what was change in the modified file?\n\n\nMove back to the latest commit in the main (or master) branch of the repo so that you can keep making commits without being in a detached HEAD.\nUsing your terminal add a new file “myexample.txt” in the repo, stage, commit and push the file to your remote repo\n\n\nLet’s add another file same as above now called “myexample2.txt”. Stage the file and then unstage the file.\n\n\nStage “myexample2.txt”, commit and push it to the remote repository.\nYou realized that you made a mistake and you want to undo 17. You don’t want to remove the commit from the history. How can you do that?\n\n\nRun a git log –oneline and have a look at the commit that you did before the last commit.\nPick the commit that you did before the last commit and do git reset SHA. What happens? Why is this not best practice?"
  },
  {
    "objectID": "week2/index.html#etc5513-title",
    "href": "week2/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nReproducible reports using Quarto\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 2\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week2/index.html#open-frame",
    "href": "week2/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week2/index.html#recap",
    "href": "week2/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nSet the basis for the unit\nUnit structure\nAssessment\nIntroduction to reproducibility\nLooked at R, RStudio and git\n\n\nIn the tutorial, you got to know more about R, and some of the available R and RStudio resources to help you through the semester.\n\n\nYou were also introduced to ChatGPT that you can use to assist in your learning. We will be using ChatGPT ethically as per the University guidelines."
  },
  {
    "objectID": "week2/index.html#aim",
    "href": "week2/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nQuarto documents\nR Code Chunk Options\nIncluding images and figures\nComputer file architecture\nRStudio Projects\nGood coding practices\n\n\n\n\nSecond hour: hands on practice"
  },
  {
    "objectID": "week2/index.html#think-of-reproducible-reporting-as-a-project",
    "href": "week2/index.html#think-of-reproducible-reporting-as-a-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Think of reproducible reporting as a project",
    "text": "Think of reproducible reporting as a project\nThe project needs to contain all the resources needed to produce a reproducible output.\n\n\n\n\n\n\nDefinition: Computational Reproducibility\n\n\nObtaining consistent computational results using the same input data, computational steps, methods, code, and conditions of analysis."
  },
  {
    "objectID": "week2/index.html#elements-of-a-reproducible-project",
    "href": "week2/index.html#elements-of-a-reproducible-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Elements of a reproducible project",
    "text": "Elements of a reproducible project\nWe need to have a plan to organise, store and make all the project files available\n\nAll the elements of the project should be files\nAll files should be stored within the project location (typically a folder)\nAll your files should be explicitly tied together"
  },
  {
    "objectID": "week2/index.html#project-organisation-example",
    "href": "week2/index.html#project-organisation-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Project organisation example",
    "text": "Project organisation example"
  },
  {
    "objectID": "week2/index.html#workflow-for-reproducible-research",
    "href": "week2/index.html#workflow-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Workflow for reproducible research",
    "text": "Workflow for reproducible research\n\n\n\n\n\n\n\nAllison Horst (@allisonhorst)"
  },
  {
    "objectID": "week2/index.html#stages-for-reproducible-data-analysis-and-reporting",
    "href": "week2/index.html#stages-for-reproducible-data-analysis-and-reporting",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Stages for reproducible data analysis and reporting",
    "text": "Stages for reproducible data analysis and reporting\n\n\nClear research questions to be investigated\nClear objectives: what is the goal of this report?\nData gathering\nExploratory data analysis\nData analysis\nResults presentation\n\n\n\nAll of the above needs to be documented and tied together"
  },
  {
    "objectID": "week2/index.html#in-this-unit",
    "href": "week2/index.html#in-this-unit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "In this unit",
    "text": "In this unit\nWe will create documents that are reproducible\n\nIncorporate analyses that are reproducible\nInclude report text\nAll combined together\n\nOur reproducible documents will be created using the scripting language R combined with quarto."
  },
  {
    "objectID": "week2/index.html#computer-paths-1",
    "href": "week2/index.html#computer-paths-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Computer paths",
    "text": "Computer paths\n\n\n\n\n\n\nDefinition: Path\n\n\nA path is the complete location or name of where a computer file, directory, device, or web page is located\n\n\n\nSome examples:\n\nWindows: C:\\Documents\\ETC5513\nMac/Linux: /Users/Documents/ETC5513\nInternet: http://rcp.numbat.space/"
  },
  {
    "objectID": "week2/index.html#absolute-and-relative-paths",
    "href": "week2/index.html#absolute-and-relative-paths",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Absolute and Relative Paths",
    "text": "Absolute and Relative Paths\n\n\n\n\n\n\nDefinition: Absolute Path\n\n\nAn absolute or full path begins from the lowest level, typically a drive letter or root (/)\n\n\n\n\n\n\n\n\n\nDefinition: Relative Path\n\n\nA relative path refers to a location that is relative to the current directory. They typically start with a . (although this may be hidden from the user)\n\n\n\nExamples:\n\nAbsolute path: C:\\Documents\\ETC5513-Assignment-Solutions\nRelative path: ./assignment-solutions"
  },
  {
    "objectID": "week2/index.html#absolute-and-relative-paths-1",
    "href": "week2/index.html#absolute-and-relative-paths-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Absolute and Relative paths",
    "text": "Absolute and Relative paths\nAbsolute paths are generally to be avoided - it is extremely unlikely another person will have the same absolute path as you.\nRelative paths can work on different systems.\n\nIt is essential you understand where directories and files are within your computer\nHaving clarity about that and the projects file architecture gives you total control about their organisation."
  },
  {
    "objectID": "week2/index.html#order-versus-mess",
    "href": "week2/index.html#order-versus-mess",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Order versus mess",
    "text": "Order versus mess"
  },
  {
    "objectID": "week2/index.html#work-projects",
    "href": "week2/index.html#work-projects",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Work projects",
    "text": "Work projects\n\nGive each project a unique working directory/folder\nClean file system: all files related to a single project should be in the same folder\n\ndata (typically a folder)\nfigures (typically a folder)\ncode\nnotes\n\nAll paths should be relative to the project folder. Why?\nRemember, absolute paths are not reproducible"
  },
  {
    "objectID": "week2/index.html#rstudio-project-example",
    "href": "week2/index.html#rstudio-project-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Project Example",
    "text": "RStudio Project Example\n\nData folder: Contains all the data for the project\nImages/Figures folder: Contains all pictures not produced by your code in the qmd file\n.Rproj file: This gets added when we create an RStudio project\nqmd file\nOther R scripts etc…"
  },
  {
    "objectID": "week2/index.html#rstudio-projects",
    "href": "week2/index.html#rstudio-projects",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio projects",
    "text": "RStudio projects\nRStudio projects automatically handle relative paths and working directories\nYou can create an RStudio project\n\nIn a brand new directory\nIn an existing directory where you already have R Code and data\nFrom a version control repository\n\nRead more on Rstudio projects here\n\n\nThey are specific to RStudio -&gt; If you use a different IDE you need a different solution"
  },
  {
    "objectID": "week2/index.html#creating-a-new-project",
    "href": "week2/index.html#creating-a-new-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a new project",
    "text": "Creating a new project\nFile &gt; New project &gt; Fill out the Options"
  },
  {
    "objectID": "week2/index.html#rstudio-project-advantages",
    "href": "week2/index.html#rstudio-project-advantages",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Project Advantages",
    "text": "RStudio Project Advantages\nWhen you make a new RStudio Project, it:\n\nCreates a project file (with the .Rproj extension) within the project directory\n\nThis file can be used a as a shortcut to open the project directly\n\nCreates a hidden directory (.Rproj.user) where project-specific temporary fiels are stored\nLoads the project into RStudio and displays it’s name in the Projects toolbar"
  },
  {
    "objectID": "week2/index.html#what-is-markdown",
    "href": "week2/index.html#what-is-markdown",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is Markdown?",
    "text": "What is Markdown?\nMarkdown is a lightweight markup language that you can use to add formatting elements to plain text documents.\nIt was created by John Gruber in 2004. Read more here\n\nMarkdown is a “text” formatting syntax\nCan be rendered to more complex formats such as pdf, html, pdf, doc, …"
  },
  {
    "objectID": "week2/index.html#main-tools-for-combining-r-code-and-text",
    "href": "week2/index.html#main-tools-for-combining-r-code-and-text",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Main tools for combining R code and text",
    "text": "Main tools for combining R code and text\nOur main tool is going to be R and it’s packages. We will be using R via RStudio.\n\nR is structured into libraries\nFor reproducibility, we have two libraries that are crucial\nDoes anyone know which ones are those?"
  },
  {
    "objectID": "week2/index.html#quarto-documents",
    "href": "week2/index.html#quarto-documents",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto documents",
    "text": "Quarto documents\n\nQuarto could be considered a file format, for making dynamic documents with R.\nQuarto documents have extension qmd"
  },
  {
    "objectID": "week2/index.html#quarto",
    "href": "week2/index.html#quarto",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto",
    "text": "Quarto\n\n\n\n\n\n\nQuarto\n\n\n\nProvides an environment where you can write your complete analysis, and combines your text and code together into a rich document\nYou write your code as code chunks, put your text around that, and then you get a fully reproducible document"
  },
  {
    "objectID": "week2/index.html#elements-in-a-quarto-document",
    "href": "week2/index.html#elements-in-a-quarto-document",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Elements in a Quarto Document",
    "text": "Elements in a Quarto Document\nThere are three parts to a Quarto document\n\nMetadata (YAML)\nText (formatted with Markdown)\nCode (code formatting)\n\n\nBefore we dive into the Quarto file structure, let’s talk about Markdown."
  },
  {
    "objectID": "week2/index.html#dynamic-documents",
    "href": "week2/index.html#dynamic-documents",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Dynamic documents",
    "text": "Dynamic documents\nQuarto + knitr = Dynamic document\n\nQuarto allows us to not only use Markdown to write the text in the report, it also allows us to include R code.\nknitr combines with pandoc to render documents that contain a mixture of these components\npandoc is used by the quarto package to render a qmd file into a new format.\n\n\n\nPandoc is a universal document converter.\nIt takes Markdown, word documents, powerpoint slides, LaTeX and a bunch of other documents and converts between them. You can read more about Pandoc here."
  },
  {
    "objectID": "week2/index.html#possible-outputs",
    "href": "week2/index.html#possible-outputs",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Possible outputs",
    "text": "Possible outputs"
  },
  {
    "objectID": "week2/index.html#quarto-file-structure",
    "href": "week2/index.html#quarto-file-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto file structure",
    "text": "Quarto file structure\nThree main components: YAML, text and R code chunks."
  },
  {
    "objectID": "week2/index.html#component-breakdown-yaml",
    "href": "week2/index.html#component-breakdown-yaml",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Component breakdown: YAML",
    "text": "Component breakdown: YAML\nMetadata is written at the top of the file, between --- in YAML.\n---\ntitle: \"ETC5513\"\nauthor: \"Michael Lydeamore\"\nformat: html\n---"
  },
  {
    "objectID": "week2/index.html#component-breakdown-text",
    "href": "week2/index.html#component-breakdown-text",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Component breakdown: Text",
    "text": "Component breakdown: Text\nText is written in Markdown\n# This is a section header\nThis is a section header\n## This is a subsection header\nThis is a subsection header\nIn this section, something is **important**\nIn this section, something is important"
  },
  {
    "objectID": "week2/index.html#writing-text-hyperlinks-and-sections",
    "href": "week2/index.html#writing-text-hyperlinks-and-sections",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Writing text, hyperlinks and sections",
    "text": "Writing text, hyperlinks and sections\nUsing Markdown: we can write plain text as we would do in any text processor.\n\nWe can easily add hyperlinks:\n\n\nCode:\n[More info about Quarto here](https://quarto.org)\n\nResult:\nMore info about Quarto here"
  },
  {
    "objectID": "week2/index.html#font-types",
    "href": "week2/index.html#font-types",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Font types",
    "text": "Font types\nWe can write things in italic or bold:\n\n\nCode:\n__bold__, **bold**,\n\n_italic_, *italic*\n\nResult:\nbold, bold,\nitalic, italic"
  },
  {
    "objectID": "week2/index.html#markdown-example",
    "href": "week2/index.html#markdown-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Markdown example",
    "text": "Markdown example\n\n\nCode:\n# Header 1\n## Header 2\n\n* Unordered list 1\n\n_This is italic_\n\n*So is this*\n\n**This is bold**\n\n1. Ordered list 1\n\nResult:\nHeader 1\nHeader 2\n\nUnordered list 1\n\nThis is italic\nSo is this\nThis is bold\n\nOrdered list 1"
  },
  {
    "objectID": "week2/index.html#markdown-component-code",
    "href": "week2/index.html#markdown-component-code",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Markdown component: code",
    "text": "Markdown component: code\nR Code is included in chunks:\n\n\nCode:\n```{r}\n#| echo: false\n\nlibrary(ggplot2)\nggplot(cars, \n       aes(x = speed, \n           y = dist)\n       ) +\n  geom_point()\n``` \n\nResult:"
  },
  {
    "objectID": "week2/index.html#r-code",
    "href": "week2/index.html#r-code",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R code",
    "text": "R code\n\n\nCode:\n```{r}\n#| echo: false\n\nlibrary(ggplot2)\n\ndata = data(InsectSprays)\n\nhead(InsectSprays)\n```\n...\n```{r}\n#| echo: false\nggplot(data = InsectSprays,\n       aes(x = spray,\n           y = count,\n           fill = spray)\n       ) +\n  geom_boxplot(alpha = 0.6) +\n  ggtitle(\"Insect sprays boxplots\")\n```\n\nResult:\n\n\n  count spray\n1    10     A\n2     7     A\n3    20     A\n4    14     A\n5    14     A\n6    12     A\n\n\n…"
  },
  {
    "objectID": "week2/index.html#r-code-chunks",
    "href": "week2/index.html#r-code-chunks",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R Code Chunks",
    "text": "R Code Chunks\nYou can quickly insert an R code chunk into your file with:\n\nKeyboard shortcut Ctrl + Alt + I (Mac: Cmd + Option + I)\nThe Add Chunk command in the editor toolbar or\nTyping the chunk delimeters (```)\n\n\nChunk output can be customised with Chunk execution options, which are at the top of a chunk, starting with #|.\n\ninclude: false prevents code and results appearing in the finished file. The code is still run and results can be used in other chunks.\necho: false prevents code but not results appearing in the finished file. This is a useful way to embed figures."
  },
  {
    "objectID": "week2/index.html#more-chunk-options",
    "href": "week2/index.html#more-chunk-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More chunk options",
    "text": "More chunk options\n\neval: false does not evaluate (or run) this code chunk when knitting\nmessage: false prevents messages that are generated by code appearing in the finished file\nwarning: false prevents warnings that are generated appearing in the finished file\nfig.cap = \"Text\" adds a caption to a figure\nfig-align = \"center\" sets the position it will appear\n\n\nThere are loads more of these - see the Quarto documentation for a complete list."
  },
  {
    "objectID": "week2/index.html#global-options",
    "href": "week2/index.html#global-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Global options",
    "text": "Global options\nTo set global options that paply to every chunk in your file, call knitr::opts_chunk$set() in a code chunk.\nThese will be treated as a global default that can be overwritten by individual chunk headers.\nExample:\nknitr::opts_chunk$set(echo = FALSE)"
  },
  {
    "objectID": "week2/index.html#caching",
    "href": "week2/index.html#caching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Caching",
    "text": "Caching\nLong documents can take a long time to run. Quarto has a caching system that can help manage this long execution time.\nYou can set cache as either a chunk option (using #|) or globally in YAML:\nexecute:\n  cache: true\nMore info on caching is in the Quarto manual\n\nUse these with care: It is easy to accidentally not refresh an updated chunk!"
  },
  {
    "objectID": "week2/index.html#example",
    "href": "week2/index.html#example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "week2/index.html#rendering-quarto-to-html",
    "href": "week2/index.html#rendering-quarto-to-html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rendering Quarto to HTML",
    "text": "Rendering Quarto to HTML\nUse the “Render” button at the top"
  },
  {
    "objectID": "week2/index.html#rendering-quarto-to-pdf",
    "href": "week2/index.html#rendering-quarto-to-pdf",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rendering Quarto to PDF",
    "text": "Rendering Quarto to PDF\nWe can also knit to a PDF:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRendering a PDF requires LaTeX installed. LaTeX is a high-quality typesetting system, and includes features designed for the production of technical and scientific documentation. We will be using the tinytex R package"
  },
  {
    "objectID": "week2/index.html#knitr-and-pandoc",
    "href": "week2/index.html#knitr-and-pandoc",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "knitr and Pandoc",
    "text": "knitr and Pandoc\n\n\n\n\n\n\n\n\nPandoc: The document converter\nhttps://pandoc.org/index.html\n\n\nknitr executes the code and converts the .qmd to a .md\nPandoc renders the .md to the output format you want"
  },
  {
    "objectID": "week2/index.html#lets-learn-about-yaml",
    "href": "week2/index.html#lets-learn-about-yaml",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Let’s learn about YAML",
    "text": "Let’s learn about YAML\ntitle: \"R Notebook\"\nauthor: \"Michael Lydeamore\"\nformat: \n  html:\n    toc: true\n    theme: solar\n  pdf:\n    toc: true\n  docx:\n    toc: true\ntoc: Table of contents. You can read more abotu that here"
  },
  {
    "objectID": "week2/index.html#this-is-the-resulting-html",
    "href": "week2/index.html#this-is-the-resulting-html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "This is the resulting HTML",
    "text": "This is the resulting HTML"
  },
  {
    "objectID": "week2/index.html#tables-and-captions",
    "href": "week2/index.html#tables-and-captions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tables and Captions",
    "text": "Tables and Captions\nCode:\n```{r}\nlibrary(dslabs)\ndata(murders)\ntable_data &lt;- head(murders, 5)\n\nknitr::kable(table_data, \n             caption = \"Gun murder data\n             from FBI reports by state\",\n             digits = 2)\n```\nResult:\n\n\n\nGun murder data from FBI reports by state\n\n\nstate\nabb\nregion\npopulation\ntotal\n\n\n\n\nAlabama\nAL\nSouth\n4779736\n135\n\n\nAlaska\nAK\nWest\n710231\n19\n\n\nArizona\nAZ\nWest\n6392017\n232\n\n\nArkansas\nAR\nSouth\n2915918\n93\n\n\nCalifornia\nCA\nWest\n37253956\n1257"
  },
  {
    "objectID": "week2/index.html#tables-and-captions-1",
    "href": "week2/index.html#tables-and-captions-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tables and Captions",
    "text": "Tables and Captions\nCode:\n```{r}\nlibrary(dslabs)\ndata(murders)\ntable_data &lt;- head(murders, 5)\n\nknitr::kable(table_data, \n             caption = \"Gun murder data\n             from FBI reports by state\",\n             digits = 2)\n```\nFor more information, type knitr::kable() into your R console."
  },
  {
    "objectID": "week2/index.html#figures-and-captions",
    "href": "week2/index.html#figures-and-captions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figures and captions",
    "text": "Figures and captions\nFigures from R are created inside code chunks.\nTypically, we will generate figures using ggplot2\nInside the code chunk, we use the fig-cap chunk option to generate a caption.\nYou will also want to include fig-label so it gets a number."
  },
  {
    "objectID": "week2/index.html#figures-and-captions-1",
    "href": "week2/index.html#figures-and-captions-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figures and captions",
    "text": "Figures and captions\n```{r}\n#| fig-label: cars-plot\n#| fig-cap: \"Distance taken for a car to stop, against it's speed during the test.\"\n\nlibrary(ggplot2)\nggplot(cars, \n       aes(x = speed, \n           y = dist)\n       ) +\n  geom_point()\n```\n\nDistance taken for a car to stop, against it’s speed during the test."
  },
  {
    "objectID": "week2/index.html#inserting-external-imagesphotosfigures",
    "href": "week2/index.html#inserting-external-imagesphotosfigures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Inserting external images/photos/figures",
    "text": "Inserting external images/photos/figures\nThere are two different ways to include external pictures.\n```{r}\n#| out-width: \"80%\"\nknitr::include_graphics(\"images/R.png\")\n```\nor\n![](images/R.png){width=\"80%\"}\nI recommend the latter unless for some reason you need some specific R processing.\n\nNote these don’t have to be local links. URLs work just fine!\n\n\n![](https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif)"
  },
  {
    "objectID": "week2/index.html#now-we-know-how-to-create-a-qmd-file",
    "href": "week2/index.html#now-we-know-how-to-create-a-qmd-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Now we know how to create a qmd file",
    "text": "Now we know how to create a qmd file\nBut there is more to a project than that\nA project might have:\n\nData,\nOther R or Quarto scripts\nFigures etc\n\nAll the documents related to a project should be in one folder, often under an RStudio Project."
  },
  {
    "objectID": "week2/index.html#good-coding-style-1",
    "href": "week2/index.html#good-coding-style-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Good Coding Style",
    "text": "Good Coding Style\nCoding style is an opinion-based phenomenon\nThere are different styles and it is important to be careful about how you write your code.\nBad example:\n```{r}\nlibrary(ggplot2)\ndata = data(InsectSprays)\nggplot(data=InsectSprays, aes(spray, count, fill=spray))+geom_boxplot(alpha=0.6)+ggtitle(\"Insect sprays boxplots\")\n```\n\nLong lines, no spaces, no structure: makes it very hard to read and debug"
  },
  {
    "objectID": "week2/index.html#good-example",
    "href": "week2/index.html#good-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Good example",
    "text": "Good example\n```{r}\nlibrary(ggplot2)\n\nggplot(data = InsectSprays,\n       aes(x = spray, \n           y = count,\n           fill = spray)\n       ) +\n  geom_boxplot(alpha = 0.6) +\n  ggtitle(\"Insect sprays boxplots\")\n```\nWe will (mostly) follow the Tidyverse style guide\n\nhttps://style.tidyverse.org\nhttp://adv-r.had.co.nz/Style.html"
  },
  {
    "objectID": "week2/index.html#good-coding-principles",
    "href": "week2/index.html#good-coding-principles",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Good coding principles",
    "text": "Good coding principles\n\nSource code should be readable by humans and self-explanatory\nLong sentences are not good (maximum 80-100 characters)\nInside R code chunks, the tidyverse style guide is a good guide:\n\nUse spaces around &lt;-, +, =, -, after , and before {\nFor comments inside yoru code, use #\n\n\n\n\n\n\n\n\nImportant\n\n\nThe more organised you are writing your code, the eaiser it will be to read it and debug it"
  },
  {
    "objectID": "week2/index.html#practices-for-reproducible-research",
    "href": "week2/index.html#practices-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Practices for reproducible research",
    "text": "Practices for reproducible research\n\nHave a plan to organise, store, and make your files available\nSet up an RStudio Project for each of your projects\nMake sure all the steps in your analysis are documented\nAll files should be human readable\nAll files related to a project should be explicitly tied together"
  },
  {
    "objectID": "week2/index.html#reproducible-workflow",
    "href": "week2/index.html#reproducible-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducible workflow",
    "text": "Reproducible workflow"
  },
  {
    "objectID": "week2/index.html#week-2-lesson",
    "href": "week2/index.html#week-2-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 2 Lesson",
    "text": "Week 2 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nQuarto documents\nR Code Chunk Options\nIncluding figures, tables, captions\nRStudio projects\nGood Coding Practices\n\n\n\n\n\n\n\n\n\n\nResources\n\n\n\nhttps://quarto.org/\nhttps://www.markdownguide.org/getting-started/\nhttps://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects\nhttps://style.tidyverse.org"
  },
  {
    "objectID": "week2/workshop/Week2.html",
    "href": "week2/workshop/Week2.html",
    "title": "Week2Workshop",
    "section": "",
    "text": "Introduction\nIn this tutorial we are looking at the Avian Influenza cases detected globally since 1997.\nUS CDC"
  },
  {
    "objectID": "week3/index.html#etc5513-title",
    "href": "week3/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nIntroduction to version control systems: git and GitHub\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 2\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week3/index.html#open-frame",
    "href": "week3/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week3/index.html#recap",
    "href": "week3/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nReproducible reporting\nQuarto documents\nR Code chunk options\nIncluding images and figures\nComputer file architechture\nR projects\nGood coding practices"
  },
  {
    "objectID": "week3/index.html#aim",
    "href": "week3/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nMotivation for version control\nGit\nIntroduction to the command line interface\nGitHub\nConnecting git and GitHub with our computer using the command line interface\nIntegration between GitHub and RStudio\nWorkflow for using version control\nAssignment 1"
  },
  {
    "objectID": "week3/index.html#project-life-different-versions",
    "href": "week3/index.html#project-life-different-versions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Project life: Different versions",
    "text": "Project life: Different versions\n\nfile1.qmd -&gt; file2.qmd -&gt; … -&gt; file25.qmd\n\nWhat are the issues with this approach?"
  },
  {
    "objectID": "week3/index.html#what-are-the-issues-with-this-approach-1",
    "href": "week3/index.html#what-are-the-issues-with-this-approach-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What are the issues with this approach?",
    "text": "What are the issues with this approach?\n\nComplicated to remember what changes you made in file20.qmd\nCumbersome to compare differences between file versions\nTaking turns to collaborate on the same project and same files\nVery hard to merge file between collaborators\n\nSolution: Use version control!"
  },
  {
    "objectID": "week3/index.html#what-is-a-version-control-system",
    "href": "week3/index.html#what-is-a-version-control-system",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is a version control system?",
    "text": "What is a version control system?\n\n\n\n\n\n\nDefinition: Version Control System\n\n\nVersion control is a system that records changes to a file or set of files over time so that you can recall specific versions later. Git manual"
  },
  {
    "objectID": "week3/index.html#version-control",
    "href": "week3/index.html#version-control",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Version control",
    "text": "Version control\nVersion control systems are a category of software tools that help store and manage changes to source code (projects) over time. They can:\n\ntrack of every modification to the source code in a special kind of database,\nallow you to roll back to previous versions if a mistake is made, and compare the code to fix the problem while minimizing disruption,\nmanage multiple versions of a project easily\n\nIt is a very useful (actually essential!) tool for collaborating and for sharing open source resources."
  },
  {
    "objectID": "week3/index.html#different-version-control-systems",
    "href": "week3/index.html#different-version-control-systems",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different Version control Systems",
    "text": "Different Version control Systems\nLocal version control systems\n\n\nRevision control System (RCS) –&gt; keeps differences between files (time)\n\n\n\n\n\nFigure source & more info\n\n\nCopy files into another directory\nName files with time stamp\nVery hard to collaborate with others\nAll versions under the same hardware\n\n\n\nHighly prone to error\nDifficult to collaborate."
  },
  {
    "objectID": "week3/index.html#different-version-control-systems-1",
    "href": "week3/index.html#different-version-control-systems-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different Version control Systems",
    "text": "Different Version control Systems\nCentralized version control systems (CVS) are now the standard for version control\n\n\n\n\n\n\n\nFigure source & more info\n\n\nHave a single server that contains all the versioned files\nA number of clients that check out files from that central place.\nEasier to collaborate\n\n\n\nServer issues\nEntire history of the project in a single place: You risk losing everything"
  },
  {
    "objectID": "week3/index.html#different-version-control-systems-2",
    "href": "week3/index.html#different-version-control-systems-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different Version control Systems",
    "text": "Different Version control Systems\nDistributed version control systems\n\n\n\n\n\n\n\nFigure source & more info\n\n\nThe repository is fully mirrored, including it’s full history in various servers and/or lcoations\nIf any server malfunctions, the repositories can be restored from any of the other servers\nEvery clone is (theoretically) a full backup of all the data"
  },
  {
    "objectID": "week3/index.html#distributed-version-control-git",
    "href": "week3/index.html#distributed-version-control-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Distributed Version Control: Git",
    "text": "Distributed Version Control: Git\nWe are going to use a distributed version control called Git"
  },
  {
    "objectID": "week3/index.html#git-history",
    "href": "week3/index.html#git-history",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git history",
    "text": "Git history\nGit was created by Linus Torvalds in 2005 for development of the Linux kernel and since then many other kernel developers have been contributing to its development. The maintainer since 2005 is Junio Hamano.\nAs with most other distributed version-control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.\nGit is free and open-source software distributed under the terms of the GNU General Public License version 2.\nMore info here"
  },
  {
    "objectID": "week3/index.html#git-for-us",
    "href": "week3/index.html#git-for-us",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for us",
    "text": "Git for us\n\nA system for controlling our project versions\nA disaster recovery system\nA synchronization service\nA platform for disseminating our work\nA tool for collaboration\n…\n\nMore on Git here"
  },
  {
    "objectID": "week3/index.html#git-overview-in-a-nutshell",
    "href": "week3/index.html#git-overview-in-a-nutshell",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git overview in a nutshell",
    "text": "Git overview in a nutshell\nLet’s think of the connections between the different versions of an R project as a tree (Git tree).\n\n\n\nGit tree example\nWhite circles represent each version of the project\nWe have what we call master/main (default branch)\nWe have branches that appeared and then merged with the master"
  },
  {
    "objectID": "week3/index.html#we-need-to-learn",
    "href": "week3/index.html#we-need-to-learn",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "We need to learn",
    "text": "We need to learn\n\nHow Git operates –&gt; shell/command line\nHow to connect our R projects to a Git repo\nHow to connect our local Git repo to a Git Cloud repository (GitHub)."
  },
  {
    "objectID": "week3/index.html#command-line-interface-cli",
    "href": "week3/index.html#command-line-interface-cli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Command Line Interface (cli)",
    "text": "Command Line Interface (cli)\n\nIn most cases (non-linux users) use a Graphical User Interface (GUI) to interact with their programs and operating systems\nHowever, at the beginning of the computing times most people would use the command line interface to interact with their computer"
  },
  {
    "objectID": "week3/index.html#git-and-command-line",
    "href": "week3/index.html#git-and-command-line",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git and Command Line",
    "text": "Git and Command Line\nWe will learn how to use the shell/command line interface\nWhy?\n\nWe will use the command line interface to interact with Git and with Github\nThe shell or command line interface is an interface where the user types commands\nThis interface allow us to control our computer using commands entered via our keyboard\nThat means that instead of using a graphical user interface (GUI) + our mouse to open and close programs, create folders and moving files, we are going to type commands"
  },
  {
    "objectID": "week3/index.html#command-line-interface",
    "href": "week3/index.html#command-line-interface",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Command Line Interface",
    "text": "Command Line Interface\nAlso known as the Shell, command line interface (cli) or terminal is an interface for typing commands to interact directly with a computer’s operating system.\n\nExamples of things that we can do from the shell or terminal:\n\nNavigating through folders and files\nCreate/delete folders\nRun and install programs (i.e interact with Git)\nAnd much more!"
  },
  {
    "objectID": "week3/index.html#terminal-in-action",
    "href": "week3/index.html#terminal-in-action",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Terminal in action",
    "text": "Terminal in action\nTypically when you open your terminal, it will welcome you with a prompt that looks like this:\npatricia@computerid-macbook:~$\nor with the new Catalina Mac OX\npatricia@computerid ~ % \nOn Windows it will contain the same elements but look like this:\npatricia@computerid-pc MINGW64 ~$"
  },
  {
    "objectID": "week3/index.html#terminal-in-practice",
    "href": "week3/index.html#terminal-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Terminal in practice",
    "text": "Terminal in practice\nWe will start writing commands after ~$ or ~% depending on the terminal version that you are using\n\nThe commands that we are going to use are the same regardless the terminal version you have."
  },
  {
    "objectID": "week3/index.html#what-is-the-path-to-my-current-computer-location",
    "href": "week3/index.html#what-is-the-path-to-my-current-computer-location",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is the path to my current computer location?",
    "text": "What is the path to my current computer location?\npwd: print working directory or present working directory\nmichael@computerid ~ % pwd\n/Users/michael/Documents/ETC5513\nUnderstanding the output of pwd command:\n/Users/michael/Documents/ETC5513\n\n/ represents the root directory\nUsers is the Users directory\nmichael refers to my directory or folder within the users directory\n…"
  },
  {
    "objectID": "week3/index.html#what-is-in-my-directory",
    "href": "week3/index.html#what-is-in-my-directory",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is in my directory?",
    "text": "What is in my directory?\nls lists the files inside the current directory\nmichael@computerid Documents~ % ls Documents\nCourses Research Teaching file.pdf example.txt\n\nDocuments is an argument to the ls command.\nls gives you a list of all the elements in a directory\nls -a list of all the files including hidden ones\n\nEach Linux command (pwd,ls …) have lots of options (flags) that can be added.\nA reference list of unix commands with options might be found here"
  },
  {
    "objectID": "week3/index.html#command-line-basics-navigating-between-directories",
    "href": "week3/index.html#command-line-basics-navigating-between-directories",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Command Line Basics: Navigating between directories",
    "text": "Command Line Basics: Navigating between directories\ncd: Change directory\n\nFirst we need to make sure where we are (pwd).\nThe cd command syntax is very simple, we just need to specify the directory that we want to navigate to\nAt any moment of your navigation, you can use the pwd command to confirm your current location\nA path that starts with / is assumed to be absolute."
  },
  {
    "objectID": "week3/index.html#cd-in-practice",
    "href": "week3/index.html#cd-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "cd in practice!",
    "text": "cd in practice!\nMy current location is Documents. I want to get to Documents/Research/COVID\n\ncd Research means that we move into Research\ncd COVID means that we move into COVID\n. means the current directory COVID\ncd .. means (parent directory) that we move back into Documents\nThe ~ symbol is a shorthand for the user’s home directory and we can use it to form paths:\n\nIf you are in your Downloads directory (/Users/John/Downloads) typing cd ~ will bring you to your Home directory /Users/John!"
  },
  {
    "objectID": "week3/index.html#more-commands-practice",
    "href": "week3/index.html#more-commands-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More commands practice!",
    "text": "More commands practice!\nMy current location is COVID, or really Documents/Research/COVID\n\n.. is shorthand for the parent of the current working directory\ncd .. means that we move into Research (1 directory up). That is from COVID back to Research\ncd ../../ means that we move up two directories: from COVID to Documents\nmkdir Project1 Project2 means “make two new directories (folders) called Project1 and Project2”."
  },
  {
    "objectID": "week3/index.html#more-commands-practice-1",
    "href": "week3/index.html#more-commands-practice-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More commands practice!",
    "text": "More commands practice!\n\nmv move files or folders: takes two arguments, the first being files or folders to move and the second being the path to move to.\ncp this command is used to copy files or group of files or directories. When copy files we need to use cp -r to copy all the directory contents.\nrm remove files and folders\nTo remove entire folders rm requires the -r (recursive) flag\nWe can create empty files with touch example.qmd"
  },
  {
    "objectID": "week3/index.html#cheat-sheet-for-command-line",
    "href": "week3/index.html#cheat-sheet-for-command-line",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Cheat sheet for command line",
    "text": "Cheat sheet for command line\nExcellent summary about the commands that we will be using can be found here.\nPlease read and practice 1-5 sections once you have installed your command line interface/terminal/Git Bash Shell\n\nSee next slides for instructions about how to install your command line interface/terminal/Git Bash Shell.\n\nYou don’t need to learn all linux commands only those that we are going to use!"
  },
  {
    "objectID": "week3/index.html#installing-the-command-line-interface-and-git",
    "href": "week3/index.html#installing-the-command-line-interface-and-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Installing the command line interface and Git",
    "text": "Installing the command line interface and Git"
  },
  {
    "objectID": "week3/index.html#git-for-windows",
    "href": "week3/index.html#git-for-windows",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Windows",
    "text": "Git for Windows\n\nPlease follow the tutorial here. This tutorial teach you step by step how to install Git and the command line interface in your Windows system.\nIf you following the steps above you will get Git install in your computer as well as Git Bash Shell which is the terminal that you will be using if you are a Windows user."
  },
  {
    "objectID": "week3/index.html#git-for-mac",
    "href": "week3/index.html#git-for-mac",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Mac",
    "text": "Git for Mac\n\nGo to Applications folder, open Utilities, double-click on Terminal\nOr open a Finder Window and search for “Terminal”\n\nOnce you have found the terminal:\nOpen your Terminal and check if you have Git installed:\n\nBy typing in your terminal git version\nIf Git is installed you will see something like\ngit version 2.20.1 (Apple Git-117)"
  },
  {
    "objectID": "week3/index.html#git-for-mac-1",
    "href": "week3/index.html#git-for-mac-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Mac",
    "text": "Git for Mac\nIf Git is not installed in your Mac:\n\nType in your terminal brew install git\nAlternatively you can install Git from here"
  },
  {
    "objectID": "week3/index.html#git-for-linux",
    "href": "week3/index.html#git-for-linux",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Linux",
    "text": "Git for Linux\n\nCheck if you have Git installed: Type git version in your terminal.\nIf Git is installed you will see something like: git version 2.20.1\n\nIf Git is not installed:\n\nType in your terminal: sudo apt-get install git"
  },
  {
    "objectID": "week3/index.html#prior-to-the-tutorial",
    "href": "week3/index.html#prior-to-the-tutorial",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Prior to the tutorial:",
    "text": "Prior to the tutorial:\n\nFor Windows users please install Git and the command line interface (Git Bash Shell) following the installation instructions.\nFor Mac and Linux users please make sure you have Git installed and you know where to find your terminal (Mac users –&gt; Applications &gt; Utilities &gt; Terminal), and if not installed, please follow the instructions to install it.\n\nIf you have any problems with the installation please make use of the consultation hours to get some help\nAlso remember that in Moodle you have the Forum for discussion where you can talk to each other, share tricks and resources. Please make use of it!"
  },
  {
    "objectID": "week3/index.html#git-recap",
    "href": "week3/index.html#git-recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git recap",
    "text": "Git recap\n\nTracking all the changes to a project\nAllows you to go back and forth between versions\nCheck files history\nTag specific versions for quick referencing\nReview changes made by collaborators in the project\nCreate project branches that allow you to work on the project without interfering with the master project\nMerging branches to master project\n\nTo interact between our projects and Git, we are going to use the shell/command line interface"
  },
  {
    "objectID": "week3/index.html#how-does-git-work",
    "href": "week3/index.html#how-does-git-work",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How does Git work?",
    "text": "How does Git work?\nWe have learned that Git is a distributed version control system.\nBut how does it actually work?\n\nGit works with snapshots of miniature files systems not with differences\nEvery time you save files in your project, Git takes a picture of what all your files look like at that moment and stores a reference to that snapshot.\nIf files have not changed, Git does not store the file again.\nIf a file has no change, Git stores a link to the previous identical file that it has already stored in the repository history."
  },
  {
    "objectID": "week3/index.html#snapshots-database",
    "href": "week3/index.html#snapshots-database",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Snapshots (Database)",
    "text": "Snapshots (Database)\n\n\n\n\n\n\n\nIllustration source Begining Git and Github"
  },
  {
    "objectID": "week3/index.html#git-tree-and-snapshots-database",
    "href": "week3/index.html#git-tree-and-snapshots-database",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git tree and Snapshots (Database)",
    "text": "Git tree and Snapshots (Database)\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach version corresponds to one of the dots on the git tree."
  },
  {
    "objectID": "week3/index.html#files-in-a-git-repository",
    "href": "week3/index.html#files-in-a-git-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Files in a Git repository",
    "text": "Files in a Git repository\nThe states in a Git repository are: the working directory, the staging area (index) and the git directory:\n\nThe working directory is the current snapshot that you are working on.\nThe staging area (index) is where modified files are marked in their current version ready to be stored in the database (i.e. the index of changes).\nThe git directory is the database where the history is stored\n\nIn your file system you will see the folder and the files of your project\nMore info: Begining Git and Github"
  },
  {
    "objectID": "week3/index.html#components-of-a-git-repository-visually",
    "href": "week3/index.html#components-of-a-git-repository-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Components of a Git repository: Visually",
    "text": "Components of a Git repository: Visually"
  },
  {
    "objectID": "week3/index.html#three-git-states",
    "href": "week3/index.html#three-git-states",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Three Git States",
    "text": "Three Git States\nGit has three main states that your files can reside in: modified, staged, and committed:\n\nModified: you have changed the file but have not committed it to your repository database yet.\nStaged: you have marked a modified file in its current version to go into your next commit snapshot.\nCommitted: the data is safely stored in your local database.\n\nThis leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.\nThese actions occur in your local repository and allow you to create your Git tree!"
  },
  {
    "objectID": "week3/index.html#three-git-states-visually",
    "href": "week3/index.html#three-git-states-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Three Git States Visually",
    "text": "Three Git States Visually\n\n\n\n\n\n\n\nFigure source"
  },
  {
    "objectID": "week3/index.html#local-git-repo-and-remote-git-repository",
    "href": "week3/index.html#local-git-repo-and-remote-git-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Local Git repo and remote Git repository",
    "text": "Local Git repo and remote Git repository"
  },
  {
    "objectID": "week3/index.html#github-is-our-remote-repository",
    "href": "week3/index.html#github-is-our-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub is our remote repository",
    "text": "GitHub is our remote repository\n\n\nGitHub is an interface and cloud hosting service built on top of the Git version control system.\nGit does the version control and Github stores the data remotely.\nGitHub makes your projects accessible on a fully feature project website\n\nMore info about Github here"
  },
  {
    "objectID": "week3/index.html#sign-up-for-a-github-free-account",
    "href": "week3/index.html#sign-up-for-a-github-free-account",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Sign up for a GitHub free account",
    "text": "Sign up for a GitHub free account\nHere you can sign up for a free GitHub account. Please use your Monash email address to create it before the tutorial this week.\nIf you already have a GitHub account and want to keep them all together, you can add another email to your current account."
  },
  {
    "objectID": "week3/index.html#git-repo-and-a-remote-repository",
    "href": "week3/index.html#git-repo-and-a-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git repo and a remote repository",
    "text": "Git repo and a remote repository"
  },
  {
    "objectID": "week3/index.html#github-is-our-remote-repository-1",
    "href": "week3/index.html#github-is-our-remote-repository-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub is our remote repository",
    "text": "GitHub is our remote repository"
  },
  {
    "objectID": "week3/index.html#collaborative",
    "href": "week3/index.html#collaborative",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Collaborative",
    "text": "Collaborative"
  },
  {
    "objectID": "week3/index.html#from-github-to-our-computer",
    "href": "week3/index.html#from-github-to-our-computer",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "From GitHub <–> to our computer",
    "text": "From GitHub &lt;–&gt; to our computer\n\nCreate a repository (repo) on https://www.github.com\nClone this GitHub repository into our computer: making a “local copy”\nWork on our local copy of the repo\nStage and Commit changes to local repository\nPush those changes into the remote repo in GitHub.\nPull changes from the remote repo to our local repository.\n\nOur goal is to have both our local and remote repositories synchronized\nLet’s look at all these in more detail!"
  },
  {
    "objectID": "week3/index.html#creating-a-repo-on-github",
    "href": "week3/index.html#creating-a-repo-on-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a repo on GitHub",
    "text": "Creating a repo on GitHub\n\n\n\nLogin into GitHub\nClick the ‘+’ icon on the top right on the menu bar and select ‘New Repository’."
  },
  {
    "objectID": "week3/index.html#creating-a-repo-on-github-1",
    "href": "week3/index.html#creating-a-repo-on-github-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a repo on GitHub",
    "text": "Creating a repo on GitHub\nImportant:\n\nRepo name\nVisibility: public or private\nMake sure it is initialized with README.md: It is important to have a README.md file for every repository. GitHub will use this file as the “presentation” of the repository and should briefly describe what the repo is about."
  },
  {
    "objectID": "week3/index.html#creating-a-repo-on-github-2",
    "href": "week3/index.html#creating-a-repo-on-github-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a repo on GitHub",
    "text": "Creating a repo on GitHub"
  },
  {
    "objectID": "week3/index.html#configuring-git-in-your-rstudio-using-the-terminal",
    "href": "week3/index.html#configuring-git-in-your-rstudio-using-the-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuring Git in your Rstudio using the terminal",
    "text": "Configuring Git in your Rstudio using the terminal\nFirst open your command line interface/Terminal/Git Bash Shell:"
  },
  {
    "objectID": "week3/index.html#configuring-git-in-your-rstudio-project",
    "href": "week3/index.html#configuring-git-in-your-rstudio-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuring Git in your Rstudio project",
    "text": "Configuring Git in your Rstudio project\nFirst of all we need to get your Git configured in Rstudio (the same follows for your own computer):\nOpen your command line interface/Terminal/Git Bash Shell and type:\n\ngit config --global user.email \"your.email@example.com\"\ngit config --global user.name  \"Your_Firstname Lastname\"\n\nMake sure you use the same email address for this and for setting up your GitHub account.\nTo check that everything is set up correctly, type the following in the CLI:\ngit config --global user.email and git config --global user.email"
  },
  {
    "objectID": "week3/index.html#configuring-git-in-your-rstudio-cloud-project-using-the-r-console",
    "href": "week3/index.html#configuring-git-in-your-rstudio-cloud-project-using-the-r-console",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuring Git in your Rstudio Cloud project using the R console",
    "text": "Configuring Git in your Rstudio Cloud project using the R console\nAlternatively you could type the following in your R console inside Rstudio:\n```{r}\ninstall.packages(usethis)\n\nlibrary(usethis)\n\nusethis::use_git_config(user.name = \"Your Name Surname\",\n                        user.email = \"Your monash email\")\n```"
  },
  {
    "objectID": "week3/index.html#getting-a-remote-repository",
    "href": "week3/index.html#getting-a-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Getting a remote repository",
    "text": "Getting a remote repository\n\n\nGrabs remote repository from a server/cloud (i.e github)\nCreates a new folder (copy of the remote repository) in our computer"
  },
  {
    "objectID": "week3/index.html#cloning-a-github-repo",
    "href": "week3/index.html#cloning-a-github-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Cloning a github repo",
    "text": "Cloning a github repo\nWhen you create a repository on GitHub, it exists as a remote repository.\nUsers can clone your repository to create a local copy on their own computer and sync between the two locations.\n\nMore detailed info here"
  },
  {
    "objectID": "week3/index.html#adding-an-shh-key-into-your-github",
    "href": "week3/index.html#adding-an-shh-key-into-your-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Adding an SHH key into your GitHub",
    "text": "Adding an SHH key into your GitHub\nIn the tutorial you will learn how to add an SSH key into your workflow:\n\nWhen working with a Git repository you will be required to identify yourself to GitHub using your username and password each time to do a commit!.\nAn SSH key is an alternative way to identify yourself that does not require you to enter you username and password every time\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer or in your Rstudio Cloud project.\nIf the keys match, you’re granted access!\n\nMore info here and here"
  },
  {
    "objectID": "week3/index.html#from-github-into-our-computer",
    "href": "week3/index.html#from-github-into-our-computer",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "From Github into our computer",
    "text": "From Github into our computer\n\nFrom our shell or command line: 1. Navigate to the computer location where we want to download the github repo 2. git clone git@github.com:okayama1/Git_demo.git 3. This will create a folder in your computer with the github repository files and folders"
  },
  {
    "objectID": "week3/index.html#git-workflow",
    "href": "week3/index.html#git-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git Workflow",
    "text": "Git Workflow\n\nExample:\n\nWe modified a qmd file from the working directory\nWe add the modified files to the staging area to be stored: git add\nWe move the files from the staging area into the git directory (git commit) capturing a snapshot\nWe connect with the remote repository git push and update files"
  },
  {
    "objectID": "week3/index.html#tracked-and-untracked-files",
    "href": "week3/index.html#tracked-and-untracked-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tracked and untracked files",
    "text": "Tracked and untracked files\n\nIn a git repository tracked files are those which are part of the git repository\nHowever, we can also have untracked files for which their history is not tracked\nTracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about.\nUntracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area.\n\nWe will learn more about this in the coming weeks.\nBut if you want some early reading, have a look here"
  },
  {
    "objectID": "week3/index.html#recap-from-clone-to-first-commit",
    "href": "week3/index.html#recap-from-clone-to-first-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap: From clone to first commit",
    "text": "Recap: From clone to first commit\n\ngit clone \"remote repo address\" is a Git command line utility which is used to target an existing repository and create a clone, or copy of the target repository in your local computer.\ngit add filename is a Git command that adds a change in the working directory to the staging area.\ngit commit -m \"Message\": The Git commit command captures a snapshot of the project’s currently staged changes. (m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\ngit push origin master (or main): The git push command is used to upload local repository content to a remote repository, in this case to the master (or main) branch."
  },
  {
    "objectID": "week3/index.html#github-workflow-visual-example",
    "href": "week3/index.html#github-workflow-visual-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub Workflow: Visual example",
    "text": "GitHub Workflow: Visual example\n\n\n\n\n\n\n\nClone pulls from the GitHub repo\n\n\n\n\n\n\nWorking in your computer and updating the remote repo in GitHub"
  },
  {
    "objectID": "week3/index.html#general-workflow-via-terminal",
    "href": "week3/index.html#general-workflow-via-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "General Workflow (via Terminal)",
    "text": "General Workflow (via Terminal)\nYou typically clone a repo only once. After that each time you work on your repo you will use the following Git commands:\n\ngit pull origin \"branch name\" is used to fetch and download content from a remote repository (after the repo has been cloned) and immediately update the local repository to match that content.\ngit status displays the state of the working directory and the staging area\ngit add file_name adds changes in the working directory to the staging area\ngit commit -m \"Message\" is used to create a snapshot of the staged changes along a timeline of a Git project history\ngit push origin \"branch name\" command is used to upload the local repository content to a remote repository in GitHub"
  },
  {
    "objectID": "week3/index.html#commit-messages",
    "href": "week3/index.html#commit-messages",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commit messages",
    "text": "Commit messages\nWe can write our commit messages like this:\ngit commit -m \"Message\"\nAlternatively, we can also use an external editor. This is useful when we want to create extended commits and if we forget to use git commit -m and we type git commit\n\nOur external editor of choice is VSCode."
  },
  {
    "objectID": "week3/index.html#installing-vs-code",
    "href": "week3/index.html#installing-vs-code",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Installing VS code",
    "text": "Installing VS code\nInstall VSCode here.\nThen set VSCode as follows:\n\nSource here."
  },
  {
    "objectID": "week3/index.html#after-installing-vscode",
    "href": "week3/index.html#after-installing-vscode",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "After installing VSCode",
    "text": "After installing VSCode\nWe need to set VS code as the editor for Git by typing the following in the command line interface/Terminal/Git Bash Shell:\ngit config --global core.editor \"code --wait\"\nYou can check if this has worked by committing without using -m by just typing in your cli git commit.\nThen the VS Code editor will open and you can write your commit directly there.\n\nIf you are a Windows user and this does not work for you, you might need to set up your VSCode path manually."
  },
  {
    "objectID": "week3/index.html#git-learning-process",
    "href": "week3/index.html#git-learning-process",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git Learning Process",
    "text": "Git Learning Process\nFirst of all, learn to manage your own projects on GitHub: get familiar with committing, pushing and pulling.\n\nCreate repos on GitHub first\nAlways initialize repos with README\nClone the repo to your local directory and start adding files and folders!\nData (will go into the data folder)\n\nFor larger files, data can be stored in Googledrive\nwe will also learn how to store large files in GitHub\n\nCommit/Push often.\nSync across all your workstations."
  },
  {
    "objectID": "week3/index.html#rstudio-and-github",
    "href": "week3/index.html#rstudio-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio and GitHub",
    "text": "Rstudio and GitHub\nThe status/staging panel in Rstudio"
  },
  {
    "objectID": "week3/index.html#rstudio-and-github-1",
    "href": "week3/index.html#rstudio-and-github-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio and GitHub",
    "text": "Rstudio and GitHub\nRStudio keeps git constantly scanning the project directory to find any files that have changed or which are new.\n\nBy clicking a file’s little “check-box” you can stage it."
  },
  {
    "objectID": "week3/index.html#understanding-the-symbols-in-the-rstudio-git-panel",
    "href": "week3/index.html#understanding-the-symbols-in-the-rstudio-git-panel",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Understanding the symbols in the Rstudio Git panel",
    "text": "Understanding the symbols in the Rstudio Git panel\n\nBlue-M: a file that is already under version control that has been modified.\nOrange-?: a file that is not under version control (yet…)\nGreen-A: a file that was not under version control, but which has been staged to be committed.\nRed-D: a file under version control has been deleted. To make it really disappear, you have to stage its disappearance and commit.\nPurple-R: a file that was renamed. (Note that git in Rstudio seems to be figuring this out on its own.)"
  },
  {
    "objectID": "week3/index.html#configuration",
    "href": "week3/index.html#configuration",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuration",
    "text": "Configuration\nThe Diff window shows what has changed between the last committed version of a file and its current state.\n\n\n\n\n\n\n\nNote: all this output is available from the command line too, but the Rstudio interface is very nice!"
  },
  {
    "objectID": "week3/index.html#making-a-commit",
    "href": "week3/index.html#making-a-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Making a Commit",
    "text": "Making a Commit\nSuper easy: - After staging the files you want to commit… - Write a brief message (first line short, then as much after that as you want) and hit the commit button."
  },
  {
    "objectID": "week3/index.html#the-history-window",
    "href": "week3/index.html#the-history-window",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The History window",
    "text": "The History window\nAllow us to understand past commits.\n\nEasy inspection past commits.\nSee what changes were made at each commit."
  },
  {
    "objectID": "week3/index.html#important",
    "href": "week3/index.html#important",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Important:",
    "text": "Important:\n\nWe can interact between Git, GitHub and our local repository using the terminal only\nWe can interact between Git, GitHub and our local repository using Rstudio\n\nIn this unit you must learn how to use Git via the command line interface/Terminal/Git Bash shell as that is the universal way of using git and it will be very useful for using with any programming language."
  },
  {
    "objectID": "week3/index.html#to-do-before-the-tutorial",
    "href": "week3/index.html#to-do-before-the-tutorial",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "To do before the tutorial",
    "text": "To do before the tutorial\n\nCreate a GitHub account\nInstall Git and the command line interface in your computers (please see info on previous slides)\nMake sure you read again all this material\nPlease watch the tutorial video before before the tutorial\nComplete the online quiz"
  },
  {
    "objectID": "week3/index.html#week-3-lesson",
    "href": "week3/index.html#week-3-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 3 Lesson",
    "text": "Week 3 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nMotivation for version control\nGit\nIntroduction to command line\nGithub\nIntegration between Github and Rstudio\nWorkflow for using version control"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html",
    "href": "week3/workshop/workshop-03-alt.html",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Audience: First-year Master’s students (new to coding and version control)\nObjective: By the end of these instructions, you will be able to:\n✅ Create a GitHub repository\n✅ Clone it to your computer\n✅ Make changes, commit them, and push updates to GitHub\n\n\n\nGit is a tool that helps you track changes in your code over time. GitHub is a platform that stores your code online and allows you to share it with others.\nWith Git and GitHub, you can:\n\nKeep a history of your changes\n\nWork on projects from different computers\n\nCollaborate with others easily\n\n\n\n\n\n\n\n\nMacOS: Open Terminal and install Git using Homebrew:\n\nbrew install git\n\nWindows: Download and install Git from https://git-scm.com.\nLinux: Install Git using your package manager:\n\nsudo apt install git\n\n\n\n\nGo to https://github.com and sign up.\n\n\n\n\n\n\n\nOpen https://github.com and log in.\n\nIn the top-right corner, click the + icon → New Repository.\n\nFill out the repository details:\n\nRepository name: my-first-repo\n\nDescription: (Optional)\n\nSet it to Public (or Private if preferred)\n\nCheck Add a README file\n\n\nClick Create repository\n\n✅ You’ve created your first repository!\n\n\n\n\n\nOpen your repository on GitHub.\n\nClick the green Code button → Select SSH → Copy the SSH URL.\n\nOpen a terminal (Command Prompt, Git Bash, or similar).\n\nNavigate to a directory where you want to store your project:\n\ncd ~/Documents\n\nClone the repository:\n\ngit clone git@github.com:your-username/my-first-repo.git\n\nChange into the repository folder:\n\ncd my-first-repo\n✅ You’ve now downloaded a local copy of your repository.\n\n\n\n\n\nOpen the repository folder in a text editor (like VS Code).\n\nOpen the README.md file.\n\nAdd a line of text:\n\nThis is my first repository for my coding project.\n\nSave the file.\n\n✅ You’ve made your first change!\n\n\n\n\nNow you need to tell Git to track and save these changes.\n\n\nIn the terminal, check which files have changed:\ngit status\nYou should see the README.md file listed as modified.\n\n\n\n\nStage the file so Git knows to track it:\ngit add README.md\n\n\n\n\nCreate a snapshot of the changes and add a descriptive message:\ngit commit -m \"Added personal message to README\"\n\n\n\n\nSend the changes to GitHub:\ngit push\n✅ Check your repository on GitHub → Refresh the page → Your new content should be visible!\n\n\n\n\n\n\nOpen the README.md file again.\n\nAdd another line of text:\n\nHere’s a second change to my repository.\n\nSave the file.\n\n\n\n\nCheck status:\n\ngit status\n\nStage the change:\n\ngit add README.md\n\nCommit the change:\n\ngit commit -m \"Added second line to README\"\n\nPush the change to GitHub:\n\ngit push\n✅ Refresh your GitHub repository to confirm the update.\n\n\n\n\n\nTo see a history of your commits, type:\ngit log\n\nPress q to exit the log view.\n\n\n\n\n\n💡 Permission denied when cloning?\n- Make sure your SSH key is set up correctly. Follow GitHub’s guide on setting up SSH keys here.\n💡 Git asks for your username and password?\n- You might not be using SSH. Double-check that you copied the SSH URL, not the HTTPS one.\n💡 Changes aren’t showing on GitHub?\n- Make sure you’ve pushed your changes:\ngit push\n\n\n\n\n\nMake changes – Edit your files.\n\nStage changes – git add &lt;filename&gt;\n\nCommit changes – git commit -m \"Message\"\n\nPush changes – git push\n\n\n\n\n\n✅ A GitHub repository created.\n✅ Files cloned to your local machine.\n✅ Successfully edited, committed, and pushed changes to GitHub.\n\n\n\n\n\nTry adding more files and making more commits.\n\nExplore creating a branch and making a pull request.\n\nExperiment with resolving conflicts and merging branches.\n\n\n\n\n\nYou’ve completed the Git and GitHub workshop. Version control will now make your coding projects more organized and stress-free!"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#why-use-git-and-github",
    "href": "week3/workshop/workshop-03-alt.html#why-use-git-and-github",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Git is a tool that helps you track changes in your code over time. GitHub is a platform that stores your code online and allows you to share it with others.\nWith Git and GitHub, you can:\n\nKeep a history of your changes\n\nWork on projects from different computers\n\nCollaborate with others easily"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#setup-requirements",
    "href": "week3/workshop/workshop-03-alt.html#setup-requirements",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "MacOS: Open Terminal and install Git using Homebrew:\n\nbrew install git\n\nWindows: Download and install Git from https://git-scm.com.\nLinux: Install Git using your package manager:\n\nsudo apt install git\n\n\n\n\nGo to https://github.com and sign up."
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#create-a-repository-on-github",
    "href": "week3/workshop/workshop-03-alt.html#create-a-repository-on-github",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Open https://github.com and log in.\n\nIn the top-right corner, click the + icon → New Repository.\n\nFill out the repository details:\n\nRepository name: my-first-repo\n\nDescription: (Optional)\n\nSet it to Public (or Private if preferred)\n\nCheck Add a README file\n\n\nClick Create repository\n\n✅ You’ve created your first repository!"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#clone-the-repository-to-your-computer",
    "href": "week3/workshop/workshop-03-alt.html#clone-the-repository-to-your-computer",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Open your repository on GitHub.\n\nClick the green Code button → Select SSH → Copy the SSH URL.\n\nOpen a terminal (Command Prompt, Git Bash, or similar).\n\nNavigate to a directory where you want to store your project:\n\ncd ~/Documents\n\nClone the repository:\n\ngit clone git@github.com:your-username/my-first-repo.git\n\nChange into the repository folder:\n\ncd my-first-repo\n✅ You’ve now downloaded a local copy of your repository."
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#make-changes-to-a-file",
    "href": "week3/workshop/workshop-03-alt.html#make-changes-to-a-file",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Open the repository folder in a text editor (like VS Code).\n\nOpen the README.md file.\n\nAdd a line of text:\n\nThis is my first repository for my coding project.\n\nSave the file.\n\n✅ You’ve made your first change!"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#stage-commit-and-push-changes",
    "href": "week3/workshop/workshop-03-alt.html#stage-commit-and-push-changes",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Now you need to tell Git to track and save these changes.\n\n\nIn the terminal, check which files have changed:\ngit status\nYou should see the README.md file listed as modified.\n\n\n\n\nStage the file so Git knows to track it:\ngit add README.md\n\n\n\n\nCreate a snapshot of the changes and add a descriptive message:\ngit commit -m \"Added personal message to README\"\n\n\n\n\nSend the changes to GitHub:\ngit push\n✅ Check your repository on GitHub → Refresh the page → Your new content should be visible!"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#make-more-changes-optional",
    "href": "week3/workshop/workshop-03-alt.html#make-more-changes-optional",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Open the README.md file again.\n\nAdd another line of text:\n\nHere’s a second change to my repository.\n\nSave the file.\n\n\n\n\nCheck status:\n\ngit status\n\nStage the change:\n\ngit add README.md\n\nCommit the change:\n\ngit commit -m \"Added second line to README\"\n\nPush the change to GitHub:\n\ngit push\n✅ Refresh your GitHub repository to confirm the update."
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#how-to-check-the-history",
    "href": "week3/workshop/workshop-03-alt.html#how-to-check-the-history",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "To see a history of your commits, type:\ngit log\n\nPress q to exit the log view."
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#troubleshooting-tips",
    "href": "week3/workshop/workshop-03-alt.html#troubleshooting-tips",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "💡 Permission denied when cloning?\n- Make sure your SSH key is set up correctly. Follow GitHub’s guide on setting up SSH keys here.\n💡 Git asks for your username and password?\n- You might not be using SSH. Double-check that you copied the SSH URL, not the HTTPS one.\n💡 Changes aren’t showing on GitHub?\n- Make sure you’ve pushed your changes:\ngit push"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#workflow-summary",
    "href": "week3/workshop/workshop-03-alt.html#workflow-summary",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Make changes – Edit your files.\n\nStage changes – git add &lt;filename&gt;\n\nCommit changes – git commit -m \"Message\"\n\nPush changes – git push"
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#what-success-looks-like",
    "href": "week3/workshop/workshop-03-alt.html#what-success-looks-like",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "✅ A GitHub repository created.\n✅ Files cloned to your local machine.\n✅ Successfully edited, committed, and pushed changes to GitHub."
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#next-steps",
    "href": "week3/workshop/workshop-03-alt.html#next-steps",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "Try adding more files and making more commits.\n\nExplore creating a branch and making a pull request.\n\nExperiment with resolving conflicts and merging branches."
  },
  {
    "objectID": "week3/workshop/workshop-03-alt.html#well-done",
    "href": "week3/workshop/workshop-03-alt.html#well-done",
    "title": "Git and GitHub Workshop",
    "section": "",
    "text": "You’ve completed the Git and GitHub workshop. Version control will now make your coding projects more organized and stress-free!"
  },
  {
    "objectID": "week4/index.html#etc5513-title",
    "href": "week4/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nReproducible reporting using Quarto, git and GitHub\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 4\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week4/index.html#open-frame",
    "href": "week4/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week4/index.html#recap",
    "href": "week4/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nMotivation for version control\nGit\nIntroduction to command line\nGithub\nIntegration between Github and Rstudio\nWorkflow for using version control"
  },
  {
    "objectID": "week4/index.html#aim",
    "href": "week4/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\nLearning more on creating reproducible reports:\n\nReferencing\nQuarto books\nCSS files\n\nMore on Git:\n\nCreate and delete branches\nMerge branches\n\nSolving git conflicts:"
  },
  {
    "objectID": "week4/index.html#connecting-the-dots",
    "href": "week4/index.html#connecting-the-dots",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Connecting the dots",
    "text": "Connecting the dots\nSo far:\n\nLearned to create basic reproducible reports using R\nLearned how to connect our reproducible reports to Git and GitHub (version control)\n\n\nNext:\n\nNeed to learn how to make “professional reports” not only on html but also in pdf\nHow to collaborate on projects with other colleagues\nLearn how to solve issues on GitHub"
  },
  {
    "objectID": "week4/index.html#displaying-figures",
    "href": "week4/index.html#displaying-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Displaying figures",
    "text": "Displaying figures\nOptions inside the R code chunks:\n\nfig-align: Controls the alignment of figures in the report default, center, left, or right\nfig-cap: Captions. fig-cap: \"My amazing graph.\"\nfig-height, fig-width: Size of the figure in inches\nheight, width: Size of your plot in the final file. For example width = \"50%\" which means half of the width of the image container (if the image is directly contained by a page instead of a child element of the page, that means half of the page width).\n\nMore on these controls here"
  },
  {
    "objectID": "week4/index.html#inserting-figures",
    "href": "week4/index.html#inserting-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Inserting figures",
    "text": "Inserting figures\nUsing Markdown syntax:\n![Caption](path-to-image-here){fig-align=\"center\"}\nUsing the knitr package:\n```{r}\n#| out-width: \"80%\"\n#| echo: false\nknitr::include_graphics(\"figs/insert_fig.png\")\n```"
  },
  {
    "objectID": "week4/index.html#setting-up-global-options-for-our-report",
    "href": "week4/index.html#setting-up-global-options-for-our-report",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Setting up global options for our report",
    "text": "Setting up global options for our report\nGlobal options are those that are applied to the entire document.\n\nBest is to add this R code chunk at the beginning of the document before the libraries R code chunk.\nThey can be overwritten by the individual R code chunk options!\nKnitr reference guide here"
  },
  {
    "objectID": "week4/index.html#quarto-and-referencing",
    "href": "week4/index.html#quarto-and-referencing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto and referencing",
    "text": "Quarto and referencing\nQuarto automatically includes referencing information that used to be part of the bookdown package. It’s one of the many advantages of moving to Quarto over RMarkdown.\nIf you’ve used Bookdown before, just note that you no longer need to swap output formats for references to work."
  },
  {
    "objectID": "week4/index.html#including-referencing-and-keeping-figures",
    "href": "week4/index.html#including-referencing-and-keeping-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Including referencing and keeping figures",
    "text": "Including referencing and keeping figures\n```{yaml}\ntitle: \"My Report\"\nauthor: \"Patricia Menéndez\"\noutput:\n  html: default    \n```\n\nInside a folder called filename_files, figures will saved in a subfolder called figure-html (or appropriate document type) be named using the R code chunk names ( remember to name your R code chunks!)\nAlternatively, we can add the following option into your YAML options:\n\n```{yaml}\nknitr:\n  opts_chunk: \n    fig.path: Images/\n```\nThis will create a new folder called Images and will place all the figures inside."
  },
  {
    "objectID": "week4/index.html#figure-referencing",
    "href": "week4/index.html#figure-referencing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figure referencing",
    "text": "Figure referencing\nTo reference figures, we have to include a label and a fig-cap. For example,\n```{r}\n#| label: fig-scatterplot\n#| fig-cap: \"Normalised mileage of cars. Positive values represent above average mileage, negative values indicate negative mileage\"\n#| eval: false\n\ndata(\"mtcars\")  # load data\nmtcars$`car name` &lt;- rownames(mtcars)  # create new column for car names\nmtcars$mpg_z &lt;- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2)  # compute normalized mpg\nmtcars$mpg_type &lt;- ifelse(mtcars$mpg_z &lt; 0, \"below\", \"above\")  # above / below avg flag\nmtcars &lt;- mtcars[order(mtcars$mpg_z), ]  # sort\nmtcars$`car name` &lt;- factor(mtcars$`car name`, levels = mtcars$`car name`)  # convert to factor to retain sorted order in plot.\n\n# Diverging Barcharts\nggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + \n  geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +\n  scale_fill_manual(name=\"Mileage\", \n                    labels = c(\"Above Average\", \"Below Average\"), \n                    values = c(\"above\"=\"#00ba38\", \"below\"=\"#f8766d\")) + \n  labs(subtitle=\"Normalised mileage from 'mtcars'\", \n       title= \"Diverging Bars\", x=\"Normalised mileage\", y=\"Car Name\") + \n  coord_flip()\n```"
  },
  {
    "objectID": "week4/index.html#figure-referencing-1",
    "href": "week4/index.html#figure-referencing-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figure referencing",
    "text": "Figure referencing\n\n\n\n\n\n\n\n\n\n\nFigure 1: Normalised mileage of cars. Positive values represent above average mileage, negative values indicate negative mileage\n\n\n\n\n\n\nCode:\n@fig-scatterplot shows the normalised miles per gallon of a variety of makes of car.\nOutput:\nFigure 1 shows the normalised miles per gallon of a variety of makes of car."
  },
  {
    "objectID": "week4/index.html#referencing-a-table",
    "href": "week4/index.html#referencing-a-table",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a table",
    "text": "Referencing a table\nCiting a table follows the same syntax:\n```{r}\n#| label: tbl-summarytable\n#| tbl-cap: Summary of the dataset\n\nkable(head(mtcars))\n```\n\n\n\n\nTable 1: Summary of the dataset\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\n\n\n\n\nCadillac Fleetwood\n10.4\n8\n472\n205\n\n\nLincoln Continental\n10.4\n8\n460\n215\n\n\nCamaro Z28\n13.3\n8\n350\n245\n\n\nDuster 360\n14.3\n8\n360\n245\n\n\nChrysler Imperial\n14.7\n8\n440\n230\n\n\nMaserati Bora\n15.0\n8\n301\n335"
  },
  {
    "objectID": "week4/index.html#referencing-a-table-1",
    "href": "week4/index.html#referencing-a-table-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a table",
    "text": "Referencing a table\nIn text:\nWe can see the results in @tbl-summarytable\nOutput:\nWe can see the results in Table 1\n\n\n\n\n\n\nWarning\n\n\nIn order for a table to be cross-referenceable, it’s label must start with with tbl-."
  },
  {
    "objectID": "week4/index.html#referencing-a-table-2",
    "href": "week4/index.html#referencing-a-table-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a table",
    "text": "Referencing a table\n\nRemember to create a table we need to organize our data in a data frame or a tibble\nWe can use the kable function from the kableExtra package.\n\nNote that we don’t have to add the caption inside kable, we can use a chunk option. But the functional form will still work."
  },
  {
    "objectID": "week4/index.html#referencing-a-section",
    "href": "week4/index.html#referencing-a-section",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a section",
    "text": "Referencing a section\nTo reference a section, use @sec-label, and add the #sec- identifier to the heading. For example:\n## Introduction {#sec-introduction}\nwhich we would then reference with @sec-introduction.\nNote that for this to work, we need to set number-sections: true in the YAML, as sections are only referred to by numbers."
  },
  {
    "objectID": "week4/index.html#html-reports-templates",
    "href": "week4/index.html#html-reports-templates",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Html reports templates",
    "text": "Html reports templates\n\nTemplates can be modified by changing YAML options\nThere are lots of available Quqarto templates\nYAML can be further modify by using css files. More info here.\n\nLet’s have a look at an example."
  },
  {
    "objectID": "week4/index.html#recap-1",
    "href": "week4/index.html#recap-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\ngit clone is used to target an existing repository and create a clone, or copy of the target repository.\ngit pull is used to fetch and download content from a remote repository and immediately update the local repository to match that content.\ngit status displays the state of the working directory and the staging area\ngit add file_name adds a change in the working directory to the staging area\ngit commit -m \"Message\" (m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\ngit push origin branch name is used to upload local repository content to a remote repository."
  },
  {
    "objectID": "week4/index.html#branching",
    "href": "week4/index.html#branching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Branching",
    "text": "Branching\nEach repository has one default branch, and can have multiple other branches. Branching is a great feature of version control!\n\n\n\nIt allows you to duplicate your existing repository\nUse a branch to isolate development work without affecting other branches in the repository\nModification in a branch can be merged into your project.\n\n\n\n\n\n\n\n\nBranching is particularly important with Git as it is the mechanism that is used when you are collaborating with other researchers/data scientists."
  },
  {
    "objectID": "week4/index.html#head",
    "href": "week4/index.html#head",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "HEAD",
    "text": "HEAD\nHEAD is a pointer that Git uses to reference the current snapshot that we are looking at."
  },
  {
    "objectID": "week4/index.html#creating-branches-from-github",
    "href": "week4/index.html#creating-branches-from-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating branches from GitHub",
    "text": "Creating branches from GitHub\nYou can create branches directly on GitHub. More info here"
  },
  {
    "objectID": "week4/index.html#creating-branches-on-github",
    "href": "week4/index.html#creating-branches-on-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating branches on GitHub",
    "text": "Creating branches on GitHub"
  },
  {
    "objectID": "week4/index.html#deleting-branches-from-github",
    "href": "week4/index.html#deleting-branches-from-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Deleting branches from GitHub",
    "text": "Deleting branches from GitHub\nYou can also delete branches directly on GitHub"
  },
  {
    "objectID": "week4/index.html#cli",
    "href": "week4/index.html#cli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "CLI",
    "text": "CLI\n\nAs you get more comfortable with git, you might find this a bit slow and tedious.\nWe will be using our command line interface/Terminal or Git Bash to create and move across branches."
  },
  {
    "objectID": "week4/index.html#create-branches-using-the-terminalshellcli",
    "href": "week4/index.html#create-branches-using-the-terminalshellcli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Create branches using the Terminal/Shell/CLI",
    "text": "Create branches using the Terminal/Shell/CLI\nWe use the git branch and git switch commands.\n\ngit branch show us the branches we have in our repo and marks our current branch with *\ngit branch newbranch_name creates a new branch but does not move the HEAD of the repo there.\ngit switch newbranch_name moves the HEAD to newbranch_name"
  },
  {
    "objectID": "week4/index.html#git-head-and-switch",
    "href": "week4/index.html#git-head-and-switch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git HEAD and switch",
    "text": "Git HEAD and switch\nHow does Git know what branch you’re currently on?\nBy using the pointer: HEAD. In Git, this is a pointer to the local branch you are currently on.\nInternally, the git switch command updates the HEAD to point to either the specified branch or commit."
  },
  {
    "objectID": "week4/index.html#another-way-to-create-and-switch-branches",
    "href": "week4/index.html#another-way-to-create-and-switch-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Another way to create and switch branches",
    "text": "Another way to create and switch branches\nUsing the switch command\n\ngit switch -c newbranch_name creates a new branch and moves the repo HEAD to this branch\nYou can confirm it by using git branch to see in which branch you are currently in\nChecking out a branch updates the files in the working directory to match the version stored in that branch\nIt tells Git to record all new commits on that branch."
  },
  {
    "objectID": "week4/index.html#updating-those-new-branches-in-the-remote-repo-in-github",
    "href": "week4/index.html#updating-those-new-branches-in-the-remote-repo-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Updating those new branches in the remote repo in GitHub",
    "text": "Updating those new branches in the remote repo in GitHub\n\nWe can just update the newly created branch into GitHub with:\n\ngit push origin newbranch_name\nAlternatively if we had files or changes added into that branch: - git add . (adding all the modified files into the staging area) - git commit -m \"Updating new newbranch_name\" - git push origin newbranch_name"
  },
  {
    "objectID": "week4/index.html#merging-branches",
    "href": "week4/index.html#merging-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches",
    "text": "Merging branches\n\ngit checkout main: First move to the branch we want to move content into\ngit merge newbranch_name -m \"Merging branches\"\ngit push origin main to update the remote repository\n\nRemember, we can use git status to check the status of our repo at any time."
  },
  {
    "objectID": "week4/index.html#check-out-before-creating-new-branch",
    "href": "week4/index.html#check-out-before-creating-new-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Check out before creating new branch",
    "text": "Check out before creating new branch\nIt is essential to git switch before creating a new branch.\nIf the branch where you are currently working was already merged with the main branch you’ll need to undo almost all the changes from the old branch that did not make it into the main branch.\nReason: all the old changes from that branch will appear as new changes in combination with the changes that are actually new.\nIt is fixable but a mess that you want to avoid!\n\n\n\n\n\n\nCaution\n\n\nDon’t create branches from a branch that is not the main branch unless you are deliberately doing it"
  },
  {
    "objectID": "week4/index.html#deleting-branches-using-cli-1",
    "href": "week4/index.html#deleting-branches-using-cli-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Deleting branches using CLI",
    "text": "Deleting branches using CLI\nTo delete a branch from your remote repository (GitHub):\ngit push origin --delete Name_of_branch"
  },
  {
    "objectID": "week4/index.html#more-on-branching",
    "href": "week4/index.html#more-on-branching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More on Branching",
    "text": "More on Branching\nImagine that you are working on your local repository and a collaborator has created a new branch in your remote repo.\nYou are currently working on your local repo and want to have a look at the new branch. That means that the local repo and your remote repo have diverged.\nThat is, both the local and remote repositories are not currently synchronized.\n\nTo synchronize your work: git fetch origin\ngit fetch origin looks where origin is and fetches any data from it that you don’t yet have.\nIt also updates your local database repo (if it can), moving your origin/main pointer (HEAD) to its new, more up-to-date position."
  },
  {
    "objectID": "week4/index.html#about-remotes",
    "href": "week4/index.html#about-remotes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "About remotes",
    "text": "About remotes\nNote: If the git repo contains more than one remote, such as origin and upstream, git fetch will fetch all the changes from all of the remotes.\ngit fetch origin will only fetch the changes from remote origin"
  },
  {
    "objectID": "week4/index.html#fetch-workflow",
    "href": "week4/index.html#fetch-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Fetch workflow",
    "text": "Fetch workflow\n\ngit fetch updates all remote branches\nGood practice to check branches available for checkout\nMake a local working copy of the branch\n\nWorkflow\n\ngit remote (The git remote command lets you create, view, and delete connections to remote repositories.)\ngit fetch origin: fetch the changes from remote origin (Fetching is what you do when you want to see what everybody else has been working on in the remote repo)\ngit branch -a shows all the branches available in the local repository + all the branches fetched from the remote.\n\nThe branches fetched from the remote origin would be preceded by remotes/origin/"
  },
  {
    "objectID": "week4/index.html#etiquette-for-working-on-someone-else-branch",
    "href": "week4/index.html#etiquette-for-working-on-someone-else-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Etiquette for working on someone else branch",
    "text": "Etiquette for working on someone else branch\n\nTo work on someone’s branch, make a local copy of it\nWork on your local branch (new branch)\nThen push that new branch to the remote repository\n\nTo do that: - First make sure you are working in that branch in your local repo: git branch -a - Add changes into the staging area, commit and push changes to the corresponding branch into the remote repository: git add files, git commit -m \"Message\", git push origin name-of-the-branch"
  },
  {
    "objectID": "week4/index.html#how-to-go-back-to-your-previous-branch",
    "href": "week4/index.html#how-to-go-back-to-your-previous-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How to go back to your previous branch?",
    "text": "How to go back to your previous branch?\n\ngit checkout branchname\n\nImagine that you have two branches:\n\nmain\nAlternative_analysis\n\nTo check in which branch you are currently\n\ngit branch or git branch -a, you will see an * to let you in which branch the HEAD of your repository currently is.\n\nTo go back to main branch (assuming that you were in there): git checkout main"
  },
  {
    "objectID": "week4/index.html#merging-branches-sucessfully",
    "href": "week4/index.html#merging-branches-sucessfully",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches sucessfully",
    "text": "Merging branches sucessfully\nSuppose we have two branches: main and new_development and our goal is to bring changes from the branch new_development into our main branch:\n\nFor merging, go to main branch: git checkout main\ngit merge new_development\ngit push origin main\nThis will incorporate the changes made in the branch new_development into the main branch.\n\nIf those steps are successful your new_development branch will be fully integrated within the main branch."
  },
  {
    "objectID": "week4/index.html#merging-branches-with-conflicts",
    "href": "week4/index.html#merging-branches-with-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches with conflicts",
    "text": "Merging branches with conflicts\nHowever, it is possible that Git will not be able to automatically resolve some conflicts,\n# Auto-merging index.html\n# CONFLICT (content): Merge conflict in index.html\n# Automatic merge failed; fix conflicts and then commit the result.\n\n\n\n\n\n\nImportant\n\n\nDo not panic.\n\n\n\nNo-one likes merge conflicts but they happen, and are fixable."
  },
  {
    "objectID": "week4/index.html#you-will-need-to-resolve-the-conflicts",
    "href": "week4/index.html#you-will-need-to-resolve-the-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "You will need to resolve the conflicts",
    "text": "You will need to resolve the conflicts\nYou will have to resolve them manually.\nThis normally happens when two branches have the same file but with two different versions of the file. In that case Git is not able to figure out which version to use and is asking you to resolve the conflict."
  },
  {
    "objectID": "week4/index.html#resolving-merging-conflicts",
    "href": "week4/index.html#resolving-merging-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving merging conflicts",
    "text": "Resolving merging conflicts\nFirst, figure out which files are affected by the conflict:\n\ngit status\ngit status\n# On branch main\n# You have unmerged paths.\n#   (fix conflicts and run \"git commit\")\n# \n# Unmerged paths:\n#   (use \"git add &lt;file&gt;...\" to mark resolution)\n# \n#     both modified:      example.Rmd\n# \n# no changes added to commit (use \"git add\" and/or \"git commit -a\")"
  },
  {
    "objectID": "week4/index.html#resolving-the-conflict",
    "href": "week4/index.html#resolving-the-conflict",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving the conflict",
    "text": "Resolving the conflict\n\nOpen the file with a text editor\nGo to the lines which are marked with\n\n&lt;&lt;&lt;&lt;&lt;&lt;, ====== , and &gt;&gt;&gt;&gt;&gt;&gt;\nEdit the file\n\ngit add filename\ngit commit -m \"Message\"\ngit push origin main"
  },
  {
    "objectID": "week4/index.html#resolving-conflicts",
    "href": "week4/index.html#resolving-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts\nWhen you open the conflict file in a text editor such as Rstudio, you will see the conflicted part marked like this:\n/* code unaffected by conflict */\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n/* code from main that caused conflict */\n=======\n/* code from feature that caused conflict */\n&gt;&gt;&gt;&gt;&gt;&gt;\nWhen Git encounters a conflict, it adds &lt;&lt;&lt;&lt; ; &gt;&gt;&gt;&gt; and ======= to highlight the parts that caused the conflict and need to be resolved."
  },
  {
    "objectID": "week4/index.html#resolving-conflicts-in-practice",
    "href": "week4/index.html#resolving-conflicts-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts in practice",
    "text": "Resolving conflicts in practice\n\nOpen the file in a text editor (for example Rstudio)\nDecide which part of the code you need to keep in the final main branch\nRemove the irrelevant code and the conflict indicators\nRun git add to stage the file/s and git commit to commit the changes: this will generate the merge commit."
  },
  {
    "objectID": "week4/index.html#resolving-the-conflict-1",
    "href": "week4/index.html#resolving-the-conflict-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving the conflict",
    "text": "Resolving the conflict"
  },
  {
    "objectID": "week4/index.html#merging-branches-1",
    "href": "week4/index.html#merging-branches-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches",
    "text": "Merging branches"
  },
  {
    "objectID": "week4/index.html#creating-branches-from-rstudio",
    "href": "week4/index.html#creating-branches-from-rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating branches from Rstudio",
    "text": "Creating branches from Rstudio\n\n\n\n\n\n\n\nImportant\n\n\nWhen we create a branch using Rstudio the branch is created both in the local and in the remote repository (at the same time.)"
  },
  {
    "objectID": "week4/index.html#keep-refreshing-rstudio-cloud",
    "href": "week4/index.html#keep-refreshing-rstudio-cloud",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Keep refreshing Rstudio (Cloud)",
    "text": "Keep refreshing Rstudio (Cloud)\nOtherwise some of your branches and changes might not be updated."
  },
  {
    "objectID": "week4/index.html#diff-window-in-rstudio",
    "href": "week4/index.html#diff-window-in-rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Diff window in Rstudio",
    "text": "Diff window in Rstudio"
  },
  {
    "objectID": "week4/index.html#rstudio-demo",
    "href": "week4/index.html#rstudio-demo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio Demo",
    "text": "Rstudio Demo"
  },
  {
    "objectID": "week4/index.html#coming-up",
    "href": "week4/index.html#coming-up",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Coming up…",
    "text": "Coming up…\nAfter your tutorial this week:\nIn the next weeks, we will be using VSCode\n\nTo help us resolve conflicts\nTo have a nicer way for visualizing Git trees + much more!"
  },
  {
    "objectID": "week4/index.html#dont-forget-about-assignment-1",
    "href": "week4/index.html#dont-forget-about-assignment-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Don’t forget about Assignment 1!",
    "text": "Don’t forget about Assignment 1!\n\nFor this first assignment your repository can be private. However, when you submit your assignment make sure you make it public.\nThink that you will be able to show case this assignment on your GitHub account so that you can start building your projects portfolio.\nPlease come to any of the consultation hours if you have any questions."
  },
  {
    "objectID": "week4/index.html#week-4-lesson",
    "href": "week4/index.html#week-4-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 4 Lesson",
    "text": "Week 4 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nLearned more on creating reproducible reports:\n\nReferencing\nTalk about css files\n\nMore on Git:\n\nBranches\n\nSolving Git merging conflicts\nInstall VSCode as a GUI to work with Git/GitHub and as a text editor for commits."
  },
  {
    "objectID": "week4/workshop/index.html",
    "href": "week4/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Using the repo from last week, open the .Rproj file to start the RStudio Project.\n\n\n\n\n\n\nTip\n\n\n\nIf you don’t have an RStudio project from last week’s workshop, create one now.\n\n\n\nCreate a file called week4.qmd. Add the following to the YAML:\n\nTitle: Learning to reference figures, tables and sections\nAuthor: Write your name\nTodays date\nFormat: HTML\n\nUsing the command line interface, stage, commit and push the changes to the remote repo.\nGo to GitHub and inspect your commits in the remote repo."
  },
  {
    "objectID": "week4/workshop/index.html#exercise-1-adding-a-new-file-in-a-repo",
    "href": "week4/workshop/index.html#exercise-1-adding-a-new-file-in-a-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Using the repo from last week, open the .Rproj file to start the RStudio Project.\n\n\n\n\n\n\nTip\n\n\n\nIf you don’t have an RStudio project from last week’s workshop, create one now.\n\n\n\nCreate a file called week4.qmd. Add the following to the YAML:\n\nTitle: Learning to reference figures, tables and sections\nAuthor: Write your name\nTodays date\nFormat: HTML\n\nUsing the command line interface, stage, commit and push the changes to the remote repo.\nGo to GitHub and inspect your commits in the remote repo."
  },
  {
    "objectID": "week4/workshop/index.html#exercise-2-creating-a-branch",
    "href": "week4/workshop/index.html#exercise-2-creating-a-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Exercise 2: Creating a branch",
    "text": "Exercise 2: Creating a branch\nFor this exercise, continue working in the same project as in Exercise 1\n\nUse the terminal to create a new branch using git branch globaloptions\nSwitch to this branch using git switch globaloptions\nRefresh your Rstudio to see which branch you are currently working in\nSwitch back to main using git switch main, and check you can see it in RStudio.\nSwitch again back to globaloptions\nDelete the branch using git branch -d globaloptions. What error do you get?\nSwitch to main and again try to delete globaloptions\nRe-create global options as in Step 2. Inside the week4.qmd, modify the YAML to include the following options:\n\n\nexecute:\n    echo: false\n    warning: false\n    message: false\n\nStage, commit and push the changes to the remote repo in GitHub.\nCheck you can see the new branch on GitHub.\n\n\nExtension\nMerge the branch globaloptions into the main branch."
  },
  {
    "objectID": "week5/tutorial/solution.html",
    "href": "week5/tutorial/solution.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this exercise, you’ll work with a partner to practice real-world collaboration on GitHub.\nYou’ll learn how to:\n\nFork a GitHub repo created by your teammate\nMake a change\nSubmit a pull request (PR)\nReview and merge someone else’s PR\n\n\n\n\nAssign roles in your pair:\n\nStudent A = Repository Owner\n\nStudent B = Contributor (forks and submits a pull request)\n\nYou’ll switch roles after completing the exercise.\n\n\n\n\n\nGo to https://github.com and log in.\n\nClick + → New Repository\n\nName the repository something simple, like collab-demo\n\n✅ Check Add a README file\n\nClick Create Repository\n\nShare the URL of the repository with Student B\nNow clone the repository to your own computer:\n\nClick the green Code button → choose SSH and copy the URL\n\nIn your terminal:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\nCreate a new RStudio Project in an existing directory:\n\nOpen RStudio\n\nGo to File → New Project → Existing Directory\n\nBrowse to the folder you just cloned (e.g., collab-demo)\n\nClick Create Project\n\nAdd, commit and push the .Rproj file that gets created:\ngit add .Rproj\ngit commit -m \"Add .Rproj file\"\ngit push origin main\n\n✅ Done! Your repository is ready for your partner to fork and contribute.\n\n\n\n\n\nOpen the repo link your partner (Student A) shared.\nClick the “Fork” button (top-right corner).\nOn your forked copy, click Code → SSH and copy the URL.\nOpen your terminal and clone your fork:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\n\nOpen this folder in RStudio and edit the README file to include your name\nSave the file, then stage, commit, and push:\n\ngit add README.md\ngit commit -m \"Add line to README\"\ngit push origin main\n\nGo back to your forked repository on GitHub.\nClick “Compare & pull request”, then Create pull request.\n\n✅ You’ve submitted your contribution!\n\n\n\n\n\nGo to your original repository on GitHub.\nYou should see a new pull request from your partner.\nClick it → Review the changes.\nClick Merge pull request, then Confirm merge.\n(Optional) Delete the branch after merging.\n\n🎉 Your teammate’s changes are now part of the main repository!\n\n\n\n\nSwitch roles so both students get experience creating, forking, and merging."
  },
  {
    "objectID": "week5/tutorial/solution.html#step-1-pair-up",
    "href": "week5/tutorial/solution.html#step-1-pair-up",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Assign roles in your pair:\n\nStudent A = Repository Owner\n\nStudent B = Contributor (forks and submits a pull request)\n\nYou’ll switch roles after completing the exercise."
  },
  {
    "objectID": "week5/tutorial/solution.html#step-2-student-a-create-a-starter-repository",
    "href": "week5/tutorial/solution.html#step-2-student-a-create-a-starter-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to https://github.com and log in.\n\nClick + → New Repository\n\nName the repository something simple, like collab-demo\n\n✅ Check Add a README file\n\nClick Create Repository\n\nShare the URL of the repository with Student B\nNow clone the repository to your own computer:\n\nClick the green Code button → choose SSH and copy the URL\n\nIn your terminal:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\nCreate a new RStudio Project in an existing directory:\n\nOpen RStudio\n\nGo to File → New Project → Existing Directory\n\nBrowse to the folder you just cloned (e.g., collab-demo)\n\nClick Create Project\n\nAdd, commit and push the .Rproj file that gets created:\ngit add .Rproj\ngit commit -m \"Add .Rproj file\"\ngit push origin main\n\n✅ Done! Your repository is ready for your partner to fork and contribute."
  },
  {
    "objectID": "week5/tutorial/solution.html#step-3-student-b-fork-and-contribute",
    "href": "week5/tutorial/solution.html#step-3-student-b-fork-and-contribute",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Open the repo link your partner (Student A) shared.\nClick the “Fork” button (top-right corner).\nOn your forked copy, click Code → SSH and copy the URL.\nOpen your terminal and clone your fork:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\n\nOpen this folder in RStudio and edit the README file to include your name\nSave the file, then stage, commit, and push:\n\ngit add README.md\ngit commit -m \"Add line to README\"\ngit push origin main\n\nGo back to your forked repository on GitHub.\nClick “Compare & pull request”, then Create pull request.\n\n✅ You’ve submitted your contribution!"
  },
  {
    "objectID": "week5/tutorial/solution.html#step-4-student-a-review-and-merge-the-pull-request",
    "href": "week5/tutorial/solution.html#step-4-student-a-review-and-merge-the-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to your original repository on GitHub.\nYou should see a new pull request from your partner.\nClick it → Review the changes.\nClick Merge pull request, then Confirm merge.\n(Optional) Delete the branch after merging.\n\n🎉 Your teammate’s changes are now part of the main repository!"
  },
  {
    "objectID": "week5/tutorial/solution.html#step-5-switch-roles",
    "href": "week5/tutorial/solution.html#step-5-switch-roles",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Switch roles so both students get experience creating, forking, and merging."
  },
  {
    "objectID": "week5/tutorial/solution.html#step-1-fork-the-repository",
    "href": "week5/tutorial/solution.html#step-1-fork-the-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📦 Step 1: Fork the Repository",
    "text": "📦 Step 1: Fork the Repository\n\nGo to this GitHub repository:\n👉 https://github.com/numbats/rcp\nIn the top-right corner, click the “Fork” button.\nGitHub will create a copy of the repo in your account."
  },
  {
    "objectID": "week5/tutorial/solution.html#step-2-clone-your-fork",
    "href": "week5/tutorial/solution.html#step-2-clone-your-fork",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💻 Step 2: Clone Your Fork",
    "text": "💻 Step 2: Clone Your Fork\n\nOn your forked repository page, click the green Code button.\n\nSelect SSH, then copy the URL.\nOpen your terminal and run:\n\ngit clone git@github.com:your-username/rcp.git\ncd rcp"
  },
  {
    "objectID": "week5/tutorial/solution.html#step-3-add-your-file",
    "href": "week5/tutorial/solution.html#step-3-add-your-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📝 Step 3: Add Your File",
    "text": "📝 Step 3: Add Your File\nInside the project, you’ll see a folder called student-record.\n\nCreate a new file in that folder using your GitHub username. For example:\n\ntouch student-record/MikeLydeamore.md\n\nOpen the file and add a simple message:\n\nHi, I’m MikeLydeamore on GitHub! Here’s my contribution to the rcp project.\n\nSave the file."
  },
  {
    "objectID": "week5/tutorial/solution.html#step-4-commit-and-push",
    "href": "week5/tutorial/solution.html#step-4-commit-and-push",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📬 Step 4: Commit and Push",
    "text": "📬 Step 4: Commit and Push\n\nStage and commit your file:\n\ngit add student-record/jamie-lee.md\ngit commit -m \"Add jamie-lee.md to student-record\"\n\nPush your changes to your fork:\n\ngit push origin main"
  },
  {
    "objectID": "week5/tutorial/solution.html#step-5-create-a-pull-request",
    "href": "week5/tutorial/solution.html#step-5-create-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✅ Step 5: Create a Pull Request",
    "text": "✅ Step 5: Create a Pull Request\n\nGo back to your fork on GitHub.\n\nYou should see a banner to “Compare & pull request” — click it.\n\nConfirm the changes, then click “Create pull request”\n\n🎉 You’ve just submitted a real contribution to a public GitHub repository!"
  },
  {
    "objectID": "week5/tutorial/solution.html#why-this-matters",
    "href": "week5/tutorial/solution.html#why-this-matters",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 Why This Matters",
    "text": "🧠 Why This Matters\nThis is how open-source collaboration works in the real world:\n\nYou fork a project\nMake meaningful changes\nPropose those changes via a pull request\nMaintainers review and (hopefully!) merge your work\n\nYou’re now part of the open-source ecosystem 💪"
  },
  {
    "objectID": "week5/tutorial/index.html",
    "href": "week5/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "In this exercise, you’ll work with a partner to practice real-world collaboration on GitHub.\nYou’ll learn how to:\n\nFork a GitHub repo created by your teammate\nMake a change\nSubmit a pull request (PR)\nReview and merge someone else’s PR\n\n\n\n\nAssign roles in your pair:\n\nStudent A = Repository Owner\n\nStudent B = Contributor (forks and submits a pull request)\n\nYou’ll switch roles after completing the exercise.\n\n\n\n\n\nGo to https://github.com and log in.\n\nClick + → New Repository\n\nName the repository something simple, like collab-demo\n\n✅ Check Add a README file\n\nClick Create Repository\n\nShare the URL of the repository with Student B\nNow clone the repository to your own computer:\n\nClick the green Code button → choose SSH and copy the URL\n\nIn your terminal:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\nCreate a new RStudio Project in an existing directory:\n\nOpen RStudio\n\nGo to File → New Project → Existing Directory\n\nBrowse to the folder you just cloned (e.g., collab-demo)\n\nClick Create Project\n\nAdd, commit and push the .Rproj file that gets created:\ngit add .Rproj\ngit commit -m \"Add .Rproj file\"\ngit push origin main\n\n✅ Done! Your repository is ready for your partner to fork and contribute.\n\n\n\n\n\nOpen the repo link your partner (Student A) shared.\nClick the “Fork” button (top-right corner).\nOn your forked copy, click Code → SSH and copy the URL.\nOpen your terminal and clone your fork:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\n\nOpen this folder in RStudio and edit the README file to include your name\nSave the file, then stage, commit, and push:\n\ngit add README.md\ngit commit -m \"Add line to README\"\ngit push origin main\n\nGo back to your forked repository on GitHub.\nClick “Compare & pull request”, then Create pull request.\n\n✅ You’ve submitted your contribution!\n\n\n\n\n\nGo to your original repository on GitHub.\nYou should see a new pull request from your partner.\nClick it → Review the changes.\nClick Merge pull request, then Confirm merge.\n(Optional) Delete the branch after merging.\n\n🎉 Your teammate’s changes are now part of the main repository!\n\n\n\n\nSwitch roles so both students get experience creating, forking, and merging."
  },
  {
    "objectID": "week5/tutorial/index.html#step-1-pair-up",
    "href": "week5/tutorial/index.html#step-1-pair-up",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Assign roles in your pair:\n\nStudent A = Repository Owner\n\nStudent B = Contributor (forks and submits a pull request)\n\nYou’ll switch roles after completing the exercise."
  },
  {
    "objectID": "week5/tutorial/index.html#step-2-student-a-create-a-starter-repository",
    "href": "week5/tutorial/index.html#step-2-student-a-create-a-starter-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to https://github.com and log in.\n\nClick + → New Repository\n\nName the repository something simple, like collab-demo\n\n✅ Check Add a README file\n\nClick Create Repository\n\nShare the URL of the repository with Student B\nNow clone the repository to your own computer:\n\nClick the green Code button → choose SSH and copy the URL\n\nIn your terminal:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\nCreate a new RStudio Project in an existing directory:\n\nOpen RStudio\n\nGo to File → New Project → Existing Directory\n\nBrowse to the folder you just cloned (e.g., collab-demo)\n\nClick Create Project\n\nAdd, commit and push the .Rproj file that gets created:\ngit add .Rproj\ngit commit -m \"Add .Rproj file\"\ngit push origin main\n\n✅ Done! Your repository is ready for your partner to fork and contribute."
  },
  {
    "objectID": "week5/tutorial/index.html#step-3-student-b-fork-and-contribute",
    "href": "week5/tutorial/index.html#step-3-student-b-fork-and-contribute",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Open the repo link your partner (Student A) shared.\nClick the “Fork” button (top-right corner).\nOn your forked copy, click Code → SSH and copy the URL.\nOpen your terminal and clone your fork:\n\ngit clone git@github.com:your-username/collab-demo.git\ncd collab-demo\n\nOpen this folder in RStudio and edit the README file to include your name\nSave the file, then stage, commit, and push:\n\ngit add README.md\ngit commit -m \"Add line to README\"\ngit push origin main\n\nGo back to your forked repository on GitHub.\nClick “Compare & pull request”, then Create pull request.\n\n✅ You’ve submitted your contribution!"
  },
  {
    "objectID": "week5/tutorial/index.html#step-4-student-a-review-and-merge-the-pull-request",
    "href": "week5/tutorial/index.html#step-4-student-a-review-and-merge-the-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to your original repository on GitHub.\nYou should see a new pull request from your partner.\nClick it → Review the changes.\nClick Merge pull request, then Confirm merge.\n(Optional) Delete the branch after merging.\n\n🎉 Your teammate’s changes are now part of the main repository!"
  },
  {
    "objectID": "week5/tutorial/index.html#step-5-switch-roles",
    "href": "week5/tutorial/index.html#step-5-switch-roles",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Switch roles so both students get experience creating, forking, and merging."
  },
  {
    "objectID": "week5/tutorial/index.html#step-1-fork-the-repository",
    "href": "week5/tutorial/index.html#step-1-fork-the-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📦 Step 1: Fork the Repository",
    "text": "📦 Step 1: Fork the Repository\n\nGo to this GitHub repository:\n👉 https://github.com/numbats/rcp\nIn the top-right corner, click the “Fork” button.\nGitHub will create a copy of the repo in your account."
  },
  {
    "objectID": "week5/tutorial/index.html#step-2-clone-your-fork",
    "href": "week5/tutorial/index.html#step-2-clone-your-fork",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💻 Step 2: Clone Your Fork",
    "text": "💻 Step 2: Clone Your Fork\n\nOn your forked repository page, click the green Code button.\n\nSelect SSH, then copy the URL.\nOpen your terminal and run:\n\ngit clone git@github.com:your-username/rcp.git\ncd rcp"
  },
  {
    "objectID": "week5/tutorial/index.html#step-3-add-your-file",
    "href": "week5/tutorial/index.html#step-3-add-your-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📝 Step 3: Add Your File",
    "text": "📝 Step 3: Add Your File\nInside the project, you’ll see a folder called student-record.\n\nCreate a new file in that folder using your GitHub username. For example:\n\ntouch student-record/MikeLydeamore.md\n\nOpen the file and add a simple message:\n\nHi, I’m MikeLydeamore on GitHub! Here’s my contribution to the rcp project.\n\nSave the file."
  },
  {
    "objectID": "week5/tutorial/index.html#step-4-commit-and-push",
    "href": "week5/tutorial/index.html#step-4-commit-and-push",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "📬 Step 4: Commit and Push",
    "text": "📬 Step 4: Commit and Push\n\nStage and commit your file:\n\ngit add student-record/jamie-lee.md\ngit commit -m \"Add jamie-lee.md to student-record\"\n\nPush your changes to your fork:\n\ngit push origin main"
  },
  {
    "objectID": "week5/tutorial/index.html#step-5-create-a-pull-request",
    "href": "week5/tutorial/index.html#step-5-create-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✅ Step 5: Create a Pull Request",
    "text": "✅ Step 5: Create a Pull Request\n\nGo back to your fork on GitHub.\n\nYou should see a banner to “Compare & pull request” — click it.\n\nConfirm the changes, then click “Create pull request”\n\n🎉 You’ve just submitted a real contribution to a public GitHub repository!"
  },
  {
    "objectID": "week5/tutorial/index.html#why-this-matters",
    "href": "week5/tutorial/index.html#why-this-matters",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 Why This Matters",
    "text": "🧠 Why This Matters\nThis is how open-source collaboration works in the real world:\n\nYou fork a project\nMake meaningful changes\nPropose those changes via a pull request\nMaintainers review and (hopefully!) merge your work\n\nYou’re now part of the open-source ecosystem 💪"
  },
  {
    "objectID": "week6/index.html#etc5513-title",
    "href": "week6/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nReproducible reporting and version control systems\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 6\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week6/index.html#open-frame",
    "href": "week6/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week6/index.html#recap",
    "href": "week6/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nMore Git/GitHub tools\nPull requests: a tool to collaborate with others via GitHub\nVSCode"
  },
  {
    "objectID": "week6/index.html#aim",
    "href": "week6/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nLearn about git rebase\nLearn about git fetch and git merge\nLearn about staging and unstaging files\nLearn how to undo some changes"
  },
  {
    "objectID": "week6/index.html#rebase",
    "href": "week6/index.html#rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebase",
    "text": "Rebase\nIn git, there are two main ways to integrate changes from one branch into another:\n\ngit merge\ngit rebase"
  },
  {
    "objectID": "week6/index.html#merging-branches-using-git-merge",
    "href": "week6/index.html#merging-branches-using-git-merge",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches using git merge",
    "text": "Merging branches using git merge\nIf we use git merge to combine diverging branches, we will have a non-linear history.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\nIn which situation can we merge branches and have a linear history?"
  },
  {
    "objectID": "week6/index.html#rebase-1",
    "href": "week6/index.html#rebase-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebase",
    "text": "Rebase\nRebasing is the process of moving or combining a sequence of commits from a branch onto another branch.\n\nRebasing is most useful and easily visualised in the context of a feature branching workflow\nRebasing changes the base of your branch from one commit to another, making it appear as though you’d created your branch from a different commit.\n\n\n\n\n\n\n\nImportant\n\n\nRebasing moves an entire branch to another location in the repository\n\n\n\nIt can create a cleaner history if you don’t want merge lines everywhere."
  },
  {
    "objectID": "week6/index.html#rebase-in-practice",
    "href": "week6/index.html#rebase-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebase in practice",
    "text": "Rebase in practice\nAssume the following history exists and the current branch is feature:\n          E&lt;---F&lt;---G feature\n         /\n    A&lt;---B&lt;---C&lt;---D main\nIf we want to rebase the commits in the feature branch into the main branch, we need to do the following:\n\n\n\ngit checkout feature and\ngit rebase main\n\nor\n\ngit rebase main feature\n\n\n        feature    E'&lt;--F'&lt;--G' \n                  /\n A&lt;---B&lt;---C&lt;---D main\n\n\nwhich results in:\n   A&lt;---B&lt;---C&lt;---D&lt;---E'&lt;--F'&lt;--G' main"
  },
  {
    "objectID": "week6/index.html#rebasing-can-be-dangerous",
    "href": "week6/index.html#rebasing-can-be-dangerous",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebasing can be dangerous",
    "text": "Rebasing can be dangerous"
  },
  {
    "objectID": "week6/index.html#git-rebase-and-merge",
    "href": "week6/index.html#git-rebase-and-merge",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git rebase and merge",
    "text": "Git rebase and merge\n\nMerging is a non-destructive operation. The existing branches are not changed in any way, and this avoids all the potential problems of rebasing.\nRebasing moves the entire feature branch to begin on the tip of the main branch, incorporating all of the new commits into main.\nRebasing rewrites the project history by creating brand new commits for each commit in the original branch, giving a cleaner history\nHowever, this creates problems with safety and traceability\n\n\n\n\n\n\n\nGolden rule for rebase\n\n\nNever use it on public branches (such as main) in collaborative projects."
  },
  {
    "objectID": "week6/index.html#more-on-branching",
    "href": "week6/index.html#more-on-branching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More on branching",
    "text": "More on branching\nImagine that you are working on your local repository and a collaborator has created a new branch in your remote repo. You are currently working on your local repo and want to have a look at the new branch. That means that the local repo and your remote repo have diverged. That is, both the local and remote repositories are not currently synchronized.\n\nTo synchronize your work: git fetch origin\ngit fetch origin looks where origin is and fetches any data from it that you don’t yet have.\nIt also updates your local database repo, moving your origin/main pointer (HEAD) to its new, more up-to-date position. However, it does not move the HEAD of your local repository"
  },
  {
    "objectID": "week6/index.html#about-remotes",
    "href": "week6/index.html#about-remotes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "About remotes",
    "text": "About remotes\nNote: If a git repo contains more than one remote, then git fetch will fetch all the changes from all remotes.\nTo fetch only one, use git fetch origin (or whatever remote you are after)."
  },
  {
    "objectID": "week6/index.html#how-does-fetch-work",
    "href": "week6/index.html#how-does-fetch-work",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How does fetch work?",
    "text": "How does fetch work?\n\ngit fetch downloaded the new B commit however our local working directory is not updated, and the head of our main branch is still pointing to commit A."
  },
  {
    "objectID": "week6/index.html#how-do-we-merge-those-branches",
    "href": "week6/index.html#how-do-we-merge-those-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How do we merge those branches?",
    "text": "How do we merge those branches?\nWe need to combined main branch with the remote tracking origin/main branch. How?\n\nBy merging!\n\n\nFirst, we need to move in the main branch and then merge origin/main\ngit checkout main\ngit merge origin/main\n\n\nIf the branches have not diverged, we can merge without conflict via a ‘fast merge’.\nIf the branches have diverged, we will need to resolve conflicts.\nYou can check the status of the local and remote branches by using git branch -vv"
  },
  {
    "objectID": "week6/index.html#very-useful-commands-for-fetching",
    "href": "week6/index.html#very-useful-commands-for-fetching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Very useful commands for fetching",
    "text": "Very useful commands for fetching\n\ngit remote lets you create, view, and delete connections to remote repositories.\ngit branch -vv allows you to check the status of your local and remote branches in relation to each other.\ngit fetch origin fetches the changes from remote origin\ngit branch -a lists all the branches available in the local repository + all the branches fetched from the remote.\n\n\n\n\n\n\n\nTip\n\n\nThe branches fetched from the remote origin would be preceded by remotes/origin/"
  },
  {
    "objectID": "week6/index.html#undoing-an-error",
    "href": "week6/index.html#undoing-an-error",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Undoing an error",
    "text": "Undoing an error\nNot everything we do on a project will be worth keeping. We’ve seen already one way to undo some work (git stash). But, that relies on not having already committed the changes.\nWhat if we’ve made a commit, and then realise we don’t want that commit anymore?\n\nWe can reset\n\n\nOr revert"
  },
  {
    "objectID": "week6/index.html#undoing-an-error-1",
    "href": "week6/index.html#undoing-an-error-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Undoing an error",
    "text": "Undoing an error\nFirst, we should discuss checkout. We’ve talked alot about HEAD - that’s the current pointer of the repository.\nWe’ve seen git checkout before too: When swapping between branches!\nFundamentally, branches are just commits with a slightly different pointer. That means, we can checkout to a specific commit.\n\nOne option to go backwards on the git tree and make a new set of changes is to checkout to a commit hash, make the new changes, and then push and manage the merge conflicts."
  },
  {
    "objectID": "week6/index.html#undoing-an-error-2",
    "href": "week6/index.html#undoing-an-error-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Undoing an error",
    "text": "Undoing an error\nHere’s our git tree:\n(a) --- (b) --- (c) --- (d) &lt;- HEAD, main\n\nWhen we checkout b, our git tree changes to:\n(a) --- (b) --- (c) --- (d) &lt;- main\n          \\ \n          HEAD\n\n\nNote that doing this will create diverging histories and so is generally to be avoided. You can overwrite history using git push -f, but this is really discouraged."
  },
  {
    "objectID": "week6/index.html#reset-or-revert",
    "href": "week6/index.html#reset-or-revert",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reset or Revert",
    "text": "Reset or Revert\nThere are two ways to change commit history of a repository: reset and revert.\n\n\n\n\n\n\nTip\n\n\nGenerally, reset is for when the commit isn’t public, and revert is when you’ve already made a public commit.\n\n\n\n\nThis is because reset changes the commit history, and revert does not."
  },
  {
    "objectID": "week6/index.html#two-very-different-tools",
    "href": "week6/index.html#two-very-different-tools",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🛑 Two Very Different Tools",
    "text": "🛑 Two Very Different Tools\n\n\n\n\n\n\n\n\nCommand\nWhat it does\nSafe on shared branches?\n\n\n\n\ngit revert\nAdds a new commit that undoes changes\n✅ Yes\n\n\ngit reset\nMoves branch pointer (can erase commits)\n❌ Use with caution"
  },
  {
    "objectID": "week6/index.html#git-revert",
    "href": "week6/index.html#git-revert",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🔁 git revert",
    "text": "🔁 git revert\n\nSafely undoes a specific commit\nLeaves history intact\nPerfect for undoing mistakes on main or shared branches\n\ngit revert &lt;commit-hash&gt;"
  },
  {
    "objectID": "week6/index.html#git-revert-example",
    "href": "week6/index.html#git-revert-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✍️ git revert Example",
    "text": "✍️ git revert Example\nYou added a bad commit:\ngit log --oneline\nFind the commit to undo, then:\ngit revert abc1234\n✅ Creates a new commit that reverses the changes"
  },
  {
    "objectID": "week6/index.html#git-reset",
    "href": "week6/index.html#git-reset",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧹 git reset",
    "text": "🧹 git reset\n\nRewrites history ⚠️\n\nUsed to go back in time\n\n3 types: --soft, --mixed, --hard\n\ngit reset --hard HEAD~1"
  },
  {
    "objectID": "week6/index.html#reset-variants",
    "href": "week6/index.html#reset-variants",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧪 Reset Variants",
    "text": "🧪 Reset Variants\n--soft\n\nUndo commit, keep staged changes\n\ngit reset --soft HEAD~1\n--mixed (default)\n\nUndo commit, keep unstaged changes\n\ngit reset HEAD~1\n--hard\n\n⚠️ DANGEROUS: Lose commits and file changes\n\ngit reset --hard HEAD~1"
  },
  {
    "objectID": "week6/index.html#visualizing-revert-vs-reset",
    "href": "week6/index.html#visualizing-revert-vs-reset",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🔍 Visualizing Revert vs Reset",
    "text": "🔍 Visualizing Revert vs Reset\nOriginal history:\nA --- B --- C --- D   (main)\n\nYou realize C introduced a bug…\ngit revert C:\n\nA --- B --- C --- D --- E   ← E undoes the changes from C\n\n\nHistory stays intact ✔️"
  },
  {
    "objectID": "week6/index.html#visualizing-revert-vs-reset-1",
    "href": "week6/index.html#visualizing-revert-vs-reset-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🔍 Visualizing Revert vs Reset",
    "text": "🔍 Visualizing Revert vs Reset\nOriginal history:\nA --- B --- C --- D   (main)\n\nYou realize C introduced a bug…\ngit reset --hard B:\n\nA --- B   (main rewound — commits C and D are gone!) ⚠️\n\n\nHistory is rewritten 🚨"
  },
  {
    "objectID": "week6/index.html#when-to-use-which",
    "href": "week6/index.html#when-to-use-which",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧠 When to Use Which?",
    "text": "🧠 When to Use Which?\n\n\n\n\n\n\n\n\nSituation\nUse revert\nUse reset\n\n\n\n\nYou’re on main or working with others\n✅ Yes\n❌ No\n\n\nYou need to undo a public commit\n✅ Yes\n❌ No\n\n\nYou’re cleaning up your own history\n❌ No\n✅ Yes\n\n\nYou want to fix a commit but keep edits\n❌ No\n✅ (soft/mixed)"
  },
  {
    "objectID": "week6/index.html#pro-tips",
    "href": "week6/index.html#pro-tips",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💡 Pro Tips",
    "text": "💡 Pro Tips\n\nAlways check git log before undoing!\nUse reset only on branches you haven’t shared\nUse revert when you need a safe undo that keeps history"
  },
  {
    "objectID": "week6/index.html#week-6-lesson",
    "href": "week6/index.html#week-6-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 6 Lesson",
    "text": "Week 6 Lesson\n\n\n\n\n\n\nRecap\n\n\n\nLearn about git rebase\nLearn about git fetch and git merge\nLearn about staging and unstaging files\nLearn how to undo some changes"
  },
  {
    "objectID": "week6/workshop/index.html",
    "href": "week6/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Mistakes happen — that’s why Git gives us powerful tools to undo changes. In this workshop, you’ll learn two of the most useful commands for fixing things:\n\ngit revert: Undo a commit by creating a new commit that cancels it out\ngit reset: Move your branch pointer to a previous commit (⚠️ this can rewrite history!)\n\n\n\n\n\nThe difference between revert and reset\nHow to safely undo changes\nWhen to use which command\n\n\n\n\n\n\nGo to https://github.com and log in\n\nClick + → New repository\n\nName it something like git-undo-demo\n\n✅ Check Add a README file\n\nClick Create repository\n\nClick the green Code button → Select SSH → Copy the URL\n\n\n\n\nOpen your terminal and run:\ngit clone git@github.com:your-username/git-undo-demo.git\ncd git-undo-demo\n\n\n\n\nWe’ll simulate a few commits by editing the README.md file.\n\nOpen README.md in RStudio or your preferred text editor\n\nAdd a line at the bottom like:\n\nLine 1: Initial test message\n\nSave the file, then run:\n\ngit add README.md\ngit commit -m \"Add line 1\"\n\nRepeat the process three more times, adding different lines like:\n\nLine 2: More changes\nLine 3: Experimental note\nLine 4: Oops! Maybe not needed\nEach time, save the file, then:\ngit add README.md\ngit commit -m \"Add line X\"\n✅ You should now have 4 commits, each adding a line to README.md.\nCheck your commit history:\ngit log --oneline\n\n\n\n\n\nLet’s say you want to undo the “Add line 3” commit — but without changing the history.\n\nFind the commit hash:\n\ngit log --oneline\nCopy the hash for “Add line 3”, then:\ngit revert &lt;hash&gt;\nGit will create a new commit that undoes the changes from that commit.\n✅ This is a safe way to undo changes — especially useful on shared branches like main.\n\n\n\n\nNow let’s try using reset to go back in time.\n\n\n\nreset actually moves your branch pointer and can remove commits — so it’s best used on branches that only you are working on (like feature branches).\n\n\n\n\nThis keeps your changes, but undoes the last commit:\ngit reset --soft HEAD~1\nYou can now edit or recommit with a new message.\n\n\n\n\nThis keeps the file changes but unstages them:\ngit reset HEAD~1\nRun git status to see your changes — they’re back in the working directory.\n\n\n\n\nThis discards the last commit and any changes:\ngit reset --hard HEAD~1\n✅ Your repo is now rolled back one commit — as if it never happened.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand\nDoes What?\nSafe for Shared Branches?\n\n\n\n\ngit revert\nCreates a new commit to undo a change\n✅ Yes\n\n\ngit reset --soft\nMoves HEAD, keeps changes staged\n⚠️ Not recommended\n\n\ngit reset\nMoves HEAD, keeps changes unstaged\n⚠️ Not recommended\n\n\ngit reset --hard\nDANGEROUS: Deletes changes + commits\n❌ Never on shared branches"
  },
  {
    "objectID": "week6/workshop/index.html#what-youll-learn",
    "href": "week6/workshop/index.html#what-youll-learn",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "The difference between revert and reset\nHow to safely undo changes\nWhen to use which command"
  },
  {
    "objectID": "week6/workshop/index.html#create-a-new-repository-on-github",
    "href": "week6/workshop/index.html#create-a-new-repository-on-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Go to https://github.com and log in\n\nClick + → New repository\n\nName it something like git-undo-demo\n\n✅ Check Add a README file\n\nClick Create repository\n\nClick the green Code button → Select SSH → Copy the URL\n\n\n\n\nOpen your terminal and run:\ngit clone git@github.com:your-username/git-undo-demo.git\ncd git-undo-demo\n\n\n\n\nWe’ll simulate a few commits by editing the README.md file.\n\nOpen README.md in RStudio or your preferred text editor\n\nAdd a line at the bottom like:\n\nLine 1: Initial test message\n\nSave the file, then run:\n\ngit add README.md\ngit commit -m \"Add line 1\"\n\nRepeat the process three more times, adding different lines like:\n\nLine 2: More changes\nLine 3: Experimental note\nLine 4: Oops! Maybe not needed\nEach time, save the file, then:\ngit add README.md\ngit commit -m \"Add line X\"\n✅ You should now have 4 commits, each adding a line to README.md.\nCheck your commit history:\ngit log --oneline"
  },
  {
    "objectID": "week6/workshop/index.html#part-1-git-revert-safe-undo",
    "href": "week6/workshop/index.html#part-1-git-revert-safe-undo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Let’s say you want to undo the “Add line 3” commit — but without changing the history.\n\nFind the commit hash:\n\ngit log --oneline\nCopy the hash for “Add line 3”, then:\ngit revert &lt;hash&gt;\nGit will create a new commit that undoes the changes from that commit.\n✅ This is a safe way to undo changes — especially useful on shared branches like main."
  },
  {
    "objectID": "week6/workshop/index.html#part-2-git-reset-rewriting-history",
    "href": "week6/workshop/index.html#part-2-git-reset-rewriting-history",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Now let’s try using reset to go back in time.\n\n\n\nreset actually moves your branch pointer and can remove commits — so it’s best used on branches that only you are working on (like feature branches).\n\n\n\n\nThis keeps your changes, but undoes the last commit:\ngit reset --soft HEAD~1\nYou can now edit or recommit with a new message.\n\n\n\n\nThis keeps the file changes but unstages them:\ngit reset HEAD~1\nRun git status to see your changes — they’re back in the working directory.\n\n\n\n\nThis discards the last commit and any changes:\ngit reset --hard HEAD~1\n✅ Your repo is now rolled back one commit — as if it never happened."
  },
  {
    "objectID": "week6/workshop/index.html#summary-when-to-use-what",
    "href": "week6/workshop/index.html#summary-when-to-use-what",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Command\nDoes What?\nSafe for Shared Branches?\n\n\n\n\ngit revert\nCreates a new commit to undo a change\n✅ Yes\n\n\ngit reset --soft\nMoves HEAD, keeps changes staged\n⚠️ Not recommended\n\n\ngit reset\nMoves HEAD, keeps changes unstaged\n⚠️ Not recommended\n\n\ngit reset --hard\nDANGEROUS: Deletes changes + commits\n❌ Never on shared branches"
  },
  {
    "objectID": "week6/workshop/index.html#goal",
    "href": "week6/workshop/index.html#goal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🛠️ Goal",
    "text": "🛠️ Goal\nLearn how to: - Save changes using git stash - Switch branches safely - Reapply your stashed work"
  },
  {
    "objectID": "week6/workshop/index.html#step-by-step-instructions",
    "href": "week6/workshop/index.html#step-by-step-instructions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🧪 Step-by-Step Instructions",
    "text": "🧪 Step-by-Step Instructions\n\nMake sure you’re inside a Git-tracked project (any project will do).\nOpen a file and make some changes — but don’t commit yet.\nCheck your Git status:\n\ngit status\nYou should see the file listed as modified.\n\n\n📦 1. Stash Your Changes\nRun:\ngit stash\n✅ This saves your changes and returns your working directory to a clean state.\n\n\n\n🔄 2. Switch Branches (or Pull)\nNow try switching to another branch:\ngit checkout main\nOr do a pull:\ngit pull\n✅ Your working directory stays clean — no conflicts!\n\n\n\n♻️ 3. Reapply the Stash\nWhen you’re ready to bring back your changes:\ngit stash apply\n✅ Your edits will be restored to the files you changed.\n\n\n\n🗑️ 4. (Optional) Clear the Stash\nAfter applying, you can remove the stash:\ngit stash drop\nOr, to both apply and drop in one step:\ngit stash pop\n\n🎉 You’ve learned how to pause your work safely and come back to it later!"
  },
  {
    "objectID": "week7/index_old.html#etc5513-title",
    "href": "week7/index_old.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nWorkflows for reproducible data analysis\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 7\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week7/index_old.html#open-frame",
    "href": "week7/index_old.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week7/index_old.html#recap",
    "href": "week7/index_old.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nLearn about git rebase\nLearn about git fetch and git merge\nLearn about staging and unstaging files\nLearn how to undo some changes"
  },
  {
    "objectID": "week7/index_old.html#aim",
    "href": "week7/index_old.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nStart learning about LaTeX\nLaTeX integration in qmd files\nDeeper understand about commits and SHA1 numbers\nVisualize commits\nCompare commits\nMoving back to different commits and create branches starting from past commits.\nStage and unstage files\nRevert to a previous commits\nRemoving files using git\nChanging branch names\nClone all the branches from a repository"
  },
  {
    "objectID": "week7/index_old.html#latex-template-1",
    "href": "week7/index_old.html#latex-template-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "LaTeX template",
    "text": "LaTeX template\n\n\\begin{document}\n% Packages to be used\n1\\usepackage{amsmath}\n\n2% Creating title\n\\title{This is an example}\n\\author{ETC5513, Monash University}\n\n1\n\nList all the packages\n\n2\n\n% = comments"
  },
  {
    "objectID": "week7/index_old.html#latex-template-2",
    "href": "week7/index_old.html#latex-template-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "LaTeX template",
    "text": "LaTeX template\n\n1\\begin{document}\n\\maketitle\n\n2\\section{Introduction}\n\n% Introduction content\n\n3\\end{document}\n\n1\n\nOpen the document\n\n2\n\nSections each get a ‘section’ header\n\n3\n\nClose the document at the end."
  },
  {
    "objectID": "week7/index_old.html#we-are-going-to-use-latex-via-quarto-files",
    "href": "week7/index_old.html#we-are-going-to-use-latex-via-quarto-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "We are going to use LaTeX via Quarto files",
    "text": "We are going to use LaTeX via Quarto files\nIn order to be able to use LaTeX within our Quarto documents, we need to install tinytex:\nquarto install tinytex\nor\nquarto install tinytex --update-path\nYou don’t need the full LaTex installation for this unit, just this package.\n\n\nMore info about tinytex here"
  },
  {
    "objectID": "week7/index_old.html#integrate-a-latex-template-into-a-quarto-file",
    "href": "week7/index_old.html#integrate-a-latex-template-into-a-quarto-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Integrate a LaTeX template into a quarto file",
    "text": "Integrate a LaTeX template into a quarto file\nThere are different ways: - If the file features are not too complicated. We can simply add some of the necessary LaTeX packages into our YAML preamble. You will be working with this example in the tutorial:\ntitle: \"Reproducible and Collaborative Practices\"\nsubtitle: \"Tutorial 7\"\nauthor: \"Your Name\"\ninstitute: \"Department of Econometrics and Business Statistics\"\noutput: \n pdf:\n   toc: true\n   toc_depth: 2\n   number_sections: true\n   highlight: tango\nheader-includes: \n  - \\usepackage{titling}\n  - \\pretitle{\\begin{center} \\includegraphics[width=5in,height=13in]{figs/front.jpg}\\LARGE\\\\}\n  - \\posttitle{\\end{center}}\n  - \\usepackage{fontawesome}\n  - \\usepackage[most]{tcolorbox}\n  - \\usepackage{xcolor}\n  - \\usepackage{sectsty}\n  - \\sectionfont{\\color{olive}}\n  - \\usepackage{verbatim}"
  },
  {
    "objectID": "week7/index_old.html#integrate-a-latex-template-into-a-quarto-file-1",
    "href": "week7/index_old.html#integrate-a-latex-template-into-a-quarto-file-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Integrate a LaTeX template into a quarto file",
    "text": "Integrate a LaTeX template into a quarto file\nThere are different ways: - Another possibility is to use a preamble.tex - And incorporate that into our Quarto file (we will look into this in Week 8):"
  },
  {
    "objectID": "week7/index_old.html#reference",
    "href": "week7/index_old.html#reference",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reference",
    "text": "Reference\nLaTeX in 24 Hours A Practical Guide for Scientific Writing"
  },
  {
    "objectID": "week7/index_old.html#closer-look-at-our-repos",
    "href": "week7/index_old.html#closer-look-at-our-repos",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Closer look at our repos",
    "text": "Closer look at our repos"
  },
  {
    "objectID": "week7/index_old.html#commits-hash-values-and-sha-numbers",
    "href": "week7/index_old.html#commits-hash-values-and-sha-numbers",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commits, hash values and SHA numbers",
    "text": "Commits, hash values and SHA numbers\ngit log allows us to go back into our project history and see all the commits done in a repo. We can also see the commits of other contributors, we can browse the history to find out past issues or problems.\ncommit 8cfaee1e447d8e83d745b51ffcd310465afb76b1\nAuthor: Patricia Menendez &lt;patricia.menendez@monash.edu&gt;\nDate:   Sat Apr 4 15:49:54 2023 +1000\n   \n    Uploading Week4 slides"
  },
  {
    "objectID": "week7/index_old.html#commits-hash-values-and-sha-numbers-1",
    "href": "week7/index_old.html#commits-hash-values-and-sha-numbers-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commits, hash values and SHA numbers",
    "text": "Commits, hash values and SHA numbers\nThe Hash or SHA-1 value (often called refs) is created when we generate a commit. They are a 40 character string stored in hexadecimal. They are effectively unique identifiers for a commit.\nThere are so many different hashes that you can get away with just using the first few to identify your SHA."
  },
  {
    "objectID": "week7/index_old.html#inspect-the-sha-numbers",
    "href": "week7/index_old.html#inspect-the-sha-numbers",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Inspect the SHA numbers",
    "text": "Inspect the SHA numbers\nUsing your terminal you can inspect your commits and SHA numbers by typing git log in your command line interface:\n\n\n\n\n\n\nTip\n\n\n\nTo exit the screen press q\nTo go up in the history, press u\nTo go down in the history, press d or space."
  },
  {
    "objectID": "week7/index_old.html#inspect-the-sha-numbers-1",
    "href": "week7/index_old.html#inspect-the-sha-numbers-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Inspect the SHA numbers",
    "text": "Inspect the SHA numbers\nYou can also inspect them from GitHub"
  },
  {
    "objectID": "week7/index_old.html#git-log",
    "href": "week7/index_old.html#git-log",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git log",
    "text": "git log\n\ngit log is the Git command that allow us to explore the commits history in a Git repository.\ngit log lists the commits made in that repository in reverse chronological order. That is, the most recent commits show up first.\ngit log has a great variety of options that allow us to explore commits depending on our preference."
  },
  {
    "objectID": "week7/index_old.html#git-log-1",
    "href": "week7/index_old.html#git-log-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git log",
    "text": "git log\ngit log --oneline condenses each commit to a single line\n3a5bc86 W3 cli updates\n4d1b022 W3 shell update\n\ngit log -n 3: show last 3 commits\ngit log --since=01-01-2020: Show commits since…\ngit log --until=01-01-2020: Show commits until…\ngit log --author=\"Michael Lydeamore\": Show commits by a single author."
  },
  {
    "objectID": "week7/index_old.html#git-log-and-git-show",
    "href": "week7/index_old.html#git-log-and-git-show",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git log and git show",
    "text": "git log and git show\n\ngit log -p: shows the difference in each commit. You can chain flags, so git log -p -n 2 will limit to the most recent 2 commits\ngit log index.qmd will show you all commits on a particular file\ngit log --oneline -p index.qmd: Shows you all the changes done in the different commits to this file, and their changes\ngit show will show various information about the repo."
  },
  {
    "objectID": "week7/index_old.html#more-options-associated-with-git-log",
    "href": "week7/index_old.html#more-options-associated-with-git-log",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More options associated with git log",
    "text": "More options associated with git log\n\ngit log --stat to see some (abbreivated) stats, like which files were modified, how many files, and how many lines were added or removed\ngit log --pretty=oneline prints each commit on one line\ngit log --pretty=format: \"%h -%an : %s\": Display each commit in one line and display how long ago it was\ngit log --pretty=format:\"%h %s\" --graph: Will also show the tree\n\nFor more info on git log, please look here.\nRemember that if you want to visualize the tree of the repository: VSCode is a great tool for that."
  },
  {
    "objectID": "week7/index_old.html#git-log-and-git-diff",
    "href": "week7/index_old.html#git-log-and-git-diff",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git log and git diff",
    "text": "git log and git diff\ngit log displays revisions, and git diff displays the difference between two revisions in the repo.\nIt also shows snippets of the text around the part of the file that has changed so you know in which part of the file the changes are happening.\ngit diff --color-words will display words that have changed in a different color."
  },
  {
    "objectID": "week7/index_old.html#changes-within-the-files-in-the-staging-area",
    "href": "week7/index_old.html#changes-within-the-files-in-the-staging-area",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Changes within the files in the staging area",
    "text": "Changes within the files in the staging area\ngit diff --staged"
  },
  {
    "objectID": "week7/index_old.html#git-diff-options",
    "href": "week7/index_old.html#git-diff-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git diff options",
    "text": "git diff options\n\ngit diff commit1 commit2: Compare changes between any two commits\ngit diff branch1 branch2: Compare across branches (!)\n\n\n\ngit diff master newbranch ./index.qmd: Compare the file index.qmd, between the master and newbranch.\n\n\n\n\ngit diff HEAD~2 HEAD --name-only: Shows the files that have changed between the latest commit and the two before that."
  },
  {
    "objectID": "week7/index_old.html#visiting-past-commits",
    "href": "week7/index_old.html#visiting-past-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Visiting past commits",
    "text": "Visiting past commits"
  },
  {
    "objectID": "week7/index_old.html#lets-explore-a-given-commit",
    "href": "week7/index_old.html#lets-explore-a-given-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Let’s explore a given commit",
    "text": "Let’s explore a given commit\nIn order to look at the status of the files in a given commit, we can use git checkout SHA for example:\ngit checkout 47ef21k\nOnce you run this command you will get the\n“You are in a detached HEAD state”\nNote: You get to the detached HEAD state by checking a commit directly. Remember the HEAD is a pointer that keeps track of your location within the Git repo.\nIf we want to see all the commits here we need to use git log --oneline --all."
  },
  {
    "objectID": "week7/index_old.html#detached-head-repo-view",
    "href": "week7/index_old.html#detached-head-repo-view",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Detached HEAD repo view",
    "text": "Detached HEAD repo view"
  },
  {
    "objectID": "week7/index_old.html#detached-head",
    "href": "week7/index_old.html#detached-head",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Detached HEAD",
    "text": "Detached HEAD\nDetached HEAD state gives you the power to check out any commit and explore the older state of a repository without having to create a local branch. In addition, it also allows you to change the repository.\n\n\n\n\n\n\nWarning\n\n\nAny commits made in a detached HEAD state will be lost when you check out any branch.\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\nCreate a branch to keep your commits\n\n\n\n\n\nIf you want to leave the detached HEAD and return to another branch you can simply use git checkout branchname"
  },
  {
    "objectID": "week7/index_old.html#go-back-into-the-repository",
    "href": "week7/index_old.html#go-back-into-the-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Go back into the repository",
    "text": "Go back into the repository\n\ngit checkout 8cfaee1e447d8e8\n\nYou are in ‘detached HEAD’ state (the changes made in this state do not belong to any branch!). That allows you to explore the files that are at that particular location of the repo history.\n\n\n\n\n\n\nTip\n\n\nNo-one wants to be a detached HEAD state. Even git repos.\n\n\n\n\nIf you want to bring some files from the past history to your current head, it is best to do this on a new branch\n\ngit branch new_branch\ngit checkout new_branch\nor git checkout -b new_branch\n\nContinue working on this branch, then merge"
  },
  {
    "objectID": "week7/index_old.html#detached-head-repo-view-1",
    "href": "week7/index_old.html#detached-head-repo-view-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Detached HEAD repo view",
    "text": "Detached HEAD repo view"
  },
  {
    "objectID": "week7/index_old.html#git-environment-tree",
    "href": "week7/index_old.html#git-environment-tree",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git environment tree",
    "text": "Git environment tree"
  },
  {
    "objectID": "week7/index_old.html#stage-and-unstage-files",
    "href": "week7/index_old.html#stage-and-unstage-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Stage and unstage files",
    "text": "Stage and unstage files\nBefore you push changes into the remote repo:\n\ngit reset filename: Unstage a single file\ngit reset: Unstage all staged files\n\n\nFor example:\n\ngit add filename\ngit status: filename is added to the staging area\ngit reset filename: filename will be removed from the staging area.\n\nIntuition: You can think of git reset as the opposite of git add."
  },
  {
    "objectID": "week7/index_old.html#commits-1",
    "href": "week7/index_old.html#commits-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commits",
    "text": "Commits\n\nCommits need to be clear and concise.\nCommits need to be meaningful so that someone else can understand what you changed in a commit.\nCommit early, commit often, but commit meaningfully\n\n\nUpdating file 1: ❌ Not meaningful!\nAdding gmax for computing maximum value: ✅\n\nPlease watch this video minute 3:16 and consider this when creating your commits! video"
  },
  {
    "objectID": "week7/index_old.html#editamend-most-recent-commit-using-cli",
    "href": "week7/index_old.html#editamend-most-recent-commit-using-cli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Edit/Amend most recent commit (using cli)",
    "text": "Edit/Amend most recent commit (using cli)\nThis only works for your most recent commit if it has not been pushed to the remote repo!\n\nMaybe you forgot to add a file or you commit the wrong file. Then you can amend your last commit. That also includes the commit message (if you need to change it).\nYou can amend the commit directly using the command line interface/console\nIf you need to add a new file then you can use git add file and then use:\n\ngit commit --amend -m \"your updated commit message\""
  },
  {
    "objectID": "week7/index_old.html#amending-commits",
    "href": "week7/index_old.html#amending-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Amending commits",
    "text": "Amending commits\nAmending a commit that you’ve already pushed to a remote repo is BAD practice and should be avoided\n\nAmending commits which are already pushed to a remote are more difficult to apply and would require a force push for the rewrite.\nAlso it will require rebase."
  },
  {
    "objectID": "week7/index_old.html#reverting-commits-that-have-been-pushed-to-a-remote-repo",
    "href": "week7/index_old.html#reverting-commits-that-have-been-pushed-to-a-remote-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reverting commits that have been pushed to a remote repo",
    "text": "Reverting commits that have been pushed to a remote repo\ngit revert: The git revert command can be considered an ‘undo’ type command, however, it is not a traditional undo operation.\nInstead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.\nYou can think of it as a “rollback”: it points your local environment back to a previous commit. Your “local environment,” refers to your local repository, staging area, and working directory."
  },
  {
    "objectID": "week7/index_old.html#git-revert-when-commits-have-been-pushed",
    "href": "week7/index_old.html#git-revert-when-commits-have-been-pushed",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git revert: When commits have been pushed",
    "text": "git revert: When commits have been pushed\n\nThis can be useful, if you need to fix a bug in your code that was introduced by a single commit.\nIt will record a new commit with the changes introduced by reverting the last commit. If you don’t want to include the commits reverted then you could use git revert --no-commit.\nTo revert the previous commit git revert HEAD"
  },
  {
    "objectID": "week7/index_old.html#git-revert-when-commits-have-been-pushed-1",
    "href": "week7/index_old.html#git-revert-when-commits-have-been-pushed-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git revert: When commits have been pushed",
    "text": "git revert: When commits have been pushed\n\nNote that here we are not using HEAD~1 as with reset.The reason is that when using the git reset command we are setting a new HEAD position while with git revert we are actually reverting the commit specified.\nThen you will have to commit the changes again for the files to be reverted and for the commit to be undone.\nWhen using the git revert command, Git will automatically open your text editor (VS code) in order to commit the changes."
  },
  {
    "objectID": "week7/index_old.html#removing-files",
    "href": "week7/index_old.html#removing-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Removing files",
    "text": "Removing files\n\nIf the files are untracked you can just remove them\nIf the files are tracked. You can use git to remove the files\n\ngit rm file.txt\ngit status (file already added into the staging area)\ngit commit -m “Delete file.txt”\ngit push origin master"
  },
  {
    "objectID": "week7/index_old.html#mirroring-a-repository",
    "href": "week7/index_old.html#mirroring-a-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Mirroring a repository",
    "text": "Mirroring a repository\nMirroring is to replicate the state of a remote or upstream repository in our local machine. By state, we mean all the branches and all the tags as well.\n--mirror: \n  Set up a mirror of the source repository. This implies --bare. Compared to --bare,\n    --mirror not only maps local branches of the source to local branches of the target,\n    it maps all refs (including remote-tracking branches, notes etc.) and sets up a\n    refspec configuration such that all these refs are overwritten by a git remote\n    update in the target repository."
  },
  {
    "objectID": "week7/index_old.html#example-of-git-mirror",
    "href": "week7/index_old.html#example-of-git-mirror",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of git mirror",
    "text": "Example of git mirror\n\nmkdir Example (Don’t forget to create a folder)\ncd Example (And navigate into that folder before the next steps!)\ngit clone --mirror https://github.com/ETC5513/GitKraken-example.git .git\ngit config --unset core.bare\ngit reset --hard"
  },
  {
    "objectID": "week7/index_old.html#week-7-lesson",
    "href": "week7/index_old.html#week-7-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 7 Lesson",
    "text": "Week 7 Lesson\n\n\n\n\n\n\nImportant\n\n\n\nStart learning about Latex\nLatex integration in Rmd files\nDeeper understand about commits and SHA1 numbers\nVisualize commits\nCompare commits\nMoving back to different commits and create branches starting from past commits.\nStage and unstage files\nRevert to a previous commits\nRemoving files using git\nClone all the branches from a repository"
  },
  {
    "objectID": "week7/workshop/index.html",
    "href": "week7/workshop/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "By the end of this workshop, you’ll be able to:\n\nUndo commits safely (revert, reset)\nWork with old commits using detached HEAD\nRecover lost commits using reflog\nModify your last commit with --amend\nClean up tracked and untracked files (git rm, git clean)"
  },
  {
    "objectID": "week7/workshop/index.html#step-1-make-three-commits",
    "href": "week7/workshop/index.html#step-1-make-three-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 1: Make Three Commits",
    "text": "Step 1: Make Three Commits\nAdd one line at a time and commit after each:\nLine 1\nLine 2\nLine 3\nYou should now have 3 commits. Check with:\ngit log --oneline"
  },
  {
    "objectID": "week7/workshop/index.html#step-2-revert-the-most-recent-commit",
    "href": "week7/workshop/index.html#step-2-revert-the-most-recent-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 2: Revert the Most Recent Commit",
    "text": "Step 2: Revert the Most Recent Commit\nLet’s safely undo the last thing you committed — no risk of conflicts here.\nRun:\ngit log --oneline\nThe most recent commit should be the one that added Line 3.\nNow run:\ngit revert HEAD\n✅ Git will create a new commit that undoes the last one (removing Line 3).\nCheck your file and run:\ngit log --oneline\nYou should see a new commit at the top with a message like:\nRevert \"Add line 3\"\nThat’s how you safely undo a recent commit using revert."
  },
  {
    "objectID": "week7/workshop/index.html#step-3-reset-the-last-commit",
    "href": "week7/workshop/index.html#step-3-reset-the-last-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 3: Reset the Last Commit",
    "text": "Step 3: Reset the Last Commit\nRun:\ngit reset --soft HEAD~1\nNow run:\ngit status\nWhat do you see? Try committing again if you want."
  },
  {
    "objectID": "week7/workshop/index.html#step-1-checkout-an-old-commit",
    "href": "week7/workshop/index.html#step-1-checkout-an-old-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 1: Checkout an Old Commit",
    "text": "Step 1: Checkout an Old Commit\nFrom your log, copy the hash for the first commit.\ngit checkout &lt;commit-hash&gt;\nYou’re now in a detached HEAD state.\nTry editing model.R and committing:\ngit add model.R\ngit commit -m \"Edit in detached HEAD\""
  },
  {
    "objectID": "week7/workshop/index.html#step-2-create-a-branch-to-save-your-work",
    "href": "week7/workshop/index.html#step-2-create-a-branch-to-save-your-work",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 2: Create a Branch to Save Your Work",
    "text": "Step 2: Create a Branch to Save Your Work\ngit switch -c experiment\nYou’re now safe! Run git log and note the history."
  },
  {
    "objectID": "week7/workshop/index.html#step-1-make-and-reset-a-commit",
    "href": "week7/workshop/index.html#step-1-make-and-reset-a-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 1: Make and Reset a Commit",
    "text": "Step 1: Make and Reset a Commit\n\nMake a quick commit (e.g., change notes.txt)\nRun:\n\ngit reset --hard HEAD~1\nThe commit is now gone… or is it?"
  },
  {
    "objectID": "week7/workshop/index.html#step-2-use-reflog",
    "href": "week7/workshop/index.html#step-2-use-reflog",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 2: Use reflog",
    "text": "Step 2: Use reflog\ngit reflog\nFind the lost commit hash and restore it:\ngit checkout &lt;hash&gt;\ngit switch -c recovered-work\n✅ Your work is back!"
  },
  {
    "objectID": "week7/workshop/index.html#step-1-track-and-remove-a-file",
    "href": "week7/workshop/index.html#step-1-track-and-remove-a-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 1: Track and Remove a File",
    "text": "Step 1: Track and Remove a File\n\nCreate a file (e.g., temp.txt)\nAdd and commit it\nNow remove it using:\n\ngit rm temp.txt\ngit commit -m \"Remove temp file\"\nCheck git log — what happened?"
  },
  {
    "objectID": "week7/workshop/index.html#step-2-remove-a-file-but-keep-it-locally",
    "href": "week7/workshop/index.html#step-2-remove-a-file-but-keep-it-locally",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 2: Remove a File but Keep It Locally",
    "text": "Step 2: Remove a File but Keep It Locally\n\nCreate and commit another file (e.g., data.csv)\nRun:\n\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data\"\n\nThe file still exists in your project, but is no longer tracked."
  },
  {
    "objectID": "week7/workshop/index.html#step-3-clean-untracked-files",
    "href": "week7/workshop/index.html#step-3-clean-untracked-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step 3: Clean Untracked Files",
    "text": "Step 3: Clean Untracked Files\n\nCreate a few files but don’t add them to Git.\nPreview what would be deleted:\n\ngit clean -n\n\nIf you’re sure:\n\ngit clean -f\n✅ These files are now gone — permanently."
  },
  {
    "objectID": "week8/tutorial/index.html",
    "href": "week8/tutorial/index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn how to use git and GitHub when we are dealing with files larger than 100MB"
  },
  {
    "objectID": "week8/tutorial/index.html#objectives",
    "href": "week8/tutorial/index.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Learn how to use git and GitHub when we are dealing with files larger than 100MB"
  },
  {
    "objectID": "week8/tutorial/index.html#git-lfs",
    "href": "week8/tutorial/index.html#git-lfs",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git LFS",
    "text": "Git LFS\n\nCreate a repository in GitHub called etc5513-tutorial8-xx where xx is your initials. In that repository, make sure that it has a license, a .gitignore file and a README.md file.\nClone the repository to your local machine\nTake the large zip file from moodle\nStage, commit and try to push this file.\nWhat do you notice about the error?\nReset your previous commit.\nAdd this file using the git lfs workflow. Remember the quotes, and that your file extension is .zip.\n\ngit lfs install\ngit lfs track \"*.zip\"\ngit add .gitattributes\ngit add .\ngit commit -m \"Adding large file\"\ngit push origin main\n\nPush the changes onto GitHub using an extended commit message.\n\ngit commit (without the -m flag) will open a text editor for you to type your extended commit.\nAdd a git annotated tag to the most recent commit called v1.0."
  },
  {
    "objectID": "week8/tutorial/index.html#collaborating-with-others",
    "href": "week8/tutorial/index.html#collaborating-with-others",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Collaborating with others",
    "text": "Collaborating with others\nWith at least one other person, swap repository details. They do not need to add you as a collaborator at this stage.\nClone their repository to your computer.\nPractice the following:\n\nOpen a pull request with an identified issue with the report. This doesn’t have to be a real issue, it’s just for practicing our issues and commit messages.\nYour partner should fix the issue, and close the issue using a commit message.\nPractice the git fetch workflow, to update your local database without moving HEAD. Then, move your repository HEAD to the latest commit."
  },
  {
    "objectID": "week9/index.html#etc5513-title",
    "href": "week9/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nFinding bugs, and building presentations\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 9\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week9/index.html#open-frame",
    "href": "week9/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week9/index.html#recap",
    "href": "week9/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nLearn how to add references and bibliography\nDealing with large files\nTags\nGitHub issues"
  },
  {
    "objectID": "week9/index.html#aim",
    "href": "week9/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nCreate a git project from an existing local folder\nLicensing a repository\ngit blame\nTemplates for slides"
  },
  {
    "objectID": "week9/index.html#adding-version-control-onto-an-existing-project",
    "href": "week9/index.html#adding-version-control-onto-an-existing-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Adding version control onto an existing project",
    "text": "Adding version control onto an existing project\nSuppose you have a folder on your computer which is not version controlled, and you decide that you would like to start tracking it.\nYou go to GitHub and create a repo over there. You now have two options:\n\n\n\nApproach 1:\n\nCreate a GitHub repo\nClone the repo locally\nMove all the files and folders from your existing project into this folder\nStage, commit, push\n\n\n\n\nApproach 2:\n\nOpen a terminal in the directory for your folder\ngit init to create a git repostiroy\nStage, commit\ngit remote add origin git@github.com:...\ngit push -u origin main"
  },
  {
    "objectID": "week9/index.html#adding-version-control-onto-an-existing-project-1",
    "href": "week9/index.html#adding-version-control-onto-an-existing-project-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Adding version control onto an existing project",
    "text": "Adding version control onto an existing project\nOption 2 is preferred because it reduces duplication.\nGitHub even gives you instructions:\n\n\nThe -u flag says to link remote origin to branch main. it is a one time operation.\n\n\nRemember you can verify your remotes using git remote -v"
  },
  {
    "objectID": "week9/index.html#repository-visibility",
    "href": "week9/index.html#repository-visibility",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Repository Visibility",
    "text": "Repository Visibility\n\nMore info here"
  },
  {
    "objectID": "week9/index.html#licensing",
    "href": "week9/index.html#licensing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Licensing",
    "text": "Licensing\nPublic repos in GitHub make your work publicly available and therefore it is important to establish how your work should be acknowledged if someone else wants to use it.\n\nPublic repositories on GitHub are often used to share open source software. For your repository to be truly open source, you’ll need to license it sot that others are free to use, change and distribute the software.\n\nMore info here"
  },
  {
    "objectID": "week9/index.html#available-licenses-in-github",
    "href": "week9/index.html#available-licenses-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Available licenses in GitHub",
    "text": "Available licenses in GitHub\n\nMore info here"
  },
  {
    "objectID": "week9/index.html#choosing-a-license",
    "href": "week9/index.html#choosing-a-license",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Choosing a license",
    "text": "Choosing a license\n\nSource here"
  },
  {
    "objectID": "week9/index.html#license-examples",
    "href": "week9/index.html#license-examples",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "License examples",
    "text": "License examples"
  },
  {
    "objectID": "week9/index.html#no-license",
    "href": "week9/index.html#no-license",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "No license",
    "text": "No license\n\nSource here"
  },
  {
    "objectID": "week9/index.html#creative-commons-license",
    "href": "week9/index.html#creative-commons-license",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creative Commons License",
    "text": "Creative Commons License"
  },
  {
    "objectID": "week9/index.html#creative-commons-license-1",
    "href": "week9/index.html#creative-commons-license-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creative Commons License",
    "text": "Creative Commons License\n\nMore info here"
  },
  {
    "objectID": "week9/index.html#location-of-your-license",
    "href": "week9/index.html#location-of-your-license",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Location of your license",
    "text": "Location of your license\nYou can add a license by:\n\nSelecting the option on GitHub when you first create a repo\nLater by placing your license text in a file named LICENSE.md\n\n\nLicenses go in the root of the directory. Some information about licenses is sometimes included in README.md as well, but this is not required.\nMore info here"
  },
  {
    "objectID": "week9/index.html#what-is-git-blame",
    "href": "week9/index.html#what-is-git-blame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is git blame?",
    "text": "What is git blame?\n\nA command that shows who last modified each line of a file.\nIt includes:\n\nCommit hash\nAuthor name\nTimestamp\nLine content\n\n\ngit blame my_script.R"
  },
  {
    "objectID": "week9/index.html#why-is-git-blame-useful",
    "href": "week9/index.html#why-is-git-blame-useful",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Why is git blame useful?",
    "text": "Why is git blame useful?\n\nDebugging: Find out who introduced a specific line (or bug).\nHistory: Understand the evolution of code.\nCollaboration: Ask helpful questions, not blame people!\n\n\nIt’s about understanding, not accusing!"
  },
  {
    "objectID": "week9/index.html#example-output",
    "href": "week9/index.html#example-output",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example Output",
    "text": "Example Output\n3f23c8d2 (Alice Smith  2024-03-01 12:03:45 +0000  1) x &lt;- 1\ned32fa01 (Bob Jones    2024-03-02 09:15:23 +0000  2) y &lt;- x + 1\naf9345dd (Charlie Liu  2024-03-03 16:42:07 +0000  3) print(y)\n\nShows who added each line and when."
  },
  {
    "objectID": "week9/index.html#how-to-investigate-further",
    "href": "week9/index.html#how-to-investigate-further",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How to Investigate Further",
    "text": "How to Investigate Further\n\nUse git show &lt;commit&gt; to see the full commit diff\nOr git log -L to follow changes to a specific function or range\n\ngit log -L :my_function:my_script.R\n\nCombine with git bisect for deeper history analysis"
  },
  {
    "objectID": "week9/index.html#what-is-git-bisect",
    "href": "week9/index.html#what-is-git-bisect",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is git bisect?",
    "text": "What is git bisect?\n\nA binary search through your commit history to find the commit that introduced a bug.\nYou tell Git:\n\nA bad commit (where the bug exists)\nA good commit (before the bug existed)\n\nGit checks out commits in between until it finds the culprit."
  },
  {
    "objectID": "week9/index.html#why-use-git-bisect",
    "href": "week9/index.html#why-use-git-bisect",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Why use git bisect?",
    "text": "Why use git bisect?\n\nEfficient — checks only log₂(n) commits\n\nIdeal for long histories or subtle bugs\n\nYou can even automate the check with a script!"
  },
  {
    "objectID": "week9/index.html#visual-explanation",
    "href": "week9/index.html#visual-explanation",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Visual Explanation",
    "text": "Visual Explanation\no---o---o---o---o---o---o\nG       ?       ?     B\n\nG: Good commit (known to be bug-free)\nB: Bad commit (where bug is present)\nGit tests midpoints (?) and narrows down."
  },
  {
    "objectID": "week9/index.html#step-by-step-example",
    "href": "week9/index.html#step-by-step-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Step-by-Step Example",
    "text": "Step-by-Step Example\ngit bisect start\ngit bisect bad                # current commit is buggy\ngit bisect good &lt;commit-id&gt;  # known good commit\nGit now checks out a middle commit. At each step, you say:\ngit bisect good   # if no bug\ngit bisect bad    # if bug is present"
  },
  {
    "objectID": "week9/index.html#once-found",
    "href": "week9/index.html#once-found",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Once Found",
    "text": "Once Found\nGit will show something like:\n3f9a2d1a is the first bad commit\nAuthor: Charlie &lt;charlie@example.com&gt;\nThen, clean up with:\ngit bisect reset"
  },
  {
    "objectID": "week9/index.html#optional-automate-testing",
    "href": "week9/index.html#optional-automate-testing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Optional: Automate Testing",
    "text": "Optional: Automate Testing\ngit bisect run Rscript test.R\nWhere test.R returns:\n\n0 → good\n1 → bad\n\nThis can save time for large projects!"
  },
  {
    "objectID": "week9/index.html#slide-structure",
    "href": "week9/index.html#slide-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Slide Structure",
    "text": "Slide Structure\nTo create slides, use horizontal rules (---) to separate them:\n## Slide Title\n\nContent for this slide\n\n---\n\n## Another Slide\n\nMore content"
  },
  {
    "objectID": "week9/index.html#types-of-slides",
    "href": "week9/index.html#types-of-slides",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Types of Slides",
    "text": "Types of Slides\nUse different heading levels to create nested slides (vertical stacks):\n## Top-level slide\n\n---\n\n### Sub-slide (stacked under the previous)\nUseful for going deeper on a topic without changing the horizontal flow."
  },
  {
    "objectID": "week9/index.html#fragments-step-by-step-reveals",
    "href": "week9/index.html#fragments-step-by-step-reveals",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Fragments (Step-by-step Reveals)",
    "text": "Fragments (Step-by-step Reveals)\nUse ::: blocks with .fragment to reveal content piece-by-piece:\n- Item 1\n::: {.fragment}\n- Item 2 (appears next)\n:::\n::: {.fragment}\n- Item 3 (appears after that)\n:::\nPress space to reveal each in order during the presentation."
  },
  {
    "objectID": "week9/index.html#incremental-reveals",
    "href": "week9/index.html#incremental-reveals",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Incremental Reveals",
    "text": "Incremental Reveals\nYou can automatically reveal bullet points one at a time\nby setting incremental: true in your YAML header:\nformat:\n  revealjs:\n    incremental: true\nThen, write a normal list:\n- First point\n- Second point\n- Third point\nEach list item will appear step-by-step when you present."
  },
  {
    "objectID": "week9/index.html#columns",
    "href": "week9/index.html#columns",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Columns",
    "text": "Columns\nUse a .columns div and .column blocks inside:\n::: columns\n::: {.column width=\"50%\"}\nLeft side content\n:::\n\n::: {.column width=\"50%\"}\nRight side content\n:::\n:::\nUseful for comparisons, images + text, or two-part layouts."
  },
  {
    "objectID": "week9/index.html#themes-transitions",
    "href": "week9/index.html#themes-transitions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Themes & Transitions",
    "text": "Themes & Transitions\nYou can customize the look:\nformat:\n  revealjs:\n    theme: solarized\n    transition: fade\nThemes include: simple, solarized, beige, night, white, moon, etc."
  },
  {
    "objectID": "week9/index.html#speaker-notes",
    "href": "week9/index.html#speaker-notes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Speaker Notes",
    "text": "Speaker Notes\nAdd presenter notes with ??? under the slide:\n## Slide Title\n\nVisible content\n\n???\n\nNotes only the presenter can see.\nPress ‘s’ during the presentation to open speaker view."
  },
  {
    "objectID": "week9/index.html#the-.smaller-class",
    "href": "week9/index.html#the-.smaller-class",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The .smaller class",
    "text": "The .smaller class\nYou can use .smaller to shrink text size for dense slides or long code blocks.\n\n## A slide with smaller text {.smaller}\n\nThis slide has .smaller applied!"
  },
  {
    "objectID": "week9/index.html#other-features",
    "href": "week9/index.html#other-features",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Other Features",
    "text": "Other Features\n\nUse .pull-left / .pull-right to align content\nEmbed code chunks just like in other .qmd documents\nReveal.js supports:\n\nMath (via LaTeX)\nSyntax highlighting\nEmbedded videos/images"
  },
  {
    "objectID": "week9/index.html#get-started",
    "href": "week9/index.html#get-started",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Get Started",
    "text": "Get Started\nTo render your presentation:\n\nSave your file as slides.qmd\nUse the Render button in RStudio\nOr run in the terminal:\n\nquarto render slides.qmd\nIt will output an HTML presentation. Open it in your browser."
  },
  {
    "objectID": "week9/index.html#week-9-lesson",
    "href": "week9/index.html#week-9-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 9 Lesson",
    "text": "Week 9 Lesson\n\n\n\n\n\n\nImportant\n\n\n\nLicensing\nInitialising a repo without GitHub\ngit blame/bisect\nReproducible Presentations"
  },
  {
    "objectID": "student-record/HakimYusof.html",
    "href": "student-record/HakimYusof.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Muhammad Nor Hakim here. Here’s my contribution and sorry for pinging your phone with my pull request. I got an error at first, this is my second attempt."
  },
  {
    "objectID": "student-record/KimYenLe.html",
    "href": "student-record/KimYenLe.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m Kim Yen Le on GitHub! Here’s my contribution to the rcp project."
  },
  {
    "objectID": "student-record/Shayna-Yang.html",
    "href": "student-record/Shayna-Yang.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m TZU-HSUAN YANG (Shayna) on GitHub! Here’s my contribution to the rcp project."
  },
  {
    "objectID": "student-record/Yashitta.html",
    "href": "student-record/Yashitta.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m Yashitta Bawa on GitHub! Here’s my contribution to the rcp project."
  },
  {
    "objectID": "student-record/parthtendulkar10.html",
    "href": "student-record/parthtendulkar10.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Hi, I’m parthtendulkar10 on GitHub! Here’s my contribution to the rcp project."
  }
]