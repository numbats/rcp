{
  "hash": "e790d825e41f1e0bf7848fc1d8af1dd2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Workshop 10\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n   html:\n      embed-resources: true\n      output-file: \"index.html\"\n      toc: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Setup\n\nBefore starting, make sure you have the following packages installed:\n\n```r\ninstall.packages(c(\"targets\", \"tarchetypes\", \"dplyr\", \"readr\", \"broom\", \"palmerpenguins\"))\n```\n\nCreate a new RStudio Project and initialise a targets pipeline:\n\n```r\ntargets::tar_script()\n```\n\nThis creates `_targets.R`, which we will now edit.\n\n---\n\n## Step 1: Load & Clean Data\n\nWe'll use the `palmerpenguins` dataset.\n\nEdit your `_targets.R` file like this:\n\n```r\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\ntar_option_set(packages = c(\"dplyr\", \"broom\", \"palmerpenguins\"))\n\nlist(\n  tar_target(raw_data, penguins),\n  \n  tar_target(clean_data, raw_data |> \n               filter(!is.na(body_mass_g)) |> \n               mutate(species = as.factor(species)))\n)\n```\n\nNow run the pipeline from the R console:\n\n```r\ntargets::tar_make()\n```\n\nYou should be able to see your data with\n\n```r\ntar_read(clean_data)\n```\n\n---\n\n## Step 2: Fit Models by Group\nLet’s manually define separate targets to fit a linear model (`body_mass_g ~ bill_length_mm`) for each species. This approach gets repetitive — and we’ll fix that later using dynamic branching.\n\nAdd the following targets to your `_targets.R` file:\n\n```r\n  tar_target(adelie_data, filter(clean_data, species == \"Adelie\")),\n  tar_target(chinstrap_data, filter(clean_data, species == \"Chinstrap\")),\n  tar_target(gentoo_data, filter(clean_data, species == \"Gentoo\")),\n\n  tar_target(adelie_model, lm(body_mass_g ~ bill_length_mm, data = adelie_data)),\n  tar_target(chinstrap_model, lm(body_mass_g ~ bill_length_mm, data = chinstrap_data)),\n  tar_target(gentoo_model, lm(body_mass_g ~ bill_length_mm, data = gentoo_data))\n```\n\nThen, run:\n\n```r\ntar_make()\n```\n\nYou now have three separate models, one per species.\n\n::: {.callout-tip}\nTry and plot these models from your console!\n:::\n\n---\n\n## Step 3: Use Dynamic Branching\n\nNow let’s replace our manual lapply step with **dynamic branching** from `tarchetypes`.\n\nReplace the last two targets with:\n\n```r\n  tar_group_by(\n   grouped_data, \n   clean_data, species),\n\n  tar_target(\n   models,\n   list(lm(body_mass_g ~ bill_length_mm, data = grouped_data)), \n   pattern = map(grouped_data)\n  )\n\n```\n\n::: {.callout-tip}\nNote the `list` in the second `tar_target`. This is because `tarchetypes` wants to row bind items together, which you can't do with raw `lm` objects.\n:::\n\n---\n\n## Step 4: Check your network of functions\n\nRun \n\n```r\ntar_visnetwork()\n```\n\nto see what the combinations of functions looks like.\n\n---\n\n## Step 4: Report with Quarto\n\nCreate a new `report.qmd` file with this content:\n\n````markdown\n---\ntitle: \"Penguins Analysis\"\nformat: html\nexecute:\n  echo: true\n---\n\n```{{r}}\nlibrary(targets)\nlibrary(gtsummary)\ntar_read(clean_data)\n```\n\n```{{r}}\n#| results: asis\ntar_load(models)\n\nlapply(models, function(input) {\n   tbl_regression(input)\n})\n```\n````\n\nYou can render this `qmd` in the standard way\n\n**Challenge**: Can you work out which species is for which model? Try and add it to the output chunk above.\n\nHint: `tar_read(models)$tar_group()`\n\n## Step 5: Pull the reporting out to `targets`\n\nTry and extract the `tbl_regression` function out into the `_targets.R` file.\n\nHere's some starter code. Try to fill in everything in the angled brackets.\n\n```r\ntar_target(\n   reporting_tables,\n   < >,\n   pattern = < >,\n   iteration = < >\n)\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}