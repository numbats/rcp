{
  "hash": "e02a602379b9704f44e14329371ab987",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Workshop 10\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n   html:\n      embed-resources: true\n      output-file: \"index.html\"\n      toc: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Part 1: Setup\n\n### Step 1: Create a new RStudio project\n\n1. In RStudio, choose **File > New Project > New Directory > New Project**.\n2. Name your project (e.g. `penguin-pipeline`).\n3. This creates a local directory.\n\n### Step 2: Initialise git\n\n1. In the R console:\n\n   ```r\n   usethis::use_git()\n   ```\n\n2. Create a repository on GitHub (you can leave it empty).\n3. Copy the repository URL (e.g. `git@github.com/yourusername/penguin-pipeline.git`).\n4. In the terminal:\n\n   ```bash\n   git remote add origin git@github.com/yourusername/penguin-pipeline.git\n   git branch -M main\n   git push -u origin main\n   ```\n\n---\n\n\n## Step 1: Load & Clean Data\n\n```r\ntargets::tar_script()\n```\n\nThis creates `_targets.R`, which we will now edit.\n\nWe'll use the `palmerpenguins` dataset.\n\nEdit your `_targets.R` file like this:\n\n```r\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\ntar_option_set(packages = c(\"dplyr\", \"broom\", \"palmerpenguins\"))\n\nlist(\n  tar_target(raw_data, penguins),\n  \n  tar_target(clean_data, raw_data |> \n               filter(!is.na(body_mass_g)) |> \n               mutate(species = as.factor(species)))\n)\n```\n\nNow run the pipeline from the R console:\n\n```r\ntargets::tar_make()\n```\n\nYou should be able to see your data with\n\n```r\ntar_read(clean_data)\n```\n\n---\n\n## Step 2: Fit Models by Group\nLet’s manually define separate targets to fit a linear model (`body_mass_g ~ bill_length_mm`) for each species. This approach gets repetitive — and we’ll fix that later using dynamic branching.\n\nAdd the following targets to your `_targets.R` file:\n\n```r\n  tar_target(adelie_data, filter(clean_data, species == \"Adelie\")),\n  tar_target(chinstrap_data, filter(clean_data, species == \"Chinstrap\")),\n  tar_target(gentoo_data, filter(clean_data, species == \"Gentoo\")),\n\n  tar_target(adelie_model, lm(body_mass_g ~ bill_length_mm, data = adelie_data)),\n  tar_target(chinstrap_model, lm(body_mass_g ~ bill_length_mm, data = chinstrap_data)),\n  tar_target(gentoo_model, lm(body_mass_g ~ bill_length_mm, data = gentoo_data))\n```\n\nThen, run:\n\n```r\ntar_make()\n```\n\nYou now have three separate models, one per species.\n\n::: {.callout-tip}\nTry and plot these models from your console!\n:::\n\n---\n\n## Step 3: Use Dynamic Branching\n\nNow let’s replace our manual lapply step with **dynamic branching** from `tarchetypes`.\n\nReplace the last two targets with:\n\n```r\n  tar_group_by(\n   grouped_data, \n   clean_data, species),\n\n  tar_target(\n   models,\n   list(lm(body_mass_g ~ bill_length_mm, data = grouped_data)), \n   pattern = map(grouped_data)\n  )\n\n```\n\n::: {.callout-tip}\nNote the `list` in the second `tar_target`. This is because `tarchetypes` wants to row bind items together, which you can't do with raw `lm` objects.\n:::\n\n---\n\n## Step 4: Check your network of functions\n\nRun \n\n```r\ntar_visnetwork()\n```\n\nto see what the combinations of functions looks like.\n\n---\n\n## Step 4: Report with Quarto\n\nCreate a new `report.qmd` file with this content:\n\n````markdown\n---\ntitle: \"Penguins Analysis\"\nformat: html\nexecute:\n  echo: true\n---\n\n```{{r}}\nlibrary(targets)\nlibrary(gtsummary)\ntar_read(clean_data)\n```\n\n```{{r}}\n#| results: asis\ntar_load(models)\n\nlapply(models, function(input) {\n   tbl_regression(input)\n})\n```\n````\n\nYou can render this `qmd` in the standard way\n\n**Challenge**: Can you work out which species is for which model? Try and add it to the output chunk above.\n\nHint: `tar_read(models)$tar_group()`\n\n## Step 5: Pull the reporting out to `targets`\n\nTry and extract the `tbl_regression` function out into the `_targets.R` file.\n\nHere's some starter code. Try to fill in everything in the angled brackets.\n\n```r\ntar_target(\n   reporting_tables,\n   < >,\n   pattern = < >,\n   iteration = < >\n)\n```\n\n## Step 6: Version control\n\n### Add `.gitignore`\n\nCreate a `.gitignore` file with this content:\n\n```\n_targets\n.Rhistory\n.RData\n.Rproj.user\n```\n\nSave, add and commit this file.\n\n::: {.callout-tip}\nRemember to add the `_targets` folder to your `.gitignore` file!\n:::\n\n## Step 6: Invalidation\n\nChange the model formula in `_targets.R`\n\n```r\nlm(body_mass_g ~ bill_length_mm + flipper_length_mm, \n   data = grouped_data)\n```\n\nRun\n\n```r\ntar_visnetwork()\n```\n\nWhat do you notice?\n\n---\n\nRerun the pipeline with\n\n```r\ntargets::tar_make()\n```\n\nNotice that only the affected targets have re-run!\n\n## Your final `_targets.R` file\n\nBy the end of this workshop, you should've ended up with this:\n\n```r\n# Load packages required to define the pipeline:\nlibrary(targets)\nlibrary(tarchetypes) # Load other packages as needed.\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tibble\", \"tidyverse\", \"palmerpenguins\") # Packages that your targets need for their tasks.\n  \n)\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source()\n# tar_source(\"other_functions.R\") # Source other scripts as needed.\n\n# Replace the target list below with your own:\nlist(\n  tar_target(raw_data, penguins),\n  \n  tar_target(clean_data, raw_data |> \n               filter(!is.na(body_mass_g)) |> \n               mutate(species = as.factor(species))),\n  \n  tar_target(\n    penguins_plot,\n    ggplot(clean_data, aes(x=bill_length_mm, y = bill_depth_mm, colour = species)) +\n      geom_point()\n  ),\n  \n  tar_group_by(\n    grouped_data, \n    clean_data, species),\n  \n  tar_target(\n    models,\n    lm(body_mass_g ~ bill_length_mm, data = grouped_data), \n    pattern = map(grouped_data),\n    iteration = \"list\"\n  ),\n  \n  tar_quarto(\n    report,\n    \"report.qmd\",\n    quiet = FALSE\n  )\n)\n```",
    "supporting": [
      "workshop-10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}