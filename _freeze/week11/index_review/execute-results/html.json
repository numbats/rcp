{
  "hash": "a274c63afbd97c35283fdf511f017322",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Keeping environments separate and reproducible\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 11\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 10\"\nformat: \n  revealjs:\n    logo: images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n---\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"images/bg-01.png\"}\n\n### Keeping environments separate and reproducible\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 11\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n## Recap\n\n* Learn how to add references and bibliography\n* Dealing with large files\n* Tags\n* GitHub issues\n\n## Today's plan {#aim}\n\n::: {.callout-important}\n\n## Aim\n\n* Create a `git` project from an existing local folder\n* Licensing a repository\n* Lightweight dependency management\n* Advanced collaborative practices\n* Templates for slides\n\n:::\n\n# Debugging demo\n\n# Reproducibility using Docker\n\nThis is just for your information and it is not part of the material that is going to be examined.\n\n## Reproducibility using Docker\n\nDocker is a program that allows to manipulate (launch and stop) multiple operating systems (called containers) on your machine (your machine will be called the host). \n\nSource [here](https://colinfay.me/docker-r-reproducibility/). \n\nDocker is designed to enclose environments inside an image / a container\n\n## Reproducibility using Docker\n\n![](images/docker.png){fig-align=\"center\"}\n\n## Reproducibility using Docker\n\n![](images/docker2.png){fig-align=\"center\"}\n\n# Review of the main things that we have learned\n\n## ETC5513 Unit Objectives\n\n1. Develop skills to create reproducible documents.\n2. Understand the operation of version control systems.\n3. Advance use of version control.\n3. Utilize version control to integrate data analysis efforts of team members.\n4. Effectively work with a group to construct a collaborative data science project.\n\n## Reproducibility and Replicability\n\nDefinitions by the USA National Academies of Science, Engineering and Medicine:\n\n::: {.callout-tip}\n[Reproducibility]{.monash-green2} (\"computational reproducibility\") means obtaining consistent computational results using the same input data, computational steps, methods, code, and conditions of analysis. \n:::\n\n[Replicability]{.monash-green2} means obtaining consistent results across studies aimed at answering the same scientific question, each of which has obtained its own data\n\n\n# Critical issue\n![](https://media.giphy.com/media/11fDMHAzihB8D6/giphy.gif)\n\n## Reproducible research {.smaller}\n\n* Working to make your research reproducible does require extra upfront effort.\n* Making a project reproducible from the start encourages you to use better work habits.\n* It should push you to bring your data and source code up to a higher level of quality than you might if you “thought ‘no one was looking’ ” [Donoho, 2010, 386]. \n* Reproducible research needs to be stored so that other researchers can actually access the data and source code. \n* Changes are easier to implement $\\rightarrow$ specially when using dynamic reproducible documents.\n* Reproducible research has higher impact.\n\n## Tools for reproducible research\n\n* R programming language\n   - R enables researchers to read data, create data visualizations and run statistical analyses.\n   - R has thousands of libraries\n   - R has a very active development community that is constantly expanding.\n   \n* R libraries/packages facilitate reproducibility:\n     * Knitr and Rmarkdown:\n       - Allow us to connect R-based analyses to presentation, papers and reports documents created with markup languages such as LaTeX and Markdown\n\n## Rstudio \n\n* RStudio is an integrated developer environment (IDE): \n  - R by itself has the capabilities necessary to gather and analyze data, and with a little help from knitr/Rmarkdown and markup languages, present results in a way that is highly reproducible. \n\n\nRStudio allows you to do all of these things more easily. \n  - It also is a happy medium between R’s text-based interface and a pure GUI. \n  - It is not the only IDE! \n  - It is closely integrated with the version control programs Git and SVN.\n\n## Version control\n\n::: {.callout-tip}\n[Version Control]{.monash-green2} is a system that records changes to a file or set of files over time so that you can recall specific versions later.\n:::\n\n## Git\n\n\"Git is a distributed version-control system for tracking changes in source \ncode during software development. It is designed for coordinating work among \nprogrammers, but it can be used to track changes in any set of files. Its \ngoals include speed, data integrity,  and support for distributed, non-linear workflows\"\n\nhttps://en.wikipedia.org/wiki/Git\n\n![](images/Git-Logo-Black.png){fig-align=\"center\"}\n\n## Git and GitHub\n\n![](images/Gitvs.Github-1a.jpg){fig-align=\"center\"}\n\n[Source here]( https://blog.devmountain.com/git-vs-github-whats-the-difference/)\n\n\n## Tools\n\n- R\n- Rstudio\n- Git\n- GitHub\n- VS code\n\n## Workflow for reproducible research\n\n![](images/Workflow.png){fig-align=\"center\"}\n\n[Reproducible Research with R and Rstudio by Christopher Gandrud ](http://christophergandrud.blogspot.com/2013/07/getting-started-with-reproducible.html)\n\n\n## What is Markdown? \n\n::: {.callout-tip}\nMarkdown is a lightweight markup language that you can use to add formatting elements to plain text text documents.\n:::\n\nIt was created by John Gruber in 2004. [Read more here](https://www.markdownguide.org/getting-started/)\n\n* Markdown is a \"text\" formatting syntax\n* Can be easily render to more complex formats such as: pdf, html, pdf, docx\n\n\n## Markdown example\n\n```markdown\n# Header 1\n## Header 2\n\n- Unordered list 1 \n1. Ordered list 1\n\n _This is italic._\n \n *This too.*\n \n **This is bold**\n```\n\n## Quarto and knitr\n\n* Quarto is a package within R that allows us to create documents using **Markdown**\n* Knitr is an R package that allows us to render Rmarkdown code into html, pdf, docx\n\n## Quarto file structure\n\nThree main components:\n\n* YAML\n* Text\n* R Code Chunks\n\n[**More info about Quarto**](https://quarto.org)\n\n## Quarto anatomy\n\n* Metadata: It is written in markdown at the top of the file between '---' in YAML\n\n```markdown\n---\ntitle: \"ETC5513\"\nauthor: \"Michael Lydeamore\"\nformat: html\n---\n```\n\n## Quarto anatomy\n\n* Text is written in markdown\n\n```markdown\n# This is a section header\n## This is a subsection header\nIn this section it is **important**\n```\n\n## R code chunks\n\nYou can quickly insert R chunks into your file with\n\n- the keyboard shortcut [Ctrl + Alt + I (OS X: Cmd + Option + I)]{.monash-green2}\n- the Add Chunk  command in the editor toolbar\n- or by typing the chunk delimiters\n\n## Chunk options\n\nChunk output can be customized with options, marked by the \"hashpipe\": `#|`\n\n- `include: false` prevents code and results from appearing in the finished file. Quarto still runs the code in the chunk, and the results can be used by other chunks.\n- `echo: false` prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.\n\n## More R code chunk options\n\n- `eval: false` prevents evaluating the code and include its results\n- `message: false` prevents messages that are generated by code from appearing in the finished file.\n- `warning: false` prevents warnings that are generated by code from appearing in the finished.\n- `fig-cap: ...` adds a caption to graphical results.\n\n## R code chunks\n\n![](images/rcodechunks.png){fig-align=\"center\"}\n\n## Global options \n\nTo set global options that apply to every chunk in your file, call \n\n`knitr::opts_chunk$set()`\n\nin an R code chunk. \n\nKnitr will treat each option that you pass to `knitr::opts_chunk$set()` as a global default that can be overwritten in individual R code chunk headers.\n\n[More info here](https://yihui.org/knitr/options/)\n\n\n## Caching\n- If document rendering becomes time consuming due to long computations you can use knitr caching to improve performance. \n- [Knitr chunk and package options (here)](https://yihui.org/knitr/options/) describes how caching works\n- The [cache examples (here)](https://yihui.org/knitr/demo/cache/) provide additional details.\n\n`cache: true` is an option within the chunks or you can set it as a global option.\n\n::: {.callout-caution}\nCaching might prevent you from updating some results. Because of that, it is essential that you use it only when you are sure your R code chunks are working fine. Setting `cache = TRUE` as a global option might be dangerous so be very careful.\n:::\n\n## Quarto workflow\n\n![](images/rmarkdown_wizards.png){fig-align=\"center\"}\n\n## Thanks to knitr and pandoc\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/knitr_0.png){fig-align=\"center\"}\n\n:::\n::: {.column width='50%'}\n`knitr` executes the code and coverts the .qmd to .md\n\n`pandoc` renders the .md file to the output format you want\n:::\n:::\n\n## Learning more about creating Quarto documents\n\nWhen we have figures or plots in our reports it is a great idea to set up some global options at the beginning of our document:\n\n### Keeping our R figures inside a folder\n\n```\n---\ntitle: \"My Report\"\nauthor: \"Michael Lydeamore\"\nformat:\n  html:\n    keep_md: true\n---    \n```\n\n## Inserting figures\n\nUsing markdown syntax:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n![Caption](path-to-image-here)\n```\n:::\n\n\nUsing Knitr syntax\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"images/fig2.png\")\n```\n:::\n\n\n## Displaying figures\n\n**Options inside your R code chunks**\n\n- `fig-align`:  alignment of the figures in the report with options default, center, left, or right\n- `fig-cap`: captions\n- `fig-height` & `fig-width`: size of the figure in inches\n- `out-height` & `out-width`: size of your plot in the final file. Useful to resize your figures by say 50%\n\n## Computer paths: Absolute and Relative Paths\n\nAn absolute or full path begins with a drive letter followed by a colon, such as `D:` or `/users`.\n\n  - Windows: `C:\\documents\\charlie`\n  - Mac/linux: `/Users/documents/courses/ETC5513`\n\n::: {.fragment}\n\nA relative path refers to a location that is relative to a current directory:\n\n  - `ETC5513/exercise.Rmd`\n\n(no matter where the folder sits things can actually run)\n\nIt is essential to understand where your directories and files are within your computer. \nHaving clarity about that and the projects file architecture\ngives you total control about its organization\n\n:::\n\n\n## R/ Rstudio projects\n\n* Each project has a unique working directory\n\n* Clean file system: all files related to a single project should be in the same folder\n  - data: typically is a folder\n  - code\n  - figures: typically is a folder\n  - notes\n \n* File path discipline: all paths should be relative  to the project’s folder\n* Refer to the computer location where files and folders are.\n* [Remember, absolute paths are not reproducible]{.red}\n\n# RStudio Project Example\n\n## Rstudio projects\n\nRStudio Projects are associated with R working directories.\n\nYou can create an RStudio project:\n\n* In a brand new directory\n* In an existing directory where you already have R code and data\n* From a version control repository\n\n[Read more on Rstudio projects here](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)\n\n### Inside Rstudio how do we create a new project?\n\nFile > New project > (Few options)\n\n## RStudio projects advantages\n\nWhen a new project is created RStudio:\n\n* Creates a project file (with an `.Rproj` extension) within the project directory.\n* This file can also be used as a shortcut for opening the project directly from the filesystem.\n* Creates a hidden directory (named `.Rproj.user`) where project-specific temporary files (e.g. auto-saved source documents, window-state, etc.) are stored. \n* Loads the project into RStudio and display its name in the Projects toolbar \n\n\n#  Remember our goal: Reproducible workflow\n\n![](images/environmental-data-science-r4ds-general.png){fig-align=\"center\"}\n\n\nAllison Horst (@allison_horst)\n\n## Different Version control Systems {.smaller}\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/distributed.png){fig-align=\"center\"}\n:::\n::: {.column width='50%'}\n- These systems [fully mirror the repository]{.monash-green2}, including its full history in various servers/locations\n- If any server malfunction, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it. \n- Every clone is really a full backup of all the data.\n:::\n:::\n\n\n## Distributed Version Control: Git\nWe use a distributed version control called Git\n\n![](images/Git-Logo-Black.png){fig-align=\"center\"}\n\n## Git overview in a nutshell\nLet's think of the connections between the different versions of an R project as a tree (Git tree).\n\n::: {.columns}\n::: {.column width='50%'}\n- Beginning of the project is at the bottom of the tree\n- White circles represent each version of the project\n- We have what we call `main` (default branch)\n- We have branches that appeared and then [merged]{.monash-blue} with main\nwith the main\n:::\n::: {.column width='50%'}\n![](images/git_tree.jpg){fig-align=\"center\"}\n:::\n:::\n\n## Git tree and Snapshots (Database)\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/git_tree.jpg){fig-align=\"center\"}\n:::\n::: {.column width='50%'}\n![](images/gitsnapshots.png){fig-align=\"center\"}\n:::\n:::\n\nIllustration source: [Begining Git and GitHub](https://git-scm.com/)\n\n## Our friend: The Command Line Interface \n\nAlso known as the Shell, command line interface (cli) or terminal is an interface for typing commands to interact  directly with a computer's operating system.\n\n![](images/terminal2.png){fig-align=\"center\"}\n\n## Git and Command Line  \n\nLearn how to use the shell/command line interface!\n\n**Why??**\n\n- We will use the command line interface to interact with Git and with GitHub\n- The shell or command line interface is an interface where the user types  commands.\n- This interface allows us to control our computer using commands entered via our keyboard.\n- That means that instead of using a graphical user interface (GUI) + our mouse to open and close programs, create folders and moving files [we are going to type commands.]{.monash-green2}\n\n## Components of a Git repository: Visually\n\n![](images/threeSS.jpg){fig-align=\"center\"}\n\n## Three Git States\n\nGit has three main states that your files can reside in: modified, staged, and committed:\n\n* **Modified**: you have changed the file but have not committed it to your database yet.\n\n* **Staged**: you have marked a modified file in its current version to go into your next commit snapshot.\n\n* **Committed**: the data is safely stored in your local database.\n\nThis leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.\n\n## Git recap\n\n* Tracking all the changes to a project\n* Allows you to go back and forth between versions\n* Check files history\n* Tag specific versions for quick referencing\n* Review changes made by collaborators in the project\n* Create project branches that allow you to work on the project withoutinterfering with the main project\n* Merging branches to main project\n\nTo interact between our projects and Git, we are going to use the shell/command line interface\n\n# Collaboration\n\n![](images/sharing.jpg){fig-align=\"center\"}\n\n## GitHub is our remote repository\n\n![](images/Gitvs.Github-1a.jpg){fig-align=\"center\"}\n\n* GitHub is an interface and cloud hosting service built on top of the Git version control system.\n* Git does the version control and GitHub stores the data remotely.\n* GitHub makes your projects accessible on a fully feature project website\n\n[More info about GitHub here](https://github.com/features)\n\n## Git repo and remote repository\n\n![](images/completeGDE.jpg){fig-align=\"center\"}\n\n## GitHub Workflow: Visual example\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/gitclone.jpg){fig-align=\"center\"}\n\n:::\n::: {.column width='50%'}\n![](images/commit_push.jpg){fig-align=\"center\"}\n\n:::\n:::\n\n## From clone to push into the remote main branch\n\n* `git clone`: is a Git command line utility which is used to target an existing repository and create a clone, or copy of the target repository. \n* `git add`: command adds a change in the working directory to the staging area. \n* `git commit -m`: The git commit command captures a snapshot of the project's currently staged changes. (m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\n* `git push origin main`: The git push command is used to upload local repository content to a remote repository, in this case to the main branch.\n  \n\n## Git recap\n\n* Tracking all the changes to a project\n* Allows you to go back and forth between versions\n* Check files history\n* Tag specific versions for quick referencing\n* Review changes made by collaborators in the project\n* Create project branches that allow you to work on the project without interfering with the main project\n* Merging branches to main project\n\nTo interact between our projects and Git, we are going to use the shell/command line interface\n\n## GitHub is our remote repository\n\n![](images/github_repo.png){fig-align=\"center\"}\n\n## Creating a repo on GitHub\n\n::: {.columns}\n::: {.column width='50%'}\n1. Login into GitHub\n2. Click the ‘+’ icon on the top right on the menu bar and select ‘New Repository’.\n:::\n::: {.column width='50%'}\n![](images/creatingrepo.png){fig-align=\"center\"}\n\n:::\n:::\n\n## Tracked and untracked files\n\n* In a git repository tracked files are those which are part of the git repository\n* However, we can also have untracked files for which their history is not tracked\n\n\n- Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about. \n- Untracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area.\n\n\n[More info here](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository)\n\n## General Workflow (via Terminal) {.smaller}\n\nOnce you have cloned the repo, each time you work on the project (via the terminal/command line): \n\n-  `git pull`: used to fetch and download content from a remote repository and immediately update the local repository to match that content.\n-  `git status`: displays the state of the working directory and the staging area\n-  `git add file_name`: adds changes in the working directory to the staging area)\n-  `git commit -m \"Message\"`: used to create a snapshot of the staged changes along a timeline of a Git project history\n-  `git push origin branch name`: used to upload the local repository content to a remote repository in GitHub\n \n## Cheat sheet on how to use the terminal for Git\n\nExcellent summary about the commands that will be using can be found [here](https://education.github.com/git-cheat-sheet-education.pdf)\n\n\n## Rstudio and GitHub\n\n\nThe status/staging panel in Rstudio:\n\n![](images/staggingarea.png){fig-align=\"center\"}\n\n## Rstudio and GitHub\n\nRStudio keeps git constantly scanning the project directory to find any files\nthat have changed or which are new.\n\nBy clicking a file's little \"check-box\" you can stage it.\n\n![](images/staggingarea.png){fig-align=\"center\"}\n\n## Rstudio and GitHub\n\nUnderstanding the symbols in the Rstudio Git pane:\n\n- [Blue-M]{.monash-blue}: a file that is already under version control that has been modified.\n- [Orange-?]{.orange}: a file that is not under version control (yet...)\n- [Green-A]{.monash-green2}: a file that was not under version control, but which has been staged to be committed.\n- [Red-D]{.red}: a file under version control has been deleted.  To make it really disappear, you have to stage its disappearance and commit.\n- [Purple-R]{.purple}: a file that was renamed.  (Note that git in Rstudio seems to be figuring this out on its own.)\n\n## Branches\n\n![](images/branches.png){fig-align=\"center\"}\n\n## Create branches using the Terminal/Shell/CLI\n\nUsing `git branch` and `git checkout`:\n\n- `git branch` show us the branches we have in our repo and marked our current branch with `*`\n- `git branch newbranch_name` creates a new branch but does not move the `HEAD` of the repo there.\n- `git checkout newbranch_name` moves the `HEAD` to `newbranch_name`\n\n## Creating branches\n\nUsing the `checkout` command:\n\n- `git checkout -b newbranch_namne`: creates a new branch **and** moves the repo `HEAD` to this branch\n- You can confirm it by using `git branch` to see in which branch you are currently in\n- Checking out a branch updates the files in the working directory to match the version stored in that branch\n- It tells Git to record all new commits on that branch.\n\n## Merging branches successfully\nSuppose we have two branches: `main` and `new_development`\n\n1. For merging: go to `main` branch `git checkout main`\n2. `git merge new_development -m \"Merging new_development into main\"`\n\nRemember that if you have VSCode installed and you do `git merge new_development` then the VSCode editor will open so that you can type your message.\n\nIf those steps are successful  your `new_development` branch will be fully integrated within the main branch.\n\n## Change branch name\n\nBefore you push the new branch to the remote repo:\n\n`git branch -m original_name new_name`\n\nIf you want to renamed a branch that has already been  pushed to the remote repo:\n\n1. Rename the branch locally `git branch -m old_name_branch new_name`\n2. `git push origin -u newname`\n3. Delete the old_name_branch: `git push origin --delete old_name_branch`\n\n## Stash changes: Apply and pop\n\nThe `git stash` command takes your **uncommitted changes**  and saves them in the git repo away for later use.\n\n**Bringing stash into the repo**\n\n- `git stash`\n- `git stash apply`\n- `git stash pop`\n- `git stash list` to see the list of the stashes\n\n## Apply\n\n`git stash apply` will take the changes saved in your stash and apply them into the working directory of your current branch. In addition, [the changes are kept in the stash]{.monash-green2}.\n\nThis might be useful when you want to apply the same changes into different branches.\n\n## Pop\n\n`git stash pop` will do the same as apply but [will delete the stash after applying the changes]{.monash-green2}. `git stash pop` will apply the changes into your working copy.\n\n::: {.callout-tip}\nStash is not a substitute for committing changes\n:::\n\n## gitignore\n\n- Ignored files are tracked in a special file named `.gitignore` that is checked in at the root of your repository.\n- There is no explicit git ignore command: instead Git uses a `.gitignore` file which must be edited and committed by hand  when you have new files that you wish to ignore.\n- `.gitignore` files contain patterns that are matched against file names in your repository to determine whether or not they shouldbe ignored.\n\n## Example of gitignore patterns\n\n![](images/gitignore.png){fig-align=\"center\"}\n\n\n[Source here](https://www.atlassian.com/git/tutorials/saving-changes/gitignore)\n\n\n## Example of a gitignore file\n\n![](images/example_gitignore.png){fig-align=\"center\"}\n\n[Source here](https://gist.github.com/octocat/9257657)\n\n\n## Rebase in practice\n\nAssume the following history exists and the current branch is \"Feature\"\n\n```\n          A---B---C Feature\n         /\n    D---E---F---G main\n```    \nFrom this point, the result of either of the following commands:\n\n`git checkout Feature`\n\n`git rebase main`\n \n`git rebase main Feature`\n\n```\n                  A'--B'--C' Feature\n                  /\n    D---E---F---G main\n ```\n \n## Git rebase and merge\n\nMerging is a non-destructive operation. The existing branches are not changed in any way. This avoids all of the potential problems of rebasing.\n\nRebasing moves the entire Feature branch to begin on the tip of the main branch, incorporating all of the new commits into main.\n\nRebasing re-writes the project history by creating brand new commits for each commit in the original branch. Produces cleaner project history.\n\n**However**, it creates problems with safety and traceability\n\nGolden rule for rebase: Never use it on public branches (main in collaborative projects).\n\n\n## Why do we fork a repository?\n\nA fork is a copy of a repository\n\nForking a repository allows you to freely experiment with changes without affecting the original project.\n\nMost commonly, forks are used to either propose changes to someone else project or to use someone else\nproject as a starting point for your own project.\n\n[More info here](https://help.github.com/en/github/getting-started-with-github/fork-a-repo)\n\n\n# Forking a repo  in GitHub\n\nSearch/navigate repo from within our Github account.\n\n![](images/fork.png){fig-align=\"center\"}\n\n## Differences between forking and cloning a repo\n\n- A fork is a copy of someone elses GitHub repository [saved to your own GitHub account]{.monash-green2}. It allows you to experiment with changes without affecting the original project.\n- A fork acts as a between the original repository and your personal one.\n- It will also allow you to interact between your forked copy and the original repo\n\n\n-  When you clone a GitHub repository, you are creating a [local copy of that repo on your computer]{.monash-green2}\n- That allows you to work on that repo locally and sync between both your local repo and your remote repo\n\n## What is a Pull request?\n\n- We use GitHub to share our code and projects with others.\n- There are situations when another person make changes into your code and wants you to consider those changes.\n- Examples: Fixing a problem/bug or add new functionality into the repo.\n\n- We achieve this by sending a request to the repo's owner to  pull/merge these changes into the  owner's original GitHub repo\n\nThat request is called a [**pull request**]{.monash-green2}\n\n## Pull request visually\n\n![](images/pr0.jpg){fig-align=\"center\"}\n\n## Forked repo\n\n![](images/pr1.png){fig-align=\"center\"}\n\n## Latex\n\n![](images/latex.png){fig-align=\"center\"}\n\n[Latex more info](https://www.latex-project.org/)\n\n## Latex template\n\n![](images/latex_template.png){fig-align=\"center\"}\n\n## Integrate a latex template into a Quarto file\n\nThere are different ways:\n\n1. If the file features are not too complicated. We can simply add some of the necessary packages into our YAML preamble.\n\n![](images/tutorial.png){fig-align=\"center\"}\n\n## Integrate a latex template into an Rmd file\n\n2. We can use `preamble.tex`:\n\n![](images/preamble.png){fig-align=\"center\"}\n\n## Reference\n\n[LaTeX in 24 Hours A Practical Guide for Scientific Writing](\nhttps://monash.hosted.exlibrisgroup.com/primo-explore/fulldisplay?docid=catau51422921060001751&context=L&vid=MONUI&lang=en_US&search_scope=au_everything&adaptor=Local%20Search%20Engine&tab=default_tab&query=any,contains,LaTeX%20in%2024%20Hours%20%20A%20Practical%20Guide%20for%20Scientific%20Writing&mode=basic)\n\n## Commits, hash values and SHA numbers\n\n- `git log`: allow us go back into our project history to see who contributed what, find out past issues or problems and revert problematic changes.\n\n```\ncommit 8cfaee1e447d8e83d745b51ffcd310465afb76b1\nAuthor: Patricia Menendez <patricia.menendez@monash.edu>\nDate:   Sat Apr 4 15:49:54 2020 +1000\n   \n    Uploading Week4 slides \n```\n\n## Commits and SHA numbers\n\n`git log --oneline`: condenses each commit to a single line\n\n```\n3a5bc86 W3 cli updates\n4d1b022 W3 shell update\n```\n\nWe can also use `git log --pretty=oneline`\n\n## Detached HEAD\n\nDetached HEAD state gives you the power to check out any commit and explore the older state of a repository without having to create a local branch.\n\n**Any commits made in a detached HEAD state will be lost when you check out any branch.**\n\nSolution: Create a branch to keep commits\n\n## Pull commit from the log into our environment\n\n`git checkout 8cfaee1e447d8e8`\n\n```\nYou are in 'detached HEAD' state. You can look around, make experimental\n   changes and commit them, and you can discard any commits you make in this\n   state without impacting any branches by performing another checkout.\n```\n\n`git checkout -b new_branch_name`\n   \n## Stage and unstage files \n\n`git reset filename`\n`git reset`\n\n## Edit/Amend previous commit\n\nIf you have not pushed the commit:\n- `git commit --amend`: will open your VS code editor so you can amend the commit\n- `git push origin main`\n\n![](images/editcommit.png){fig-align=\"center\"}\n\n# git reset: three options\n\n- `git reset --soft HEAD~1`\n- `git reset --hard HEAD~1`\n- `git reset --mixed HEAD~1`\n\n`HEAD~1`: you want to reset the HEAD (the last commit) to one commit before in the log history.\n\n**This can be extended to any commit and you can use the notation HEAD~1 or the commit SHA identifier**\n\n## `git reset --soft`\n\nImagine that you have added two files in your latest commit and you want to make a modification in one of the files.\n\n- In this case we can use `git reset --soft HEAD~1` to undo our last commit and include additional modifications into the file.\n- In this case, when we undo the commit the file is still in the repo with changes to be committed but the commit has been removed. \n- We have undone the last commit by preserving the changes done to the files in the index (staging area).\n- Then we can fix the file and commit the changes again.\n\n## `git reset --hard`\n\n- If we want to undo the last commit and discard all changes in the working directory and index (staging area), we can  execute the `git reset` command with the `–-hard` option.\n- As before we specify the commit before HEAD (`HEAD~1`).\n\n::: {.callout-caution}\nWhen we use `git reset --hard` all the changes will be removed from the working directory and from the index (staging area).\n:::\n\n## `git reset --mixed`\n\n- If we want to undo the last Git commit, keep changes in the working directory but NOT in the index (staging area), we can  use the `git reset --mixed` option. \n- For the last commit we will need to write `git reset --mixed HEAD~1`\n- The `git reset --mixed` option is combination of soft and hard reset.\n\n## Undoing\n\nThe git revert command can be considered an 'undo' type command, however, it is not a traditional undo operation. Instead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.\n\nYou can think of it as a \"rollback\": it points your local environment back to a previous commit. \nYour \"local environment,\" refers to your local repository, staging area, and working directory\n\n## Removing files\n\n- If the files are untracked you can just remove them: via the terminal or using your OS \n- If the files are tracked:\n  - Removing files and directories/folders:\n  - `git rm file.txt`\n  - `git rm -r Data `\n  - `git commit -m \"Delete file.txt\"`\n  - `git status `\n   \n## More on commits\n\n- One line commit (we need to main that a little bit more!)\n\n- We can add more text into any commit and many times we should be doing that\n- We can do that using VSCode\n\nCommit structure:\n\nFirst line\n_Blank Line_\nRest of the text\n\n## Commits structure example\n\n![](images/commitsexample.png){fig-align=\"center\"}\n\n## Large files in Git and GitHub\n\n- Files larger than 100 MB need to be dealt with care in GitHub\n- Solution: Git LFS\n\nGit Large File Storage lets you store them on a remote server such as GitHub.\n\n[More info here](https://git-lfs.github.com)\n\n::: {.callout-tip}\n Git Large File Storage (LFS) replaces large files such as audio samples, \nvideos, data sets, and graphics with text pointers inside Git, \nwhile storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n\n:::\n\n## Git LFS in practice summary\n\n- `git lfs install`: You only need to run this once per repo.\n- `git lfs track \"*.csv\"`: In each Git repository where you want to use Git LFS, select the file types you would like Git LFS to manage\n- `git add .gitattributes`: make sure \".gitattributes\" is tracked\n\nThen, continue as usual:\n\n- `git add file.csv`\n- `git commit -m \"Add data file\"`\n- `git push origin main`\n\n## Git LFS in practice summary\n\nIf for some reason you have staged/committed a large file before you run the work flow above you can use:\n\n- `git reset --soft HEAD~1`\n\n## Git tags\n\n[Tags]{.monash-green2} are references that point to specific points in Git history\n\nExample: Specific report release, package release\n\n::: {.fragment}\nA tag is like a branch that doesn't change.\n\nUnlike branches, tags (after being created) have no further history of commits\n:::\n\nGreat tutorial on [tags here](https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag)\n\n\n## Git tags example\n\n![](images/tags.png){fig-align=\"center\"}\n\n## Revisiting git fetch\n\n- `git pull` is a combination of both commands `git fetch` and `git merge`\n- If you are working on your own, `git pull` would be ok in most cases.\n\n- However, if you are collaborating with other people who might be simultaneously working in the repo, using `git pull` might not be a good idea!\n\nIn that case, it is much better to use `git fetch` first to see what is happening in the remote repository and to synchronize your repo by merging the changes.\n\n## How does fetch work?\n\n![](images/fetch2.png){fig-align=\"center\"}\n\n`git fetch` downloaded the new B commit however our local working directory is not updated and the head of our main branch is still pointing to commit A!\n \n## How do we merge those branches?\n\nWe need to combined main branch with the remote tracking origin/main branch. How?\n\n- By merging!\n\nFirst we need to move into the main branch and then merge origin/main.\n\n```\ngit checkout main\ngit merge origin/main\n```\n\n- If the branches have not diverged, we can merge without conflict via a fast  merge.\n- If the branches have diverged, we will need to resolve conflicts.\n\n## Very useful commands for fetching\n\n- `git remote`: lets you create, view, and delete connections to remote repositories)\n- `git branch -vv` allows you to check the status of your local and remote branches in relation to each other.\n- `git fetch origin` fetch the changes from remote origin\n- `git branch -a`: all the branches available in the local repository +  all the branches fetched from the remote. \n\nThe branches fetched from the remote origin would be preceded by `remotes/origin/`\n\n## Licensing a repository\n\nPublic repos in  GitHub make your  work publicly available and therefore it is important to establish how your work should be acknowledged if someone else wants to use it.\n\n\n\"Public repositories on GitHub are often used to share open source software. For your repository to truly be open source, you'll need to license it so that others are free to use, change, and distribute the software.\"\"\n\n[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository)\n\n## Choose an open source license\n\n![](images/chooselicense.png){fig-align=\"center\"}\n\n[Source here](https://choosealicense.com/)\n\n## No license\n\n![](images/no-permission.png){fig-align=\"center\"}\n\n[Source here](https://choosealicense.com/no-permission/)\n\n## Light weight dependency management\n\n![](images/renvlogo.png){fig-align=\"center\"}\n\nThe idea is to create [project-local library]{.monash-green2} to ensure that projects gets its own unique library of R packages!\n\n## How does the renv R package work?\n\n- Gives each R projects its own project-local library.\n- Provides and easy way to connect R sessions to use a specific project-local library\n- Provides tools for managing the R packages installed in these project-local libraries\n\n## Workflow summary for light weight dependency management using renv package\n\nIn the R console:\n\n- `renv::init()` to initialize a project with a project-local library\n- `renv::snapshot()` to save the project-local library's sate\n- `renv::restore()` to restore the project-local library's state\n\n\n# You will get better with practice!\n\n## Tools for R and beyond\n\nYou have learned version control: This works for any programming language!\n\n# Be confident and use the tools.\n\n# Reproducibility\n\nIt starts with you.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}