{
  "hash": "94d5f68672993e37787c120f9eb96169",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Docker: The gold standard of reproducibility\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 11\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 11\"\nformat: \n  revealjs:\n    logo: images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n---\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"images/bg-01.png\"}\n\n### Docker: The gold standard of reproducibility\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 11\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n# Reproducibility using Docker\n\nThis is just for your information and it is not part of the material that is going to be examined.\n\n## Reproducibility using Docker\n\nDocker is a program that allows to manipulate (launch and stop) multiple operating systems (called containers) on your machine (your machine will be called the host). \n\nSource [here](https://colinfay.me/docker-r-reproducibility/). \n\nDocker is designed to enclose environments inside an image / a container\n\n## What is a container?\n\nA container is like a virtual machine. They have an operating system, but don't simulate the entire computer.\n\nTypically these operating system's are stripped down to the bare minimum.\n\nContainers are built using a set of instructions, which makes them reproducible\n\n## Why use a container?\n\nContainers run anyway in a (relatively) standardised way, independent of the host operating system.\n\nThis means you can _deploy_ a container on Amazon AWS, Azure, or on your own PC and the behaviour should be the same.\n\n::: {.fragment}\nDocker is a way to set up, share, and deploy these containers, and is used very widely.\n:::\n\n## Docker Desktop\n\nWe will use Docker **Desktop** which gives us a visual interface to:\n\n- Browse and launch containers\n- Manage volumes\n- View logs and resources\n- Build images without the terminal\n\n## Step 1: Install Docker Desktop\n\n- Download: [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop)\n- Follow the installation instructions for:\n  - macOS\n  - Windows\n  - (Linux users will need Docker Engine + extensions)\n\nYou may need to update your path. On Mac, do this by running\n\n```bash\nexport PATH=\"$PATH:/Applications/Docker.app/Contents/Resources/bin/\"\n```\n\nin the terminal\n\n## Step 2: Run a container\n\nThe [rocker project](https://rocker-project.org/) provides R containers that we can use.\n\nWe can search for these inside Docker Desktop:\n\n![](images/2025-05-15-12-37-47.png){fig-align=\"center\"}\n\nPress \"Pull\" to download the container\n\n## Step 2a: Running in the terminal\n\nWhile it is possible to run containers inside Docker Desktop, it's much easier to run them in the terminal.\n\nTo run the `r-base` container, we can follow the instructions on the container page.\n\n```bash\ndocker run -ti --rm r-base\n```\n\nThis should launch you into a terminal R session!\n\n::: {.fragment}\nNote the arguments:\n\n* `-ti` means \"terminal, interactive\"\n* `--rm` means delete the container when it closes\n:::\n\n## Checking if the container is running\n\nYou should be able to see the container inside Docker Desktop\n\n![](images/2025-05-15-12-40-16.png){fig-align=\"center\"}\n\nAnd when you stop the container (with `q()`) it will disappear out of your list.\n\n## The Dockerfile\n\nDocker containers are built using a Dockerfile. You can't see these on Dockerhub (sadly) but most are on GitHub.\n\nHere is the `r-base` Dockerfile:\n\n```\n## Emacs, make this -*- mode: sh; -*-\n\nFROM debian:testing\n\nLABEL org.opencontainers.image.licenses=\"GPL-2.0-or-later\" \\\n      org.opencontainers.image.source=\"https://github.com/rocker-org/rocker\" \\\n      org.opencontainers.image.vendor=\"Rocker Project\" \\\n      org.opencontainers.image.authors=\"Dirk Eddelbuettel <edd@debian.org>\"\n\n## Set a default user. Available via runtime flag `--user docker`\n## Add user to 'staff' group, granting them write privileges to /usr/local/lib/R/site.library\n## User should also have & own a home directory (for rstudio or linked volumes to work properly).\nRUN useradd -s /bin/bash -m docker \\\n\t&& usermod -a -G staff docker\n\n## NB: No 'apt-get upgrade -y' in official images, see eg\n## https://github.com/docker-library/official-images/pull/13443#issuecomment-1297829291\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\ted \\\n\t\tless \\\n\t\tlocales \\\n\t\tvim-tiny \\\n\t\twget \\\n\t\tca-certificates \\\n\t\tfonts-texgyre \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n## Configure default locale, see https://github.com/rocker-org/rocker/issues/19\nRUN echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n\t&& locale-gen en_US.utf8 \\\n\t&& /usr/sbin/update-locale LANG=en_US.UTF-8\n\nENV LC_ALL=en_US.UTF-8\nENV LANG=en_US.UTF-8\n\n## Use Debian unstable via pinning -- new style via APT::Default-Release\nRUN echo \"deb http://http.debian.net/debian sid main\" > /etc/apt/sources.list.d/debian-unstable.list \\\n        && echo 'APT::Default-Release \"testing\";' > /etc/apt/apt.conf.d/default \\\n        && echo 'APT::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/90local-no-recommends\n\nENV R_BASE_VERSION=4.5.0\n\n# ## During the freeze, new (source) packages are in experimental and we place the binaries in our PPA\n# RUN echo \"deb http://deb.debian.org/debian experimental main\" > /etc/apt/sources.list.d/experimental.list \\\n#    && echo \"deb [trusted=yes] https://eddelbuettel.github.io/ppaR400 ./\" > /etc/apt/sources.list.d/edd-r4.list\n\n## Now install R and littler, and create a link for littler in /usr/local/bin\nRUN apt-get update \\\n        && apt-get install -y -t unstable --no-install-recommends \\\n                libopenblas0-pthread \\\n\t\tlittler \\\n                r-cran-docopt \\\n                r-cran-littler \\\n\t\tr-base=${R_BASE_VERSION}-* \\\n\t\tr-base-dev=${R_BASE_VERSION}-* \\\n                r-base-core=${R_BASE_VERSION}-* \\\n\t\tr-recommended=${R_BASE_VERSION}-* \\\n\t&& chown root:staff \"/usr/local/lib/R/site-library\" \\\n\t&& chmod g+ws \"/usr/local/lib/R/site-library\" \\\n\t&& ln -s /usr/lib/R/site-library/littler/examples/install.r /usr/local/bin/install.r \\\n\t&& ln -s /usr/lib/R/site-library/littler/examples/install2.r /usr/local/bin/install2.r \\\n\t&& ln -s /usr/lib/R/site-library/littler/examples/installBioc.r /usr/local/bin/installBioc.r \\\n\t&& ln -s /usr/lib/R/site-library/littler/examples/installDeps.r /usr/local/bin/installDeps.r \\\n\t&& ln -s /usr/lib/R/site-library/littler/examples/installGithub.r /usr/local/bin/installGithub.r \\\n\t&& ln -s /usr/lib/R/site-library/littler/examples/testInstalled.r /usr/local/bin/testInstalled.r \\\n\t&& rm -rf /tmp/downloaded_packages/ /tmp/*.rds \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nCMD [\"R\"]\n```\n\n---\n\n## The Dockerfile\n\nIt looks scary, but we can break it down.\n\n```\nFROM debian:testing\n```\n\nStart from debian Linux\n\n::: {.fragment}\n\n\n```\nLABEL org.opencontainers.image.licenses=\"GPL-2.0-or-later\" \\\n      org.opencontainers.image.source=\"https://github.com/rocker-org/rocker\" \\\n      org.opencontainers.image.vendor=\"Rocker Project\" \\\n      org.opencontainers.image.authors=\"Dirk Eddelbuettel <edd@debian.org>\"\n```\n\nDo some labelling\n:::\n\n\n\n## The Dockerfile\n\n```\nRUN useradd -s /bin/bash -m docker \\\n\t&& usermod -a -G staff docker\n```\n\nAdd a user\n\n::: {.fragment}\n```\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\ted \\\n\t\tless \\\n\t\tlocales \\\n\t\tvim-tiny \\\n\t\twget \\\n\t\tca-certificates \\\n\t\tfonts-texgyre \\\n\t&& rm -rf /var/lib/apt/lists/*\n```\n\nUpgrade linux stuff\n\n:::\n\n\n## The Dockerfile\n\n```\nRUN apt-get update \\\n        && apt-get install -y -t unstable --no-install-recommends \\\n                libopenblas0-pthread \\\n\t\tlittler \\\n                r-cran-docopt \\\n                r-cran-littler \\\n\t\tr-base=${R_BASE_VERSION}-* \\\n\t\tr-base-dev=${R_BASE_VERSION}-* \\\n                r-base-core=${R_BASE_VERSION}-* \\\n\t\tr-recommended=${R_BASE_VERSION}-* \\\n```\n\nInstall R\n\n::: {.fragment}\n```\nCMD [\"R\"]\n```\n\nRun R\n:::\n\n---\n\n## The Dockerfile\n\nLet's try making our own Dockerfile building on top of `r-base`\n\n```\nFROM r-base\n```\n\n## The Dockerfile \n\nLet's try making our own Dockerfile building on top of `r-base`\n\n```\nFROM r-base\nRUN Rscript -e \"install.packages(c('palmerpenguins','dplyr','ggplot2'))\"\n```\n\n## The Dockerfile\n\nLet's try making our own Dockerfile building on top of `r-base`\n\n```\nFROM r-base\nRUN Rscript -e \"install.packages(c('palmerpenguins','dplyr','ggplot2'))\"\nCMD [\"R\"]\n```\n\n::: {.fragment}\nWe build containers using\n\n```bash\ndocker build -t <name> .\n```\n\nThis will take some time to install the packages\n:::\n\n::: {.fragment}\nThen launch the container with \n\n```bash\ndocker run -ti --rm <name>\n```\n:::\n\n## Copying files into the image\n\nA typical use-case for Docker contains is to include the completed code with an image. \n\nThen, when someone else pulls the image, it will also pull the code.\n\nFor example:\n\n```\nFROM rocker/r-ver:4.3.1\n\n# Copy code into the image\nCOPY ./my-analysis /home/rstudio/my-analysis\n\n# Install any required packages\nRUN R -e \"install.packages('renv'); renv::restore()\"\n\n# Set working directory\nWORKDIR /home/rstudio/my-analysis\n\n# Default command (optional)\nCMD [\"Rscript\", \"run-analysis.R\"]\n```\n\n## RStudio Server\n\nRStudio Server is a browser-based version of RStudio.\n\nInitially developed for use 'in the cloud', it can be a convenient way to get RStudio to connect to Docker.\n\nThe Rocker project provides pre-built containers for RStudio Server: <https://rocker-project.org/images/versioned/rstudio.html>\n\nWe launch this _almost_ the same way we've launched every other container:\n\n```bash\ndocker run rocker/rstudio -d \n```\n\n::: {.fragment}\nThe `-d` flag says 'run in the background'\n:::\n\n::: {.fragment}\nWe have dropped the `--rm` flag so that the container _persists_ between sessions - useful as a development environment!\n:::\n\n## Getting our files into the container\n\nOf course, we can edit files and run them in the container. We probably want to get them _out_ in some way.\n\nWe could:\n\n1. Download the files from the web interface\n2. Use `git`: but then we would have to put that in our Dockerfile\n2. \"Bind\" the working directory into the container\n\n## Binding folders\n\nThere are two types of bind: soft and hard.\n\nToday we will only cover \"soft\" binding\n\nSoft binding is basically 'linking' a folder from your host system into the container. We do that as part of the `docker run` command\n\n```bash\ndocker run -d -p 8787:8787 --mount type=bind,source=\"($PWD)/<name>\",target=/home/rstudio rocker/rstudio\n```\n\n::: {.fragment}\n\nThis maps the directory `/<name>` into the RStudio container. Changes will persist.\n:::\n\n## `docker-compose`\n\nThe commands for launching a docker container can get very long\n\nWe may also want to deploy multiple containers running different programs\n\n* A container running R\n* A container running a database\n* A container running a webserver\n\n::: {.fragment}\n`docker-compose` is a tool that lets us set up all of our containers in a single command\n:::\n\n## `docker-compose` format\n\n```yaml\nversion: \"3.9\"\n\nservices:\n  rstudio:\n    image: rocker/rstudio\n    ports:\n      - \"8787:8787\"\n    volumes:\n      - .:/home/rstudio/project\n    environment:\n      PASSWORD: rstudio\n    init: true\n    # Optional: install git in container startup (if missing)\n    command: >\n      bash -c \"\n        apt-get update &&\n        apt-get install -y git &&\n        /init\"\n```\n\n::: {.fragment}\nThen run\n\n```bash\ndocker-compose up -d\n```\n:::\n\n## `docker-compose` with multiple services\n\n```yaml\nversion: \"3.9\"\nservices:\n  rstudio:\n    image: rocker/rstudio\n    ports:\n      - \"8787:8787\"\n    volumes:\n      - .:/home/rstudio/project\n    environment:\n      PASSWORD: rstudio\n    init: true\n\n  db:\n    image: postgres\n    environment:\n      POSTGRES_PASSWORD: example\n```\n\n\n## Environment Variables\n\nYou might notice here the `environment` section. This is used to set _environment variables_.\n\nExample: Set RStudio password\n\n```yaml\nservices:\n  rstudio:\n    image: rocker/rstudio\n    ports:\n      - \"8787:8787\"\n    environment:\n      - PASSWORD=yourpassword\n```\n\nAlso useful for:\n- API keys\n- R environment settings\n- Application config\n\n---\n\n## Persistent storage\n\nSo far we've looked at\n\n* Ephemeral storage inside the container\n* Bind mounts on the host filesystem\n\nThere is a third option: persistent storage inside the container\n\n## Persistent storage\n\n| Feature     | Named Volume                  | Bind Mount                 |\n| ----------- | ----------------------------- | -------------------------- |\n| Lifecycle   | Managed by Docker             | Depends on host filesystem |\n| Portability | Portable                      | Not portable               |\n| Performance | Slightly better in some cases | Depends on host OS         |\n| Use case    | Container data                | Dev code or custom config  |\n\n## Persistent storage\n\nCreating a volume:\n\n```bash\ndocker volume create --name mydata\n```\n\nAnd use it in a container:\n\n```bash\ndocker run -v mydata:/app/data myimage\n```\n\n## Persistent storage\n\nYou can also do this in a `docker-compose`\n\n```yaml\nversion: \"3\"\nservices:\n  rstudio:\n    image: rocker/rstudio\n    volumes:\n      - mydata:/home/rstudio/data\n\nvolumes:\n  mydata:\n```\n\n## Use-case: Sharing R Packages\n\nYou might have multiple containers that should have _identical_ packages installed.\n\n1. Create the volume\n\n```bash\ndocker create volume rlibs\n```\n\n2. Install packages using a container with `rlibs` mounted\n\n3. Mount the volume in your container\n\n```yaml\nvolumes:\n  - rlibs:/usr/local/lib/R/site-library\n```\n\n## Use-case: Sharing R Packages\n\nThis is actually not a great idea, as it relies on:\n\n* All containers using the same R version\n* All containers using the same operating system\n* Permissions have to be broad in the containers\n* Containers are not isolated: installing new packages could be problematic\n\n::: {.fragment}\nA better idea would be to create a new Docker image with the packages you need pre-installed.\n:::\n\n## Sharing containers\n\nWe have so far built containers locally using\n\n```bash\ndocker build\n```\n\nWe push our built containers to Dockerhub, much like we push our git repos to GitHub.\n\n## Sharing containers\n\nFirst, login with\n\n```bash\ndocker login\n```\n\nBuild your container as follows:\n\n```bash\ndocker build -t <your-username>/<image-name>\n```\n\nThen push your container:\n\n```bash\ndocker push <your-username>/<image-name>\n```\n\n::: {.fragment}\nOthers can then pull your container using\n\n```bash\ndocker pull <your-username>/<image-name>\n```\n\njust like we have done with the `rocker/rstudio` image!\n\n:::\n\n## Cleaning up\n\nOver time, your docker contains will probably accumulate. This includes:\n\n* Containers\n* Volumes\n* Images\n* Network mappings\n\nWe can clean these up with\n\n```bash\ndocker system prune\n```\n\n::: {.callout-warning}\nUse with caution: deletes **stopped** containers and **dangling** images!\n:::\n\n## Summary\n\n* Docker _containerises_ our work, allowing others to deploy the container seamlessly.\n* When paired with the code copying, others will get an (almost) exact copy of your analysis.\n* Docker is used incredibly broadly, and some familiarity will put you ahead\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}