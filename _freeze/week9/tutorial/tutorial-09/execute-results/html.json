{
  "hash": "1b4715ca74f8f83ee85148dfdb63ce5a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Tutorial 9\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    html:\n        output-file: index.html\n        embed-resources: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# Introduction\n\nIn this tutorial, we will cover the following topics:\n\n1. Creating a Git repository from existing work using `git init` and setting up the remote.\n2. Adding a license to your repository on GitHub.\n\n\n# Setting Up a New Project in RStudio\n\nTo begin, we will set up a new project in RStudio without using version control.\n\n## Step 1: Create a New Project\n\n1. Open RStudio.\n2. Go to the top menu and select `File` > `New Project...`.\n3. In the \"New Project\" wizard, select `New Directory`.\n4. Choose `New Project`.\n5. Enter a name for your project and select a location on your computer where you want to save it.\n6. Click `Create Project`.\n\nYou now have a new RStudio project set up without version control\n\n---\n\n\n# Creating a Git Repository from Existing Work\n\nIf you have an existing project that you want to version control with Git, follow these steps:\n\n## Step 1: Initialize the Git Repository\n\n1. Open your terminal or command prompt.\n2. Navigate to the root directory of your existing project using the `cd` command. For example:\n   ```bash\n   cd path/to/your/project\n   ```\n3. Initialize a new Git repository in this directory by running:\n   ```bash\n   git init\n   ```\n   This command creates a new subdirectory named `.git` that contains all of your necessary repository files.\n\n## Step 2: Add Your Files to the Repository\n\n1. Not all of our files should be added to git. For example, the `.Rproj.user.` folder should be left out. Create a new text file called `.gitignore` and add the pattern `.Rproj.user/` to ignore. Test if this is working using\n   ```bash\n   git status\n   ```\n\n2. Add all of your project files to the staging area:\n   ```bash\n   git add .\n   ```\n3. Commit the files to the repository with a descriptive message:\n   ```bash\n   git commit -m \"Initial commit\"\n   ```\n\n## Step 3: Set Up the Remote Repository\n\n1. Go to GitHub and create a new repository. Do not initialize it with a README, .gitignore, or license.\n2. Copy the URL of the new GitHub repository.\n3. In your terminal, add the remote repository URL to your local repository:\n   ```bash\n   git remote add origin git@github.com:your-username/your-repository.git\n   ```\n4. Push your local repository to GitHub:\n   ```bash\n   git push -u origin main\n   ```\n\nYou should now be able to see your repository on GitHub.\n\n---\n\n\n# Adding a License on GitHub\n\nAdding a license to your repository is important for defining how others can use your code. Follow these steps to add a license:\n\n## Step 1: Choose a License\n\n1. Go to [Choose a License](https://choosealicense.org/) to find a license that suits your needs.\n2. Copy the text of the license you choose.\n\n## Step 2: Add the License to Your Repository\n\n### Method 1: Using RStudio\n\nLicenses are just plain text files (like `gitignore`).\n\n1. Create a new text file in RStudio, and past the contents of the license you chose.\n2. Save the license as LICENSE (with no extension)\n3. Add and commit the files, and push to GitHub\n   ```bash\n   git add LICENSE\n   git commit -m \"Add license\"\n   git push origin main\n   ```\n4. Check if you can see the license file on GitHub\n\n### Method 2: Using GitHub\n\n1. In your GitHub repository, click on the \"Add file\" button and select \"Create new file\".\n2. Name the file `LICENSE` (or `LICENSE.md` if you prefer Markdown format).\n3. Paste the license text into the file.\n4. Scroll down and click \"Commit new file\" to add the license to your repository.\n\n::: {.callout-tip}\nGitHub will also suggest you some licenses. If these suit your needs, you can just use those.\n:::\n\n# Conclusion\n\nYou have now successfully set up a new project in RStudio, created a Git repository from existing work, set up the remote, and added a license to your GitHub repository. These steps are fundamental for managing your projects and collaborating with others in a reproducible manner.\n",
    "supporting": [
      "tutorial-09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}